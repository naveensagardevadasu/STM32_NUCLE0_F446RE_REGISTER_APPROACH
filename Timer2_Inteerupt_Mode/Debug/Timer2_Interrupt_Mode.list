
Timer2_Interrupt_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d0c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000ed0  08000ed0  00001ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ef8  08000ef8  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ef8  08000ef8  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ef8  08000ef8  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ef8  08000ef8  00001ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000efc  08000efc  00001efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000f00  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000f5c  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000f5c  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001148  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000463  00000000  00000000  000031d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00003638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000dc  00000000  00000000  00003778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d6ac  00000000  00000000  00003854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014cf  00000000  00000000  00010f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004789d  00000000  00000000  000123cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00059c6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a84  00000000  00000000  00059cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0005a734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000eb8 	.word	0x08000eb8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08000eb8 	.word	0x08000eb8

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	@ (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <Timer2_init>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void Timer2_init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
		/*Enable clock access to tim2*/
		RCC->APB1ENR |=(1U<<0);
 8000244:	4b12      	ldr	r3, [pc, #72]	@ (8000290 <Timer2_init+0x50>)
 8000246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000248:	4a11      	ldr	r2, [pc, #68]	@ (8000290 <Timer2_init+0x50>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6413      	str	r3, [r2, #64]	@ 0x40

		/*Set prescaler value*/
		TIM2->PSC =  16000 - 1 ;  //  16 000 000 / 1 600 = 10 000
 8000250:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000254:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000258:	629a      	str	r2, [r3, #40]	@ 0x28
		/*Set auto-reload value*/
		TIM2->ARR =  2000 - 1;  // 10 000 / 10 000 = 1
 800025a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800025e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000262:	62da      	str	r2, [r3, #44]	@ 0x2c
		/*Clear counter*/
		TIM2->CNT = 0;
 8000264:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000268:	2200      	movs	r2, #0
 800026a:	625a      	str	r2, [r3, #36]	@ 0x24

		/*Enable TIM2 interrupt*/
		TIM2->DIER |=(1U<<0);
 800026c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000270:	68db      	ldr	r3, [r3, #12]
 8000272:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	60d3      	str	r3, [r2, #12]

		/*Enable TIM2 interrupt in NVIC*/
		//*NVIC_ISER0 |=(1<<28);
		NVIC_EnableIRQ(TIM2_IRQn);
 800027c:	201c      	movs	r0, #28
 800027e:	f7ff ffc1 	bl	8000204 <__NVIC_EnableIRQ>

		/*Enable timer*/
		TIM2->CR1 = (1U<<0);
 8000282:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000286:	2201      	movs	r2, #1
 8000288:	601a      	str	r2, [r3, #0]

}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40023800 	.word	0x40023800

08000294 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0

/*Clear update interrupt flag*/
TIM2->SR &=~(1U<<0);
 800029a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800029e:	691b      	ldr	r3, [r3, #16]
 80002a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a4:	f023 0301 	bic.w	r3, r3, #1
 80002a8:	6113      	str	r3, [r2, #16]
printf("im in TIM2_ISR\n");
 80002aa:	480c      	ldr	r0, [pc, #48]	@ (80002dc <TIM2_IRQHandler+0x48>)
 80002ac:	f000 fa70 	bl	8000790 <puts>
GPIOA->ODR ^=(1U<<5);
 80002b0:	4b0b      	ldr	r3, [pc, #44]	@ (80002e0 <TIM2_IRQHandler+0x4c>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a0a      	ldr	r2, [pc, #40]	@ (80002e0 <TIM2_IRQHandler+0x4c>)
 80002b6:	f083 0320 	eor.w	r3, r3, #32
 80002ba:	6153      	str	r3, [r2, #20]
for(uint32_t i=0;i<20000;i++);
 80002bc:	2300      	movs	r3, #0
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	e002      	b.n	80002c8 <TIM2_IRQHandler+0x34>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	3301      	adds	r3, #1
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d9f7      	bls.n	80002c2 <TIM2_IRQHandler+0x2e>
}
 80002d2:	bf00      	nop
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	08000ed0 	.word	0x08000ed0
 80002e0:	40020000 	.word	0x40020000

080002e4 <GPIO_Init>:


}

void GPIO_Init(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
		RCC->AHB1ENR |=(1<<0); // enable clock for PA5
 80002e8:	4b11      	ldr	r3, [pc, #68]	@ (8000330 <GPIO_Init+0x4c>)
 80002ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ec:	4a10      	ldr	r2, [pc, #64]	@ (8000330 <GPIO_Init+0x4c>)
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6313      	str	r3, [r2, #48]	@ 0x30
		GPIOA->MODER |= (1<<10);
 80002f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000334 <GPIO_Init+0x50>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000334 <GPIO_Init+0x50>)
 80002fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002fe:	6013      	str	r3, [r2, #0]
		GPIOA->OTYPER &=~(1<<5);
 8000300:	4b0c      	ldr	r3, [pc, #48]	@ (8000334 <GPIO_Init+0x50>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a0b      	ldr	r2, [pc, #44]	@ (8000334 <GPIO_Init+0x50>)
 8000306:	f023 0320 	bic.w	r3, r3, #32
 800030a:	6053      	str	r3, [r2, #4]
		GPIOA->OSPEEDR |=(1<<10);
 800030c:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <GPIO_Init+0x50>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	4a08      	ldr	r2, [pc, #32]	@ (8000334 <GPIO_Init+0x50>)
 8000312:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000316:	6093      	str	r3, [r2, #8]
		GPIOA->PUPDR &=~(3<<10);
 8000318:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <GPIO_Init+0x50>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	4a05      	ldr	r2, [pc, #20]	@ (8000334 <GPIO_Init+0x50>)
 800031e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000322:	60d3      	str	r3, [r2, #12]

}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	40020000 	.word	0x40020000

08000338 <main>:

int main(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0

	 	 GPIO_Init();
 800033e:	f7ff ffd1 	bl	80002e4 <GPIO_Init>
	 	 Timer2_init();
 8000342:	f7ff ff7d 	bl	8000240 <Timer2_init>
	 	 printf("im in main\n");
 8000346:	4808      	ldr	r0, [pc, #32]	@ (8000368 <main+0x30>)
 8000348:	f000 fa22 	bl	8000790 <puts>

	 	while(1)
		{
			printf("im in while\n");
 800034c:	4807      	ldr	r0, [pc, #28]	@ (800036c <main+0x34>)
 800034e:	f000 fa1f 	bl	8000790 <puts>
			for(uint32_t i=0;i<200000;i++);
 8000352:	2300      	movs	r3, #0
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	e002      	b.n	800035e <main+0x26>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3301      	adds	r3, #1
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a03      	ldr	r2, [pc, #12]	@ (8000370 <main+0x38>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d9f8      	bls.n	8000358 <main+0x20>
			printf("im in while\n");
 8000366:	e7f1      	b.n	800034c <main+0x14>
 8000368:	08000ee0 	.word	0x08000ee0
 800036c:	08000eec 	.word	0x08000eec
 8000370:	00030d3f 	.word	0x00030d3f

08000374 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800037e:	4b0f      	ldr	r3, [pc, #60]	@ (80003bc <ITM_SendChar+0x48>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a0e      	ldr	r2, [pc, #56]	@ (80003bc <ITM_SendChar+0x48>)
 8000384:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000388:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800038a:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <ITM_SendChar+0x4c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a0c      	ldr	r2, [pc, #48]	@ (80003c0 <ITM_SendChar+0x4c>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000396:	bf00      	nop
 8000398:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f8      	beq.n	8000398 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003a6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	6013      	str	r3, [r2, #0]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	e000edfc 	.word	0xe000edfc
 80003c0:	e0000e00 	.word	0xe0000e00

080003c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]
 80003d4:	e00a      	b.n	80003ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003d6:	f3af 8000 	nop.w
 80003da:	4601      	mov	r1, r0
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	1c5a      	adds	r2, r3, #1
 80003e0:	60ba      	str	r2, [r7, #8]
 80003e2:	b2ca      	uxtb	r2, r1
 80003e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	3301      	adds	r3, #1
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	697a      	ldr	r2, [r7, #20]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	dbf0      	blt.n	80003d6 <_read+0x12>
	}

return len;
 80003f4:	687b      	ldr	r3, [r7, #4]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3718      	adds	r7, #24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	b086      	sub	sp, #24
 8000402:	af00      	add	r7, sp, #0
 8000404:	60f8      	str	r0, [r7, #12]
 8000406:	60b9      	str	r1, [r7, #8]
 8000408:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	e009      	b.n	8000424 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	1c5a      	adds	r2, r3, #1
 8000414:	60ba      	str	r2, [r7, #8]
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff ffab 	bl	8000374 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	3301      	adds	r3, #1
 8000422:	617b      	str	r3, [r7, #20]
 8000424:	697a      	ldr	r2, [r7, #20]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	429a      	cmp	r2, r3
 800042a:	dbf1      	blt.n	8000410 <_write+0x12>
	}
	return len;
 800042c:	687b      	ldr	r3, [r7, #4]
}
 800042e:	4618      	mov	r0, r3
 8000430:	3718      	adds	r7, #24
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <_close>:

int _close(int file)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
	return -1;
 800043e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800045e:	605a      	str	r2, [r3, #4]
	return 0;
 8000460:	2300      	movs	r3, #0
}
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <_isatty>:

int _isatty(int file)
{
 800046e:	b480      	push	{r7}
 8000470:	b083      	sub	sp, #12
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
	return 1;
 8000476:	2301      	movs	r3, #1
}
 8000478:	4618      	mov	r0, r3
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
	return 0;
 8000490:	2300      	movs	r3, #0
}
 8000492:	4618      	mov	r0, r3
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
	...

080004a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a8:	4a14      	ldr	r2, [pc, #80]	@ (80004fc <_sbrk+0x5c>)
 80004aa:	4b15      	ldr	r3, [pc, #84]	@ (8000500 <_sbrk+0x60>)
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004b4:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <_sbrk+0x64>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d102      	bne.n	80004c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004bc:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <_sbrk+0x64>)
 80004be:	4a12      	ldr	r2, [pc, #72]	@ (8000508 <_sbrk+0x68>)
 80004c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004c2:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <_sbrk+0x64>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	693a      	ldr	r2, [r7, #16]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d207      	bcs.n	80004e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004d0:	f000 f96e 	bl	80007b0 <__errno>
 80004d4:	4603      	mov	r3, r0
 80004d6:	220c      	movs	r2, #12
 80004d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004de:	e009      	b.n	80004f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004e0:	4b08      	ldr	r3, [pc, #32]	@ (8000504 <_sbrk+0x64>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004e6:	4b07      	ldr	r3, [pc, #28]	@ (8000504 <_sbrk+0x64>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	4a05      	ldr	r2, [pc, #20]	@ (8000504 <_sbrk+0x64>)
 80004f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004f2:	68fb      	ldr	r3, [r7, #12]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3718      	adds	r7, #24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20020000 	.word	0x20020000
 8000500:	00000400 	.word	0x00000400
 8000504:	20000078 	.word	0x20000078
 8000508:	200001c8 	.word	0x200001c8

0800050c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800050c:	480d      	ldr	r0, [pc, #52]	@ (8000544 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000510:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480c      	ldr	r0, [pc, #48]	@ (8000548 <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490d      	ldr	r1, [pc, #52]	@ (800054c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0a      	ldr	r2, [pc, #40]	@ (8000554 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0a      	ldr	r4, [pc, #40]	@ (8000558 <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800053a:	f000 f93f 	bl	80007bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053e:	f7ff fefb 	bl	8000338 <main>

08000542 <LoopForever>:

LoopForever:
  b LoopForever
 8000542:	e7fe      	b.n	8000542 <LoopForever>
  ldr   r0, =_estack
 8000544:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800054c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000550:	08000f00 	.word	0x08000f00
  ldr r2, =_sbss
 8000554:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000558:	200001c8 	.word	0x200001c8

0800055c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC_IRQHandler>
	...

08000560 <std>:
 8000560:	2300      	movs	r3, #0
 8000562:	b510      	push	{r4, lr}
 8000564:	4604      	mov	r4, r0
 8000566:	e9c0 3300 	strd	r3, r3, [r0]
 800056a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800056e:	6083      	str	r3, [r0, #8]
 8000570:	8181      	strh	r1, [r0, #12]
 8000572:	6643      	str	r3, [r0, #100]	@ 0x64
 8000574:	81c2      	strh	r2, [r0, #14]
 8000576:	6183      	str	r3, [r0, #24]
 8000578:	4619      	mov	r1, r3
 800057a:	2208      	movs	r2, #8
 800057c:	305c      	adds	r0, #92	@ 0x5c
 800057e:	f000 f90f 	bl	80007a0 <memset>
 8000582:	4b0d      	ldr	r3, [pc, #52]	@ (80005b8 <std+0x58>)
 8000584:	6263      	str	r3, [r4, #36]	@ 0x24
 8000586:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <std+0x5c>)
 8000588:	62a3      	str	r3, [r4, #40]	@ 0x28
 800058a:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <std+0x60>)
 800058c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800058e:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <std+0x64>)
 8000590:	6323      	str	r3, [r4, #48]	@ 0x30
 8000592:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <std+0x68>)
 8000594:	6224      	str	r4, [r4, #32]
 8000596:	429c      	cmp	r4, r3
 8000598:	d006      	beq.n	80005a8 <std+0x48>
 800059a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800059e:	4294      	cmp	r4, r2
 80005a0:	d002      	beq.n	80005a8 <std+0x48>
 80005a2:	33d0      	adds	r3, #208	@ 0xd0
 80005a4:	429c      	cmp	r4, r3
 80005a6:	d105      	bne.n	80005b4 <std+0x54>
 80005a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80005ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005b0:	f000 b928 	b.w	8000804 <__retarget_lock_init_recursive>
 80005b4:	bd10      	pop	{r4, pc}
 80005b6:	bf00      	nop
 80005b8:	08000ac1 	.word	0x08000ac1
 80005bc:	08000ae3 	.word	0x08000ae3
 80005c0:	08000b1b 	.word	0x08000b1b
 80005c4:	08000b3f 	.word	0x08000b3f
 80005c8:	2000007c 	.word	0x2000007c

080005cc <stdio_exit_handler>:
 80005cc:	4a02      	ldr	r2, [pc, #8]	@ (80005d8 <stdio_exit_handler+0xc>)
 80005ce:	4903      	ldr	r1, [pc, #12]	@ (80005dc <stdio_exit_handler+0x10>)
 80005d0:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <stdio_exit_handler+0x14>)
 80005d2:	f000 b869 	b.w	80006a8 <_fwalk_sglue>
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000
 80005dc:	08000a59 	.word	0x08000a59
 80005e0:	20000010 	.word	0x20000010

080005e4 <cleanup_stdio>:
 80005e4:	6841      	ldr	r1, [r0, #4]
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <cleanup_stdio+0x34>)
 80005e8:	4299      	cmp	r1, r3
 80005ea:	b510      	push	{r4, lr}
 80005ec:	4604      	mov	r4, r0
 80005ee:	d001      	beq.n	80005f4 <cleanup_stdio+0x10>
 80005f0:	f000 fa32 	bl	8000a58 <_fflush_r>
 80005f4:	68a1      	ldr	r1, [r4, #8]
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <cleanup_stdio+0x38>)
 80005f8:	4299      	cmp	r1, r3
 80005fa:	d002      	beq.n	8000602 <cleanup_stdio+0x1e>
 80005fc:	4620      	mov	r0, r4
 80005fe:	f000 fa2b 	bl	8000a58 <_fflush_r>
 8000602:	68e1      	ldr	r1, [r4, #12]
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <cleanup_stdio+0x3c>)
 8000606:	4299      	cmp	r1, r3
 8000608:	d004      	beq.n	8000614 <cleanup_stdio+0x30>
 800060a:	4620      	mov	r0, r4
 800060c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000610:	f000 ba22 	b.w	8000a58 <_fflush_r>
 8000614:	bd10      	pop	{r4, pc}
 8000616:	bf00      	nop
 8000618:	2000007c 	.word	0x2000007c
 800061c:	200000e4 	.word	0x200000e4
 8000620:	2000014c 	.word	0x2000014c

08000624 <global_stdio_init.part.0>:
 8000624:	b510      	push	{r4, lr}
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <global_stdio_init.part.0+0x30>)
 8000628:	4c0b      	ldr	r4, [pc, #44]	@ (8000658 <global_stdio_init.part.0+0x34>)
 800062a:	4a0c      	ldr	r2, [pc, #48]	@ (800065c <global_stdio_init.part.0+0x38>)
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	4620      	mov	r0, r4
 8000630:	2200      	movs	r2, #0
 8000632:	2104      	movs	r1, #4
 8000634:	f7ff ff94 	bl	8000560 <std>
 8000638:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800063c:	2201      	movs	r2, #1
 800063e:	2109      	movs	r1, #9
 8000640:	f7ff ff8e 	bl	8000560 <std>
 8000644:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000648:	2202      	movs	r2, #2
 800064a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800064e:	2112      	movs	r1, #18
 8000650:	f7ff bf86 	b.w	8000560 <std>
 8000654:	200001b4 	.word	0x200001b4
 8000658:	2000007c 	.word	0x2000007c
 800065c:	080005cd 	.word	0x080005cd

08000660 <__sfp_lock_acquire>:
 8000660:	4801      	ldr	r0, [pc, #4]	@ (8000668 <__sfp_lock_acquire+0x8>)
 8000662:	f000 b8d0 	b.w	8000806 <__retarget_lock_acquire_recursive>
 8000666:	bf00      	nop
 8000668:	200001b9 	.word	0x200001b9

0800066c <__sfp_lock_release>:
 800066c:	4801      	ldr	r0, [pc, #4]	@ (8000674 <__sfp_lock_release+0x8>)
 800066e:	f000 b8cb 	b.w	8000808 <__retarget_lock_release_recursive>
 8000672:	bf00      	nop
 8000674:	200001b9 	.word	0x200001b9

08000678 <__sinit>:
 8000678:	b510      	push	{r4, lr}
 800067a:	4604      	mov	r4, r0
 800067c:	f7ff fff0 	bl	8000660 <__sfp_lock_acquire>
 8000680:	6a23      	ldr	r3, [r4, #32]
 8000682:	b11b      	cbz	r3, 800068c <__sinit+0x14>
 8000684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000688:	f7ff bff0 	b.w	800066c <__sfp_lock_release>
 800068c:	4b04      	ldr	r3, [pc, #16]	@ (80006a0 <__sinit+0x28>)
 800068e:	6223      	str	r3, [r4, #32]
 8000690:	4b04      	ldr	r3, [pc, #16]	@ (80006a4 <__sinit+0x2c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1f5      	bne.n	8000684 <__sinit+0xc>
 8000698:	f7ff ffc4 	bl	8000624 <global_stdio_init.part.0>
 800069c:	e7f2      	b.n	8000684 <__sinit+0xc>
 800069e:	bf00      	nop
 80006a0:	080005e5 	.word	0x080005e5
 80006a4:	200001b4 	.word	0x200001b4

080006a8 <_fwalk_sglue>:
 80006a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006ac:	4607      	mov	r7, r0
 80006ae:	4688      	mov	r8, r1
 80006b0:	4614      	mov	r4, r2
 80006b2:	2600      	movs	r6, #0
 80006b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006b8:	f1b9 0901 	subs.w	r9, r9, #1
 80006bc:	d505      	bpl.n	80006ca <_fwalk_sglue+0x22>
 80006be:	6824      	ldr	r4, [r4, #0]
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	d1f7      	bne.n	80006b4 <_fwalk_sglue+0xc>
 80006c4:	4630      	mov	r0, r6
 80006c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006ca:	89ab      	ldrh	r3, [r5, #12]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d907      	bls.n	80006e0 <_fwalk_sglue+0x38>
 80006d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006d4:	3301      	adds	r3, #1
 80006d6:	d003      	beq.n	80006e0 <_fwalk_sglue+0x38>
 80006d8:	4629      	mov	r1, r5
 80006da:	4638      	mov	r0, r7
 80006dc:	47c0      	blx	r8
 80006de:	4306      	orrs	r6, r0
 80006e0:	3568      	adds	r5, #104	@ 0x68
 80006e2:	e7e9      	b.n	80006b8 <_fwalk_sglue+0x10>

080006e4 <_puts_r>:
 80006e4:	6a03      	ldr	r3, [r0, #32]
 80006e6:	b570      	push	{r4, r5, r6, lr}
 80006e8:	6884      	ldr	r4, [r0, #8]
 80006ea:	4605      	mov	r5, r0
 80006ec:	460e      	mov	r6, r1
 80006ee:	b90b      	cbnz	r3, 80006f4 <_puts_r+0x10>
 80006f0:	f7ff ffc2 	bl	8000678 <__sinit>
 80006f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006f6:	07db      	lsls	r3, r3, #31
 80006f8:	d405      	bmi.n	8000706 <_puts_r+0x22>
 80006fa:	89a3      	ldrh	r3, [r4, #12]
 80006fc:	0598      	lsls	r0, r3, #22
 80006fe:	d402      	bmi.n	8000706 <_puts_r+0x22>
 8000700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000702:	f000 f880 	bl	8000806 <__retarget_lock_acquire_recursive>
 8000706:	89a3      	ldrh	r3, [r4, #12]
 8000708:	0719      	lsls	r1, r3, #28
 800070a:	d502      	bpl.n	8000712 <_puts_r+0x2e>
 800070c:	6923      	ldr	r3, [r4, #16]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d135      	bne.n	800077e <_puts_r+0x9a>
 8000712:	4621      	mov	r1, r4
 8000714:	4628      	mov	r0, r5
 8000716:	f000 fa55 	bl	8000bc4 <__swsetup_r>
 800071a:	b380      	cbz	r0, 800077e <_puts_r+0x9a>
 800071c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000720:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000722:	07da      	lsls	r2, r3, #31
 8000724:	d405      	bmi.n	8000732 <_puts_r+0x4e>
 8000726:	89a3      	ldrh	r3, [r4, #12]
 8000728:	059b      	lsls	r3, r3, #22
 800072a:	d402      	bmi.n	8000732 <_puts_r+0x4e>
 800072c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800072e:	f000 f86b 	bl	8000808 <__retarget_lock_release_recursive>
 8000732:	4628      	mov	r0, r5
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	2b00      	cmp	r3, #0
 8000738:	da04      	bge.n	8000744 <_puts_r+0x60>
 800073a:	69a2      	ldr	r2, [r4, #24]
 800073c:	429a      	cmp	r2, r3
 800073e:	dc17      	bgt.n	8000770 <_puts_r+0x8c>
 8000740:	290a      	cmp	r1, #10
 8000742:	d015      	beq.n	8000770 <_puts_r+0x8c>
 8000744:	6823      	ldr	r3, [r4, #0]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	6022      	str	r2, [r4, #0]
 800074a:	7019      	strb	r1, [r3, #0]
 800074c:	68a3      	ldr	r3, [r4, #8]
 800074e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000752:	3b01      	subs	r3, #1
 8000754:	60a3      	str	r3, [r4, #8]
 8000756:	2900      	cmp	r1, #0
 8000758:	d1ed      	bne.n	8000736 <_puts_r+0x52>
 800075a:	2b00      	cmp	r3, #0
 800075c:	da11      	bge.n	8000782 <_puts_r+0x9e>
 800075e:	4622      	mov	r2, r4
 8000760:	210a      	movs	r1, #10
 8000762:	4628      	mov	r0, r5
 8000764:	f000 f9ef 	bl	8000b46 <__swbuf_r>
 8000768:	3001      	adds	r0, #1
 800076a:	d0d7      	beq.n	800071c <_puts_r+0x38>
 800076c:	250a      	movs	r5, #10
 800076e:	e7d7      	b.n	8000720 <_puts_r+0x3c>
 8000770:	4622      	mov	r2, r4
 8000772:	4628      	mov	r0, r5
 8000774:	f000 f9e7 	bl	8000b46 <__swbuf_r>
 8000778:	3001      	adds	r0, #1
 800077a:	d1e7      	bne.n	800074c <_puts_r+0x68>
 800077c:	e7ce      	b.n	800071c <_puts_r+0x38>
 800077e:	3e01      	subs	r6, #1
 8000780:	e7e4      	b.n	800074c <_puts_r+0x68>
 8000782:	6823      	ldr	r3, [r4, #0]
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	6022      	str	r2, [r4, #0]
 8000788:	220a      	movs	r2, #10
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	e7ee      	b.n	800076c <_puts_r+0x88>
	...

08000790 <puts>:
 8000790:	4b02      	ldr	r3, [pc, #8]	@ (800079c <puts+0xc>)
 8000792:	4601      	mov	r1, r0
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	f7ff bfa5 	b.w	80006e4 <_puts_r>
 800079a:	bf00      	nop
 800079c:	2000000c 	.word	0x2000000c

080007a0 <memset>:
 80007a0:	4402      	add	r2, r0
 80007a2:	4603      	mov	r3, r0
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d100      	bne.n	80007aa <memset+0xa>
 80007a8:	4770      	bx	lr
 80007aa:	f803 1b01 	strb.w	r1, [r3], #1
 80007ae:	e7f9      	b.n	80007a4 <memset+0x4>

080007b0 <__errno>:
 80007b0:	4b01      	ldr	r3, [pc, #4]	@ (80007b8 <__errno+0x8>)
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	2000000c 	.word	0x2000000c

080007bc <__libc_init_array>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	4d0d      	ldr	r5, [pc, #52]	@ (80007f4 <__libc_init_array+0x38>)
 80007c0:	4c0d      	ldr	r4, [pc, #52]	@ (80007f8 <__libc_init_array+0x3c>)
 80007c2:	1b64      	subs	r4, r4, r5
 80007c4:	10a4      	asrs	r4, r4, #2
 80007c6:	2600      	movs	r6, #0
 80007c8:	42a6      	cmp	r6, r4
 80007ca:	d109      	bne.n	80007e0 <__libc_init_array+0x24>
 80007cc:	4d0b      	ldr	r5, [pc, #44]	@ (80007fc <__libc_init_array+0x40>)
 80007ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000800 <__libc_init_array+0x44>)
 80007d0:	f000 fb72 	bl	8000eb8 <_init>
 80007d4:	1b64      	subs	r4, r4, r5
 80007d6:	10a4      	asrs	r4, r4, #2
 80007d8:	2600      	movs	r6, #0
 80007da:	42a6      	cmp	r6, r4
 80007dc:	d105      	bne.n	80007ea <__libc_init_array+0x2e>
 80007de:	bd70      	pop	{r4, r5, r6, pc}
 80007e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e4:	4798      	blx	r3
 80007e6:	3601      	adds	r6, #1
 80007e8:	e7ee      	b.n	80007c8 <__libc_init_array+0xc>
 80007ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ee:	4798      	blx	r3
 80007f0:	3601      	adds	r6, #1
 80007f2:	e7f2      	b.n	80007da <__libc_init_array+0x1e>
 80007f4:	08000ef8 	.word	0x08000ef8
 80007f8:	08000ef8 	.word	0x08000ef8
 80007fc:	08000ef8 	.word	0x08000ef8
 8000800:	08000efc 	.word	0x08000efc

08000804 <__retarget_lock_init_recursive>:
 8000804:	4770      	bx	lr

08000806 <__retarget_lock_acquire_recursive>:
 8000806:	4770      	bx	lr

08000808 <__retarget_lock_release_recursive>:
 8000808:	4770      	bx	lr
	...

0800080c <sbrk_aligned>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	4e0f      	ldr	r6, [pc, #60]	@ (800084c <sbrk_aligned+0x40>)
 8000810:	460c      	mov	r4, r1
 8000812:	6831      	ldr	r1, [r6, #0]
 8000814:	4605      	mov	r5, r0
 8000816:	b911      	cbnz	r1, 800081e <sbrk_aligned+0x12>
 8000818:	f000 fae2 	bl	8000de0 <_sbrk_r>
 800081c:	6030      	str	r0, [r6, #0]
 800081e:	4621      	mov	r1, r4
 8000820:	4628      	mov	r0, r5
 8000822:	f000 fadd 	bl	8000de0 <_sbrk_r>
 8000826:	1c43      	adds	r3, r0, #1
 8000828:	d103      	bne.n	8000832 <sbrk_aligned+0x26>
 800082a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800082e:	4620      	mov	r0, r4
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	1cc4      	adds	r4, r0, #3
 8000834:	f024 0403 	bic.w	r4, r4, #3
 8000838:	42a0      	cmp	r0, r4
 800083a:	d0f8      	beq.n	800082e <sbrk_aligned+0x22>
 800083c:	1a21      	subs	r1, r4, r0
 800083e:	4628      	mov	r0, r5
 8000840:	f000 face 	bl	8000de0 <_sbrk_r>
 8000844:	3001      	adds	r0, #1
 8000846:	d1f2      	bne.n	800082e <sbrk_aligned+0x22>
 8000848:	e7ef      	b.n	800082a <sbrk_aligned+0x1e>
 800084a:	bf00      	nop
 800084c:	200001bc 	.word	0x200001bc

08000850 <_malloc_r>:
 8000850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000854:	1ccd      	adds	r5, r1, #3
 8000856:	f025 0503 	bic.w	r5, r5, #3
 800085a:	3508      	adds	r5, #8
 800085c:	2d0c      	cmp	r5, #12
 800085e:	bf38      	it	cc
 8000860:	250c      	movcc	r5, #12
 8000862:	2d00      	cmp	r5, #0
 8000864:	4606      	mov	r6, r0
 8000866:	db01      	blt.n	800086c <_malloc_r+0x1c>
 8000868:	42a9      	cmp	r1, r5
 800086a:	d904      	bls.n	8000876 <_malloc_r+0x26>
 800086c:	230c      	movs	r3, #12
 800086e:	6033      	str	r3, [r6, #0]
 8000870:	2000      	movs	r0, #0
 8000872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000876:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800094c <_malloc_r+0xfc>
 800087a:	f000 f915 	bl	8000aa8 <__malloc_lock>
 800087e:	f8d8 3000 	ldr.w	r3, [r8]
 8000882:	461c      	mov	r4, r3
 8000884:	bb44      	cbnz	r4, 80008d8 <_malloc_r+0x88>
 8000886:	4629      	mov	r1, r5
 8000888:	4630      	mov	r0, r6
 800088a:	f7ff ffbf 	bl	800080c <sbrk_aligned>
 800088e:	1c43      	adds	r3, r0, #1
 8000890:	4604      	mov	r4, r0
 8000892:	d158      	bne.n	8000946 <_malloc_r+0xf6>
 8000894:	f8d8 4000 	ldr.w	r4, [r8]
 8000898:	4627      	mov	r7, r4
 800089a:	2f00      	cmp	r7, #0
 800089c:	d143      	bne.n	8000926 <_malloc_r+0xd6>
 800089e:	2c00      	cmp	r4, #0
 80008a0:	d04b      	beq.n	800093a <_malloc_r+0xea>
 80008a2:	6823      	ldr	r3, [r4, #0]
 80008a4:	4639      	mov	r1, r7
 80008a6:	4630      	mov	r0, r6
 80008a8:	eb04 0903 	add.w	r9, r4, r3
 80008ac:	f000 fa98 	bl	8000de0 <_sbrk_r>
 80008b0:	4581      	cmp	r9, r0
 80008b2:	d142      	bne.n	800093a <_malloc_r+0xea>
 80008b4:	6821      	ldr	r1, [r4, #0]
 80008b6:	1a6d      	subs	r5, r5, r1
 80008b8:	4629      	mov	r1, r5
 80008ba:	4630      	mov	r0, r6
 80008bc:	f7ff ffa6 	bl	800080c <sbrk_aligned>
 80008c0:	3001      	adds	r0, #1
 80008c2:	d03a      	beq.n	800093a <_malloc_r+0xea>
 80008c4:	6823      	ldr	r3, [r4, #0]
 80008c6:	442b      	add	r3, r5
 80008c8:	6023      	str	r3, [r4, #0]
 80008ca:	f8d8 3000 	ldr.w	r3, [r8]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	bb62      	cbnz	r2, 800092c <_malloc_r+0xdc>
 80008d2:	f8c8 7000 	str.w	r7, [r8]
 80008d6:	e00f      	b.n	80008f8 <_malloc_r+0xa8>
 80008d8:	6822      	ldr	r2, [r4, #0]
 80008da:	1b52      	subs	r2, r2, r5
 80008dc:	d420      	bmi.n	8000920 <_malloc_r+0xd0>
 80008de:	2a0b      	cmp	r2, #11
 80008e0:	d917      	bls.n	8000912 <_malloc_r+0xc2>
 80008e2:	1961      	adds	r1, r4, r5
 80008e4:	42a3      	cmp	r3, r4
 80008e6:	6025      	str	r5, [r4, #0]
 80008e8:	bf18      	it	ne
 80008ea:	6059      	strne	r1, [r3, #4]
 80008ec:	6863      	ldr	r3, [r4, #4]
 80008ee:	bf08      	it	eq
 80008f0:	f8c8 1000 	streq.w	r1, [r8]
 80008f4:	5162      	str	r2, [r4, r5]
 80008f6:	604b      	str	r3, [r1, #4]
 80008f8:	4630      	mov	r0, r6
 80008fa:	f000 f8db 	bl	8000ab4 <__malloc_unlock>
 80008fe:	f104 000b 	add.w	r0, r4, #11
 8000902:	1d23      	adds	r3, r4, #4
 8000904:	f020 0007 	bic.w	r0, r0, #7
 8000908:	1ac2      	subs	r2, r0, r3
 800090a:	bf1c      	itt	ne
 800090c:	1a1b      	subne	r3, r3, r0
 800090e:	50a3      	strne	r3, [r4, r2]
 8000910:	e7af      	b.n	8000872 <_malloc_r+0x22>
 8000912:	6862      	ldr	r2, [r4, #4]
 8000914:	42a3      	cmp	r3, r4
 8000916:	bf0c      	ite	eq
 8000918:	f8c8 2000 	streq.w	r2, [r8]
 800091c:	605a      	strne	r2, [r3, #4]
 800091e:	e7eb      	b.n	80008f8 <_malloc_r+0xa8>
 8000920:	4623      	mov	r3, r4
 8000922:	6864      	ldr	r4, [r4, #4]
 8000924:	e7ae      	b.n	8000884 <_malloc_r+0x34>
 8000926:	463c      	mov	r4, r7
 8000928:	687f      	ldr	r7, [r7, #4]
 800092a:	e7b6      	b.n	800089a <_malloc_r+0x4a>
 800092c:	461a      	mov	r2, r3
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	42a3      	cmp	r3, r4
 8000932:	d1fb      	bne.n	800092c <_malloc_r+0xdc>
 8000934:	2300      	movs	r3, #0
 8000936:	6053      	str	r3, [r2, #4]
 8000938:	e7de      	b.n	80008f8 <_malloc_r+0xa8>
 800093a:	230c      	movs	r3, #12
 800093c:	6033      	str	r3, [r6, #0]
 800093e:	4630      	mov	r0, r6
 8000940:	f000 f8b8 	bl	8000ab4 <__malloc_unlock>
 8000944:	e794      	b.n	8000870 <_malloc_r+0x20>
 8000946:	6005      	str	r5, [r0, #0]
 8000948:	e7d6      	b.n	80008f8 <_malloc_r+0xa8>
 800094a:	bf00      	nop
 800094c:	200001c0 	.word	0x200001c0

08000950 <__sflush_r>:
 8000950:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000958:	0716      	lsls	r6, r2, #28
 800095a:	4605      	mov	r5, r0
 800095c:	460c      	mov	r4, r1
 800095e:	d454      	bmi.n	8000a0a <__sflush_r+0xba>
 8000960:	684b      	ldr	r3, [r1, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	dc02      	bgt.n	800096c <__sflush_r+0x1c>
 8000966:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000968:	2b00      	cmp	r3, #0
 800096a:	dd48      	ble.n	80009fe <__sflush_r+0xae>
 800096c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800096e:	2e00      	cmp	r6, #0
 8000970:	d045      	beq.n	80009fe <__sflush_r+0xae>
 8000972:	2300      	movs	r3, #0
 8000974:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000978:	682f      	ldr	r7, [r5, #0]
 800097a:	6a21      	ldr	r1, [r4, #32]
 800097c:	602b      	str	r3, [r5, #0]
 800097e:	d030      	beq.n	80009e2 <__sflush_r+0x92>
 8000980:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000982:	89a3      	ldrh	r3, [r4, #12]
 8000984:	0759      	lsls	r1, r3, #29
 8000986:	d505      	bpl.n	8000994 <__sflush_r+0x44>
 8000988:	6863      	ldr	r3, [r4, #4]
 800098a:	1ad2      	subs	r2, r2, r3
 800098c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800098e:	b10b      	cbz	r3, 8000994 <__sflush_r+0x44>
 8000990:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000992:	1ad2      	subs	r2, r2, r3
 8000994:	2300      	movs	r3, #0
 8000996:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000998:	6a21      	ldr	r1, [r4, #32]
 800099a:	4628      	mov	r0, r5
 800099c:	47b0      	blx	r6
 800099e:	1c43      	adds	r3, r0, #1
 80009a0:	89a3      	ldrh	r3, [r4, #12]
 80009a2:	d106      	bne.n	80009b2 <__sflush_r+0x62>
 80009a4:	6829      	ldr	r1, [r5, #0]
 80009a6:	291d      	cmp	r1, #29
 80009a8:	d82b      	bhi.n	8000a02 <__sflush_r+0xb2>
 80009aa:	4a2a      	ldr	r2, [pc, #168]	@ (8000a54 <__sflush_r+0x104>)
 80009ac:	410a      	asrs	r2, r1
 80009ae:	07d6      	lsls	r6, r2, #31
 80009b0:	d427      	bmi.n	8000a02 <__sflush_r+0xb2>
 80009b2:	2200      	movs	r2, #0
 80009b4:	6062      	str	r2, [r4, #4]
 80009b6:	04d9      	lsls	r1, r3, #19
 80009b8:	6922      	ldr	r2, [r4, #16]
 80009ba:	6022      	str	r2, [r4, #0]
 80009bc:	d504      	bpl.n	80009c8 <__sflush_r+0x78>
 80009be:	1c42      	adds	r2, r0, #1
 80009c0:	d101      	bne.n	80009c6 <__sflush_r+0x76>
 80009c2:	682b      	ldr	r3, [r5, #0]
 80009c4:	b903      	cbnz	r3, 80009c8 <__sflush_r+0x78>
 80009c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80009c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80009ca:	602f      	str	r7, [r5, #0]
 80009cc:	b1b9      	cbz	r1, 80009fe <__sflush_r+0xae>
 80009ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80009d2:	4299      	cmp	r1, r3
 80009d4:	d002      	beq.n	80009dc <__sflush_r+0x8c>
 80009d6:	4628      	mov	r0, r5
 80009d8:	f000 fa24 	bl	8000e24 <_free_r>
 80009dc:	2300      	movs	r3, #0
 80009de:	6363      	str	r3, [r4, #52]	@ 0x34
 80009e0:	e00d      	b.n	80009fe <__sflush_r+0xae>
 80009e2:	2301      	movs	r3, #1
 80009e4:	4628      	mov	r0, r5
 80009e6:	47b0      	blx	r6
 80009e8:	4602      	mov	r2, r0
 80009ea:	1c50      	adds	r0, r2, #1
 80009ec:	d1c9      	bne.n	8000982 <__sflush_r+0x32>
 80009ee:	682b      	ldr	r3, [r5, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0c6      	beq.n	8000982 <__sflush_r+0x32>
 80009f4:	2b1d      	cmp	r3, #29
 80009f6:	d001      	beq.n	80009fc <__sflush_r+0xac>
 80009f8:	2b16      	cmp	r3, #22
 80009fa:	d11e      	bne.n	8000a3a <__sflush_r+0xea>
 80009fc:	602f      	str	r7, [r5, #0]
 80009fe:	2000      	movs	r0, #0
 8000a00:	e022      	b.n	8000a48 <__sflush_r+0xf8>
 8000a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a06:	b21b      	sxth	r3, r3
 8000a08:	e01b      	b.n	8000a42 <__sflush_r+0xf2>
 8000a0a:	690f      	ldr	r7, [r1, #16]
 8000a0c:	2f00      	cmp	r7, #0
 8000a0e:	d0f6      	beq.n	80009fe <__sflush_r+0xae>
 8000a10:	0793      	lsls	r3, r2, #30
 8000a12:	680e      	ldr	r6, [r1, #0]
 8000a14:	bf08      	it	eq
 8000a16:	694b      	ldreq	r3, [r1, #20]
 8000a18:	600f      	str	r7, [r1, #0]
 8000a1a:	bf18      	it	ne
 8000a1c:	2300      	movne	r3, #0
 8000a1e:	eba6 0807 	sub.w	r8, r6, r7
 8000a22:	608b      	str	r3, [r1, #8]
 8000a24:	f1b8 0f00 	cmp.w	r8, #0
 8000a28:	dde9      	ble.n	80009fe <__sflush_r+0xae>
 8000a2a:	6a21      	ldr	r1, [r4, #32]
 8000a2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000a2e:	4643      	mov	r3, r8
 8000a30:	463a      	mov	r2, r7
 8000a32:	4628      	mov	r0, r5
 8000a34:	47b0      	blx	r6
 8000a36:	2800      	cmp	r0, #0
 8000a38:	dc08      	bgt.n	8000a4c <__sflush_r+0xfc>
 8000a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a42:	81a3      	strh	r3, [r4, #12]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a4c:	4407      	add	r7, r0
 8000a4e:	eba8 0800 	sub.w	r8, r8, r0
 8000a52:	e7e7      	b.n	8000a24 <__sflush_r+0xd4>
 8000a54:	dfbffffe 	.word	0xdfbffffe

08000a58 <_fflush_r>:
 8000a58:	b538      	push	{r3, r4, r5, lr}
 8000a5a:	690b      	ldr	r3, [r1, #16]
 8000a5c:	4605      	mov	r5, r0
 8000a5e:	460c      	mov	r4, r1
 8000a60:	b913      	cbnz	r3, 8000a68 <_fflush_r+0x10>
 8000a62:	2500      	movs	r5, #0
 8000a64:	4628      	mov	r0, r5
 8000a66:	bd38      	pop	{r3, r4, r5, pc}
 8000a68:	b118      	cbz	r0, 8000a72 <_fflush_r+0x1a>
 8000a6a:	6a03      	ldr	r3, [r0, #32]
 8000a6c:	b90b      	cbnz	r3, 8000a72 <_fflush_r+0x1a>
 8000a6e:	f7ff fe03 	bl	8000678 <__sinit>
 8000a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0f3      	beq.n	8000a62 <_fflush_r+0xa>
 8000a7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000a7c:	07d0      	lsls	r0, r2, #31
 8000a7e:	d404      	bmi.n	8000a8a <_fflush_r+0x32>
 8000a80:	0599      	lsls	r1, r3, #22
 8000a82:	d402      	bmi.n	8000a8a <_fflush_r+0x32>
 8000a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a86:	f7ff febe 	bl	8000806 <__retarget_lock_acquire_recursive>
 8000a8a:	4628      	mov	r0, r5
 8000a8c:	4621      	mov	r1, r4
 8000a8e:	f7ff ff5f 	bl	8000950 <__sflush_r>
 8000a92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000a94:	07da      	lsls	r2, r3, #31
 8000a96:	4605      	mov	r5, r0
 8000a98:	d4e4      	bmi.n	8000a64 <_fflush_r+0xc>
 8000a9a:	89a3      	ldrh	r3, [r4, #12]
 8000a9c:	059b      	lsls	r3, r3, #22
 8000a9e:	d4e1      	bmi.n	8000a64 <_fflush_r+0xc>
 8000aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000aa2:	f7ff feb1 	bl	8000808 <__retarget_lock_release_recursive>
 8000aa6:	e7dd      	b.n	8000a64 <_fflush_r+0xc>

08000aa8 <__malloc_lock>:
 8000aa8:	4801      	ldr	r0, [pc, #4]	@ (8000ab0 <__malloc_lock+0x8>)
 8000aaa:	f7ff beac 	b.w	8000806 <__retarget_lock_acquire_recursive>
 8000aae:	bf00      	nop
 8000ab0:	200001b8 	.word	0x200001b8

08000ab4 <__malloc_unlock>:
 8000ab4:	4801      	ldr	r0, [pc, #4]	@ (8000abc <__malloc_unlock+0x8>)
 8000ab6:	f7ff bea7 	b.w	8000808 <__retarget_lock_release_recursive>
 8000aba:	bf00      	nop
 8000abc:	200001b8 	.word	0x200001b8

08000ac0 <__sread>:
 8000ac0:	b510      	push	{r4, lr}
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ac8:	f000 f978 	bl	8000dbc <_read_r>
 8000acc:	2800      	cmp	r0, #0
 8000ace:	bfab      	itete	ge
 8000ad0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000ad2:	89a3      	ldrhlt	r3, [r4, #12]
 8000ad4:	181b      	addge	r3, r3, r0
 8000ad6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000ada:	bfac      	ite	ge
 8000adc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000ade:	81a3      	strhlt	r3, [r4, #12]
 8000ae0:	bd10      	pop	{r4, pc}

08000ae2 <__swrite>:
 8000ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ae6:	461f      	mov	r7, r3
 8000ae8:	898b      	ldrh	r3, [r1, #12]
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	4605      	mov	r5, r0
 8000aee:	460c      	mov	r4, r1
 8000af0:	4616      	mov	r6, r2
 8000af2:	d505      	bpl.n	8000b00 <__swrite+0x1e>
 8000af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000af8:	2302      	movs	r3, #2
 8000afa:	2200      	movs	r2, #0
 8000afc:	f000 f94c 	bl	8000d98 <_lseek_r>
 8000b00:	89a3      	ldrh	r3, [r4, #12]
 8000b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b0a:	81a3      	strh	r3, [r4, #12]
 8000b0c:	4632      	mov	r2, r6
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4628      	mov	r0, r5
 8000b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000b16:	f000 b973 	b.w	8000e00 <_write_r>

08000b1a <__sseek>:
 8000b1a:	b510      	push	{r4, lr}
 8000b1c:	460c      	mov	r4, r1
 8000b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b22:	f000 f939 	bl	8000d98 <_lseek_r>
 8000b26:	1c43      	adds	r3, r0, #1
 8000b28:	89a3      	ldrh	r3, [r4, #12]
 8000b2a:	bf15      	itete	ne
 8000b2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000b2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000b32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000b36:	81a3      	strheq	r3, [r4, #12]
 8000b38:	bf18      	it	ne
 8000b3a:	81a3      	strhne	r3, [r4, #12]
 8000b3c:	bd10      	pop	{r4, pc}

08000b3e <__sclose>:
 8000b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b42:	f000 b8f7 	b.w	8000d34 <_close_r>

08000b46 <__swbuf_r>:
 8000b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b48:	460e      	mov	r6, r1
 8000b4a:	4614      	mov	r4, r2
 8000b4c:	4605      	mov	r5, r0
 8000b4e:	b118      	cbz	r0, 8000b58 <__swbuf_r+0x12>
 8000b50:	6a03      	ldr	r3, [r0, #32]
 8000b52:	b90b      	cbnz	r3, 8000b58 <__swbuf_r+0x12>
 8000b54:	f7ff fd90 	bl	8000678 <__sinit>
 8000b58:	69a3      	ldr	r3, [r4, #24]
 8000b5a:	60a3      	str	r3, [r4, #8]
 8000b5c:	89a3      	ldrh	r3, [r4, #12]
 8000b5e:	071a      	lsls	r2, r3, #28
 8000b60:	d501      	bpl.n	8000b66 <__swbuf_r+0x20>
 8000b62:	6923      	ldr	r3, [r4, #16]
 8000b64:	b943      	cbnz	r3, 8000b78 <__swbuf_r+0x32>
 8000b66:	4621      	mov	r1, r4
 8000b68:	4628      	mov	r0, r5
 8000b6a:	f000 f82b 	bl	8000bc4 <__swsetup_r>
 8000b6e:	b118      	cbz	r0, 8000b78 <__swbuf_r+0x32>
 8000b70:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000b74:	4638      	mov	r0, r7
 8000b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	6922      	ldr	r2, [r4, #16]
 8000b7c:	1a98      	subs	r0, r3, r2
 8000b7e:	6963      	ldr	r3, [r4, #20]
 8000b80:	b2f6      	uxtb	r6, r6
 8000b82:	4283      	cmp	r3, r0
 8000b84:	4637      	mov	r7, r6
 8000b86:	dc05      	bgt.n	8000b94 <__swbuf_r+0x4e>
 8000b88:	4621      	mov	r1, r4
 8000b8a:	4628      	mov	r0, r5
 8000b8c:	f7ff ff64 	bl	8000a58 <_fflush_r>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d1ed      	bne.n	8000b70 <__swbuf_r+0x2a>
 8000b94:	68a3      	ldr	r3, [r4, #8]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	60a3      	str	r3, [r4, #8]
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	6022      	str	r2, [r4, #0]
 8000ba0:	701e      	strb	r6, [r3, #0]
 8000ba2:	6962      	ldr	r2, [r4, #20]
 8000ba4:	1c43      	adds	r3, r0, #1
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__swbuf_r+0x6e>
 8000baa:	89a3      	ldrh	r3, [r4, #12]
 8000bac:	07db      	lsls	r3, r3, #31
 8000bae:	d5e1      	bpl.n	8000b74 <__swbuf_r+0x2e>
 8000bb0:	2e0a      	cmp	r6, #10
 8000bb2:	d1df      	bne.n	8000b74 <__swbuf_r+0x2e>
 8000bb4:	4621      	mov	r1, r4
 8000bb6:	4628      	mov	r0, r5
 8000bb8:	f7ff ff4e 	bl	8000a58 <_fflush_r>
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	d0d9      	beq.n	8000b74 <__swbuf_r+0x2e>
 8000bc0:	e7d6      	b.n	8000b70 <__swbuf_r+0x2a>
	...

08000bc4 <__swsetup_r>:
 8000bc4:	b538      	push	{r3, r4, r5, lr}
 8000bc6:	4b29      	ldr	r3, [pc, #164]	@ (8000c6c <__swsetup_r+0xa8>)
 8000bc8:	4605      	mov	r5, r0
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	460c      	mov	r4, r1
 8000bce:	b118      	cbz	r0, 8000bd8 <__swsetup_r+0x14>
 8000bd0:	6a03      	ldr	r3, [r0, #32]
 8000bd2:	b90b      	cbnz	r3, 8000bd8 <__swsetup_r+0x14>
 8000bd4:	f7ff fd50 	bl	8000678 <__sinit>
 8000bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bdc:	0719      	lsls	r1, r3, #28
 8000bde:	d422      	bmi.n	8000c26 <__swsetup_r+0x62>
 8000be0:	06da      	lsls	r2, r3, #27
 8000be2:	d407      	bmi.n	8000bf4 <__swsetup_r+0x30>
 8000be4:	2209      	movs	r2, #9
 8000be6:	602a      	str	r2, [r5, #0]
 8000be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bec:	81a3      	strh	r3, [r4, #12]
 8000bee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf2:	e033      	b.n	8000c5c <__swsetup_r+0x98>
 8000bf4:	0758      	lsls	r0, r3, #29
 8000bf6:	d512      	bpl.n	8000c1e <__swsetup_r+0x5a>
 8000bf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000bfa:	b141      	cbz	r1, 8000c0e <__swsetup_r+0x4a>
 8000bfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d002      	beq.n	8000c0a <__swsetup_r+0x46>
 8000c04:	4628      	mov	r0, r5
 8000c06:	f000 f90d 	bl	8000e24 <_free_r>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c0e:	89a3      	ldrh	r3, [r4, #12]
 8000c10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000c14:	81a3      	strh	r3, [r4, #12]
 8000c16:	2300      	movs	r3, #0
 8000c18:	6063      	str	r3, [r4, #4]
 8000c1a:	6923      	ldr	r3, [r4, #16]
 8000c1c:	6023      	str	r3, [r4, #0]
 8000c1e:	89a3      	ldrh	r3, [r4, #12]
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	81a3      	strh	r3, [r4, #12]
 8000c26:	6923      	ldr	r3, [r4, #16]
 8000c28:	b94b      	cbnz	r3, 8000c3e <__swsetup_r+0x7a>
 8000c2a:	89a3      	ldrh	r3, [r4, #12]
 8000c2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c34:	d003      	beq.n	8000c3e <__swsetup_r+0x7a>
 8000c36:	4621      	mov	r1, r4
 8000c38:	4628      	mov	r0, r5
 8000c3a:	f000 f83f 	bl	8000cbc <__smakebuf_r>
 8000c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c42:	f013 0201 	ands.w	r2, r3, #1
 8000c46:	d00a      	beq.n	8000c5e <__swsetup_r+0x9a>
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60a2      	str	r2, [r4, #8]
 8000c4c:	6962      	ldr	r2, [r4, #20]
 8000c4e:	4252      	negs	r2, r2
 8000c50:	61a2      	str	r2, [r4, #24]
 8000c52:	6922      	ldr	r2, [r4, #16]
 8000c54:	b942      	cbnz	r2, 8000c68 <__swsetup_r+0xa4>
 8000c56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000c5a:	d1c5      	bne.n	8000be8 <__swsetup_r+0x24>
 8000c5c:	bd38      	pop	{r3, r4, r5, pc}
 8000c5e:	0799      	lsls	r1, r3, #30
 8000c60:	bf58      	it	pl
 8000c62:	6962      	ldrpl	r2, [r4, #20]
 8000c64:	60a2      	str	r2, [r4, #8]
 8000c66:	e7f4      	b.n	8000c52 <__swsetup_r+0x8e>
 8000c68:	2000      	movs	r0, #0
 8000c6a:	e7f7      	b.n	8000c5c <__swsetup_r+0x98>
 8000c6c:	2000000c 	.word	0x2000000c

08000c70 <__swhatbuf_r>:
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	460c      	mov	r4, r1
 8000c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	b096      	sub	sp, #88	@ 0x58
 8000c7c:	4615      	mov	r5, r2
 8000c7e:	461e      	mov	r6, r3
 8000c80:	da0d      	bge.n	8000c9e <__swhatbuf_r+0x2e>
 8000c82:	89a3      	ldrh	r3, [r4, #12]
 8000c84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000c88:	f04f 0100 	mov.w	r1, #0
 8000c8c:	bf14      	ite	ne
 8000c8e:	2340      	movne	r3, #64	@ 0x40
 8000c90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000c94:	2000      	movs	r0, #0
 8000c96:	6031      	str	r1, [r6, #0]
 8000c98:	602b      	str	r3, [r5, #0]
 8000c9a:	b016      	add	sp, #88	@ 0x58
 8000c9c:	bd70      	pop	{r4, r5, r6, pc}
 8000c9e:	466a      	mov	r2, sp
 8000ca0:	f000 f858 	bl	8000d54 <_fstat_r>
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	dbec      	blt.n	8000c82 <__swhatbuf_r+0x12>
 8000ca8:	9901      	ldr	r1, [sp, #4]
 8000caa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000cae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000cb2:	4259      	negs	r1, r3
 8000cb4:	4159      	adcs	r1, r3
 8000cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cba:	e7eb      	b.n	8000c94 <__swhatbuf_r+0x24>

08000cbc <__smakebuf_r>:
 8000cbc:	898b      	ldrh	r3, [r1, #12]
 8000cbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000cc0:	079d      	lsls	r5, r3, #30
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460c      	mov	r4, r1
 8000cc6:	d507      	bpl.n	8000cd8 <__smakebuf_r+0x1c>
 8000cc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000ccc:	6023      	str	r3, [r4, #0]
 8000cce:	6123      	str	r3, [r4, #16]
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	6163      	str	r3, [r4, #20]
 8000cd4:	b003      	add	sp, #12
 8000cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd8:	ab01      	add	r3, sp, #4
 8000cda:	466a      	mov	r2, sp
 8000cdc:	f7ff ffc8 	bl	8000c70 <__swhatbuf_r>
 8000ce0:	9f00      	ldr	r7, [sp, #0]
 8000ce2:	4605      	mov	r5, r0
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	f7ff fdb2 	bl	8000850 <_malloc_r>
 8000cec:	b948      	cbnz	r0, 8000d02 <__smakebuf_r+0x46>
 8000cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cf2:	059a      	lsls	r2, r3, #22
 8000cf4:	d4ee      	bmi.n	8000cd4 <__smakebuf_r+0x18>
 8000cf6:	f023 0303 	bic.w	r3, r3, #3
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	81a3      	strh	r3, [r4, #12]
 8000d00:	e7e2      	b.n	8000cc8 <__smakebuf_r+0xc>
 8000d02:	89a3      	ldrh	r3, [r4, #12]
 8000d04:	6020      	str	r0, [r4, #0]
 8000d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d0a:	81a3      	strh	r3, [r4, #12]
 8000d0c:	9b01      	ldr	r3, [sp, #4]
 8000d0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000d12:	b15b      	cbz	r3, 8000d2c <__smakebuf_r+0x70>
 8000d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d18:	4630      	mov	r0, r6
 8000d1a:	f000 f82d 	bl	8000d78 <_isatty_r>
 8000d1e:	b128      	cbz	r0, 8000d2c <__smakebuf_r+0x70>
 8000d20:	89a3      	ldrh	r3, [r4, #12]
 8000d22:	f023 0303 	bic.w	r3, r3, #3
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	81a3      	strh	r3, [r4, #12]
 8000d2c:	89a3      	ldrh	r3, [r4, #12]
 8000d2e:	431d      	orrs	r5, r3
 8000d30:	81a5      	strh	r5, [r4, #12]
 8000d32:	e7cf      	b.n	8000cd4 <__smakebuf_r+0x18>

08000d34 <_close_r>:
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	4d06      	ldr	r5, [pc, #24]	@ (8000d50 <_close_r+0x1c>)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	602b      	str	r3, [r5, #0]
 8000d40:	f7ff fb79 	bl	8000436 <_close>
 8000d44:	1c43      	adds	r3, r0, #1
 8000d46:	d102      	bne.n	8000d4e <_close_r+0x1a>
 8000d48:	682b      	ldr	r3, [r5, #0]
 8000d4a:	b103      	cbz	r3, 8000d4e <_close_r+0x1a>
 8000d4c:	6023      	str	r3, [r4, #0]
 8000d4e:	bd38      	pop	{r3, r4, r5, pc}
 8000d50:	200001c4 	.word	0x200001c4

08000d54 <_fstat_r>:
 8000d54:	b538      	push	{r3, r4, r5, lr}
 8000d56:	4d07      	ldr	r5, [pc, #28]	@ (8000d74 <_fstat_r+0x20>)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	4611      	mov	r1, r2
 8000d60:	602b      	str	r3, [r5, #0]
 8000d62:	f7ff fb74 	bl	800044e <_fstat>
 8000d66:	1c43      	adds	r3, r0, #1
 8000d68:	d102      	bne.n	8000d70 <_fstat_r+0x1c>
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	b103      	cbz	r3, 8000d70 <_fstat_r+0x1c>
 8000d6e:	6023      	str	r3, [r4, #0]
 8000d70:	bd38      	pop	{r3, r4, r5, pc}
 8000d72:	bf00      	nop
 8000d74:	200001c4 	.word	0x200001c4

08000d78 <_isatty_r>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	4d06      	ldr	r5, [pc, #24]	@ (8000d94 <_isatty_r+0x1c>)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4608      	mov	r0, r1
 8000d82:	602b      	str	r3, [r5, #0]
 8000d84:	f7ff fb73 	bl	800046e <_isatty>
 8000d88:	1c43      	adds	r3, r0, #1
 8000d8a:	d102      	bne.n	8000d92 <_isatty_r+0x1a>
 8000d8c:	682b      	ldr	r3, [r5, #0]
 8000d8e:	b103      	cbz	r3, 8000d92 <_isatty_r+0x1a>
 8000d90:	6023      	str	r3, [r4, #0]
 8000d92:	bd38      	pop	{r3, r4, r5, pc}
 8000d94:	200001c4 	.word	0x200001c4

08000d98 <_lseek_r>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	4d07      	ldr	r5, [pc, #28]	@ (8000db8 <_lseek_r+0x20>)
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	4611      	mov	r1, r2
 8000da2:	2200      	movs	r2, #0
 8000da4:	602a      	str	r2, [r5, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	f7ff fb6c 	bl	8000484 <_lseek>
 8000dac:	1c43      	adds	r3, r0, #1
 8000dae:	d102      	bne.n	8000db6 <_lseek_r+0x1e>
 8000db0:	682b      	ldr	r3, [r5, #0]
 8000db2:	b103      	cbz	r3, 8000db6 <_lseek_r+0x1e>
 8000db4:	6023      	str	r3, [r4, #0]
 8000db6:	bd38      	pop	{r3, r4, r5, pc}
 8000db8:	200001c4 	.word	0x200001c4

08000dbc <_read_r>:
 8000dbc:	b538      	push	{r3, r4, r5, lr}
 8000dbe:	4d07      	ldr	r5, [pc, #28]	@ (8000ddc <_read_r+0x20>)
 8000dc0:	4604      	mov	r4, r0
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	602a      	str	r2, [r5, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	f7ff fafa 	bl	80003c4 <_read>
 8000dd0:	1c43      	adds	r3, r0, #1
 8000dd2:	d102      	bne.n	8000dda <_read_r+0x1e>
 8000dd4:	682b      	ldr	r3, [r5, #0]
 8000dd6:	b103      	cbz	r3, 8000dda <_read_r+0x1e>
 8000dd8:	6023      	str	r3, [r4, #0]
 8000dda:	bd38      	pop	{r3, r4, r5, pc}
 8000ddc:	200001c4 	.word	0x200001c4

08000de0 <_sbrk_r>:
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	4d06      	ldr	r5, [pc, #24]	@ (8000dfc <_sbrk_r+0x1c>)
 8000de4:	2300      	movs	r3, #0
 8000de6:	4604      	mov	r4, r0
 8000de8:	4608      	mov	r0, r1
 8000dea:	602b      	str	r3, [r5, #0]
 8000dec:	f7ff fb58 	bl	80004a0 <_sbrk>
 8000df0:	1c43      	adds	r3, r0, #1
 8000df2:	d102      	bne.n	8000dfa <_sbrk_r+0x1a>
 8000df4:	682b      	ldr	r3, [r5, #0]
 8000df6:	b103      	cbz	r3, 8000dfa <_sbrk_r+0x1a>
 8000df8:	6023      	str	r3, [r4, #0]
 8000dfa:	bd38      	pop	{r3, r4, r5, pc}
 8000dfc:	200001c4 	.word	0x200001c4

08000e00 <_write_r>:
 8000e00:	b538      	push	{r3, r4, r5, lr}
 8000e02:	4d07      	ldr	r5, [pc, #28]	@ (8000e20 <_write_r+0x20>)
 8000e04:	4604      	mov	r4, r0
 8000e06:	4608      	mov	r0, r1
 8000e08:	4611      	mov	r1, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	602a      	str	r2, [r5, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	f7ff faf5 	bl	80003fe <_write>
 8000e14:	1c43      	adds	r3, r0, #1
 8000e16:	d102      	bne.n	8000e1e <_write_r+0x1e>
 8000e18:	682b      	ldr	r3, [r5, #0]
 8000e1a:	b103      	cbz	r3, 8000e1e <_write_r+0x1e>
 8000e1c:	6023      	str	r3, [r4, #0]
 8000e1e:	bd38      	pop	{r3, r4, r5, pc}
 8000e20:	200001c4 	.word	0x200001c4

08000e24 <_free_r>:
 8000e24:	b538      	push	{r3, r4, r5, lr}
 8000e26:	4605      	mov	r5, r0
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	d041      	beq.n	8000eb0 <_free_r+0x8c>
 8000e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e30:	1f0c      	subs	r4, r1, #4
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	bfb8      	it	lt
 8000e36:	18e4      	addlt	r4, r4, r3
 8000e38:	f7ff fe36 	bl	8000aa8 <__malloc_lock>
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb4 <_free_r+0x90>)
 8000e3e:	6813      	ldr	r3, [r2, #0]
 8000e40:	b933      	cbnz	r3, 8000e50 <_free_r+0x2c>
 8000e42:	6063      	str	r3, [r4, #4]
 8000e44:	6014      	str	r4, [r2, #0]
 8000e46:	4628      	mov	r0, r5
 8000e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e4c:	f7ff be32 	b.w	8000ab4 <__malloc_unlock>
 8000e50:	42a3      	cmp	r3, r4
 8000e52:	d908      	bls.n	8000e66 <_free_r+0x42>
 8000e54:	6820      	ldr	r0, [r4, #0]
 8000e56:	1821      	adds	r1, r4, r0
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf01      	itttt	eq
 8000e5c:	6819      	ldreq	r1, [r3, #0]
 8000e5e:	685b      	ldreq	r3, [r3, #4]
 8000e60:	1809      	addeq	r1, r1, r0
 8000e62:	6021      	streq	r1, [r4, #0]
 8000e64:	e7ed      	b.n	8000e42 <_free_r+0x1e>
 8000e66:	461a      	mov	r2, r3
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	b10b      	cbz	r3, 8000e70 <_free_r+0x4c>
 8000e6c:	42a3      	cmp	r3, r4
 8000e6e:	d9fa      	bls.n	8000e66 <_free_r+0x42>
 8000e70:	6811      	ldr	r1, [r2, #0]
 8000e72:	1850      	adds	r0, r2, r1
 8000e74:	42a0      	cmp	r0, r4
 8000e76:	d10b      	bne.n	8000e90 <_free_r+0x6c>
 8000e78:	6820      	ldr	r0, [r4, #0]
 8000e7a:	4401      	add	r1, r0
 8000e7c:	1850      	adds	r0, r2, r1
 8000e7e:	4283      	cmp	r3, r0
 8000e80:	6011      	str	r1, [r2, #0]
 8000e82:	d1e0      	bne.n	8000e46 <_free_r+0x22>
 8000e84:	6818      	ldr	r0, [r3, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	6053      	str	r3, [r2, #4]
 8000e8a:	4408      	add	r0, r1
 8000e8c:	6010      	str	r0, [r2, #0]
 8000e8e:	e7da      	b.n	8000e46 <_free_r+0x22>
 8000e90:	d902      	bls.n	8000e98 <_free_r+0x74>
 8000e92:	230c      	movs	r3, #12
 8000e94:	602b      	str	r3, [r5, #0]
 8000e96:	e7d6      	b.n	8000e46 <_free_r+0x22>
 8000e98:	6820      	ldr	r0, [r4, #0]
 8000e9a:	1821      	adds	r1, r4, r0
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	bf04      	itt	eq
 8000ea0:	6819      	ldreq	r1, [r3, #0]
 8000ea2:	685b      	ldreq	r3, [r3, #4]
 8000ea4:	6063      	str	r3, [r4, #4]
 8000ea6:	bf04      	itt	eq
 8000ea8:	1809      	addeq	r1, r1, r0
 8000eaa:	6021      	streq	r1, [r4, #0]
 8000eac:	6054      	str	r4, [r2, #4]
 8000eae:	e7ca      	b.n	8000e46 <_free_r+0x22>
 8000eb0:	bd38      	pop	{r3, r4, r5, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200001c0 	.word	0x200001c0

08000eb8 <_init>:
 8000eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eba:	bf00      	nop
 8000ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ebe:	bc08      	pop	{r3}
 8000ec0:	469e      	mov	lr, r3
 8000ec2:	4770      	bx	lr

08000ec4 <_fini>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	bf00      	nop
 8000ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eca:	bc08      	pop	{r3}
 8000ecc:	469e      	mov	lr, r3
 8000ece:	4770      	bx	lr
