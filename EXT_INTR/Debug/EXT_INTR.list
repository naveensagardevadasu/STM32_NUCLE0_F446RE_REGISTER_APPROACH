
EXT_INTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000344  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000508  08000510  00001510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000508  08000508  00001510  2**0
                  CONTENTS
  4 .ARM          00000000  08000508  08000508  00001510  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000508  08000510  00001510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000508  08000508  00001508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800050c  0800050c  0000150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000510  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000510  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f52  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000333  00000000  00000000  00002492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  000027c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000071  00000000  00000000  00002870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b25  00000000  00000000  000028e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c46  00000000  00000000  0001b406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b39d  00000000  00000000  0001c04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a73e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001a0  00000000  00000000  000a742c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  000a75cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004f0 	.word	0x080004f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080004f0 	.word	0x080004f0

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	@ (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <SysTick_Init>:
#define EXTI_C13    (2 << 4)

volatile uint32_t ms_counter = 0;
volatile uint32_t millis = 0;

void SysTick_Init(){
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
    SysTick->VAL = 0;
 8000244:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <SysTick_Init+0x20>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
    SysTick->LOAD = (HCLK_FREQ / 1000)- 1;
 800024a:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <SysTick_Init+0x20>)
 800024c:	4a05      	ldr	r2, [pc, #20]	@ (8000264 <SysTick_Init+0x24>)
 800024e:	605a      	str	r2, [r3, #4]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000250:	4b03      	ldr	r3, [pc, #12]	@ (8000260 <SysTick_Init+0x20>)
 8000252:	2207      	movs	r2, #7
 8000254:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_TICKINT_Msk |
                    SysTick_CTRL_ENABLE_Msk;
}
 8000256:	bf00      	nop
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	e000e010 	.word	0xe000e010
 8000264:	0002bf1f 	.word	0x0002bf1f

08000268 <SysTick_Handler>:

void SysTick_Handler(){
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
    if (ms_counter) ms_counter--;
 800026c:	4b09      	ldr	r3, [pc, #36]	@ (8000294 <SysTick_Handler+0x2c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d004      	beq.n	800027e <SysTick_Handler+0x16>
 8000274:	4b07      	ldr	r3, [pc, #28]	@ (8000294 <SysTick_Handler+0x2c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	3b01      	subs	r3, #1
 800027a:	4a06      	ldr	r2, [pc, #24]	@ (8000294 <SysTick_Handler+0x2c>)
 800027c:	6013      	str	r3, [r2, #0]
    millis++;
 800027e:	4b06      	ldr	r3, [pc, #24]	@ (8000298 <SysTick_Handler+0x30>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	3301      	adds	r3, #1
 8000284:	4a04      	ldr	r2, [pc, #16]	@ (8000298 <SysTick_Handler+0x30>)
 8000286:	6013      	str	r3, [r2, #0]
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	2000001c 	.word	0x2000001c
 8000298:	20000020 	.word	0x20000020

0800029c <clockSpeed_PLL>:

uint32_t getMillis(){
    return millis;
}

void clockSpeed_PLL(){
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0

    RCC->CR |= RCC_CR_HSION;
 80002a0:	4b32      	ldr	r3, [pc, #200]	@ (800036c <clockSpeed_PLL+0xd0>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a31      	ldr	r2, [pc, #196]	@ (800036c <clockSpeed_PLL+0xd0>)
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));
 80002ac:	bf00      	nop
 80002ae:	4b2f      	ldr	r3, [pc, #188]	@ (800036c <clockSpeed_PLL+0xd0>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f003 0302 	and.w	r3, r3, #2
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0f9      	beq.n	80002ae <clockSpeed_PLL+0x12>

    RCC->PLLCFGR = (PLL_M) | (PLL_N << 6) | (PLL_P << 16) | (PLL_Q << 24);
 80002ba:	4b2c      	ldr	r3, [pc, #176]	@ (800036c <clockSpeed_PLL+0xd0>)
 80002bc:	4a2c      	ldr	r2, [pc, #176]	@ (8000370 <clockSpeed_PLL+0xd4>)
 80002be:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR &=~ RCC_PLLCFGR_PLLSRC;
 80002c0:	4b2a      	ldr	r3, [pc, #168]	@ (800036c <clockSpeed_PLL+0xd0>)
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	4a29      	ldr	r2, [pc, #164]	@ (800036c <clockSpeed_PLL+0xd0>)
 80002c6:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80002ca:	6053      	str	r3, [r2, #4]

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE2_DIV2 | RCC_CFGR_PPRE1_DIV4;
 80002cc:	4b27      	ldr	r3, [pc, #156]	@ (800036c <clockSpeed_PLL+0xd0>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	4a26      	ldr	r2, [pc, #152]	@ (800036c <clockSpeed_PLL+0xd0>)
 80002d2:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 80002d6:	6093      	str	r3, [r2, #8]

    RCC->CR |= RCC_CR_PLLON;
 80002d8:	4b24      	ldr	r3, [pc, #144]	@ (800036c <clockSpeed_PLL+0xd0>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a23      	ldr	r2, [pc, #140]	@ (800036c <clockSpeed_PLL+0xd0>)
 80002de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002e2:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 80002e4:	bf00      	nop
 80002e6:	4b21      	ldr	r3, [pc, #132]	@ (800036c <clockSpeed_PLL+0xd0>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0f9      	beq.n	80002e6 <clockSpeed_PLL+0x4a>

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002f2:	4b1e      	ldr	r3, [pc, #120]	@ (800036c <clockSpeed_PLL+0xd0>)
 80002f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002f6:	4a1d      	ldr	r2, [pc, #116]	@ (800036c <clockSpeed_PLL+0xd0>)
 80002f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002fc:	6413      	str	r3, [r2, #64]	@ 0x40

    PWR->CR |= PWR_CR_ODEN;
 80002fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000374 <clockSpeed_PLL+0xd8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a1c      	ldr	r2, [pc, #112]	@ (8000374 <clockSpeed_PLL+0xd8>)
 8000304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000308:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR & PWR_CSR_ODRDY)) ;
 800030a:	bf00      	nop
 800030c:	4b19      	ldr	r3, [pc, #100]	@ (8000374 <clockSpeed_PLL+0xd8>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f9      	beq.n	800030c <clockSpeed_PLL+0x70>

    PWR->CR |= PWR_CR_ODSWEN;
 8000318:	4b16      	ldr	r3, [pc, #88]	@ (8000374 <clockSpeed_PLL+0xd8>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a15      	ldr	r2, [pc, #84]	@ (8000374 <clockSpeed_PLL+0xd8>)
 800031e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000322:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR & PWR_CSR_ODSWRDY)) ;
 8000324:	bf00      	nop
 8000326:	4b13      	ldr	r3, [pc, #76]	@ (8000374 <clockSpeed_PLL+0xd8>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0f9      	beq.n	8000326 <clockSpeed_PLL+0x8a>

    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8000332:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <clockSpeed_PLL+0xdc>)
 8000334:	f240 7205 	movw	r2, #1797	@ 0x705
 8000338:	601a      	str	r2, [r3, #0]

    RCC->CFGR &=~ RCC_CFGR_SW;
 800033a:	4b0c      	ldr	r3, [pc, #48]	@ (800036c <clockSpeed_PLL+0xd0>)
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	4a0b      	ldr	r2, [pc, #44]	@ (800036c <clockSpeed_PLL+0xd0>)
 8000340:	f023 0303 	bic.w	r3, r3, #3
 8000344:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000346:	4b09      	ldr	r3, [pc, #36]	@ (800036c <clockSpeed_PLL+0xd0>)
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	4a08      	ldr	r2, [pc, #32]	@ (800036c <clockSpeed_PLL+0xd0>)
 800034c:	f043 0302 	orr.w	r3, r3, #2
 8000350:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000352:	bf00      	nop
 8000354:	4b05      	ldr	r3, [pc, #20]	@ (800036c <clockSpeed_PLL+0xd0>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	f003 030c 	and.w	r3, r3, #12
 800035c:	2b08      	cmp	r3, #8
 800035e:	d1f9      	bne.n	8000354 <clockSpeed_PLL+0xb8>

}
 8000360:	bf00      	nop
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40023800 	.word	0x40023800
 8000370:	02002d08 	.word	0x02002d08
 8000374:	40007000 	.word	0x40007000
 8000378:	40023c00 	.word	0x40023c00

0800037c <main>:
int main(){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0

    clockSpeed_PLL();
 8000380:	f7ff ff8c 	bl	800029c <clockSpeed_PLL>
    SysTick_Init();
 8000384:	f7ff ff5c 	bl	8000240 <SysTick_Init>

    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8000388:	4b16      	ldr	r3, [pc, #88]	@ (80003e4 <main+0x68>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038c:	4a15      	ldr	r2, [pc, #84]	@ (80003e4 <main+0x68>)
 800038e:	f043 0305 	orr.w	r3, r3, #5
 8000392:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000394:	4b13      	ldr	r3, [pc, #76]	@ (80003e4 <main+0x68>)
 8000396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000398:	4a12      	ldr	r2, [pc, #72]	@ (80003e4 <main+0x68>)
 800039a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800039e:	6453      	str	r3, [r2, #68]	@ 0x44

    GPIOA->MODER |= PA5_OUTPUT;
 80003a0:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <main+0x6c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a10      	ldr	r2, [pc, #64]	@ (80003e8 <main+0x6c>)
 80003a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003aa:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ac:	b672      	cpsid	i
}
 80003ae:	bf00      	nop

    __disable_irq();

    SYSCFG->EXTICR[3] |= EXTI_C13;
 80003b0:	4b0e      	ldr	r3, [pc, #56]	@ (80003ec <main+0x70>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	4a0d      	ldr	r2, [pc, #52]	@ (80003ec <main+0x70>)
 80003b6:	f043 0320 	orr.w	r3, r3, #32
 80003ba:	6153      	str	r3, [r2, #20]
    EXTI->IMR |= BUTTON_PIN;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <main+0x74>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a0b      	ldr	r2, [pc, #44]	@ (80003f0 <main+0x74>)
 80003c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003c6:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= BUTTON_PIN;
 80003c8:	4b09      	ldr	r3, [pc, #36]	@ (80003f0 <main+0x74>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	4a08      	ldr	r2, [pc, #32]	@ (80003f0 <main+0x74>)
 80003ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003d2:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003d4:	2028      	movs	r0, #40	@ 0x28
 80003d6:	f7ff ff15 	bl	8000204 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003da:	b662      	cpsie	i
}
 80003dc:	bf00      	nop

    __enable_irq();

    while(1){
 80003de:	bf00      	nop
 80003e0:	e7fd      	b.n	80003de <main+0x62>
 80003e2:	bf00      	nop
 80003e4:	40023800 	.word	0x40023800
 80003e8:	40020000 	.word	0x40020000
 80003ec:	40013800 	.word	0x40013800
 80003f0:	40013c00 	.word	0x40013c00

080003f4 <EXTI15_10_IRQHandler>:

    }
}

void EXTI15_10_IRQHandler(void){
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
    if(EXTI->PR & BUTTON_PIN){
 80003f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000428 <EXTI15_10_IRQHandler+0x34>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000400:	2b00      	cmp	r3, #0
 8000402:	d00b      	beq.n	800041c <EXTI15_10_IRQHandler+0x28>
        EXTI->PR |= BUTTON_PIN;
 8000404:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <EXTI15_10_IRQHandler+0x34>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	4a07      	ldr	r2, [pc, #28]	@ (8000428 <EXTI15_10_IRQHandler+0x34>)
 800040a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800040e:	6153      	str	r3, [r2, #20]
        GPIOA->ODR ^= LED_PIN;
 8000410:	4b06      	ldr	r3, [pc, #24]	@ (800042c <EXTI15_10_IRQHandler+0x38>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	4a05      	ldr	r2, [pc, #20]	@ (800042c <EXTI15_10_IRQHandler+0x38>)
 8000416:	f083 0320 	eor.w	r3, r3, #32
 800041a:	6153      	str	r3, [r2, #20]
    }
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40013c00 	.word	0x40013c00
 800042c:	40020000 	.word	0x40020000

08000430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000434:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <SystemInit+0x20>)
 8000436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800043a:	4a05      	ldr	r2, [pc, #20]	@ (8000450 <SystemInit+0x20>)
 800043c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	e000ed00 	.word	0xe000ed00

08000454 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000454:	480d      	ldr	r0, [pc, #52]	@ (800048c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000456:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000458:	f7ff ffea 	bl	8000430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800045c:	480c      	ldr	r0, [pc, #48]	@ (8000490 <LoopForever+0x6>)
  ldr r1, =_edata
 800045e:	490d      	ldr	r1, [pc, #52]	@ (8000494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000460:	4a0d      	ldr	r2, [pc, #52]	@ (8000498 <LoopForever+0xe>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000464:	e002      	b.n	800046c <LoopCopyDataInit>

08000466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046a:	3304      	adds	r3, #4

0800046c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800046c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000470:	d3f9      	bcc.n	8000466 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000472:	4a0a      	ldr	r2, [pc, #40]	@ (800049c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000474:	4c0a      	ldr	r4, [pc, #40]	@ (80004a0 <LoopForever+0x16>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000478:	e001      	b.n	800047e <LoopFillZerobss>

0800047a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800047c:	3204      	adds	r2, #4

0800047e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000480:	d3fb      	bcc.n	800047a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000482:	f000 f811 	bl	80004a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000486:	f7ff ff79 	bl	800037c <main>

0800048a <LoopForever>:

LoopForever:
  b LoopForever
 800048a:	e7fe      	b.n	800048a <LoopForever>
  ldr   r0, =_estack
 800048c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000494:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000498:	08000510 	.word	0x08000510
  ldr r2, =_sbss
 800049c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004a0:	20000024 	.word	0x20000024

080004a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC_IRQHandler>
	...

080004a8 <__libc_init_array>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	4d0d      	ldr	r5, [pc, #52]	@ (80004e0 <__libc_init_array+0x38>)
 80004ac:	4c0d      	ldr	r4, [pc, #52]	@ (80004e4 <__libc_init_array+0x3c>)
 80004ae:	1b64      	subs	r4, r4, r5
 80004b0:	10a4      	asrs	r4, r4, #2
 80004b2:	2600      	movs	r6, #0
 80004b4:	42a6      	cmp	r6, r4
 80004b6:	d109      	bne.n	80004cc <__libc_init_array+0x24>
 80004b8:	4d0b      	ldr	r5, [pc, #44]	@ (80004e8 <__libc_init_array+0x40>)
 80004ba:	4c0c      	ldr	r4, [pc, #48]	@ (80004ec <__libc_init_array+0x44>)
 80004bc:	f000 f818 	bl	80004f0 <_init>
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	10a4      	asrs	r4, r4, #2
 80004c4:	2600      	movs	r6, #0
 80004c6:	42a6      	cmp	r6, r4
 80004c8:	d105      	bne.n	80004d6 <__libc_init_array+0x2e>
 80004ca:	bd70      	pop	{r4, r5, r6, pc}
 80004cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d0:	4798      	blx	r3
 80004d2:	3601      	adds	r6, #1
 80004d4:	e7ee      	b.n	80004b4 <__libc_init_array+0xc>
 80004d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004da:	4798      	blx	r3
 80004dc:	3601      	adds	r6, #1
 80004de:	e7f2      	b.n	80004c6 <__libc_init_array+0x1e>
 80004e0:	08000508 	.word	0x08000508
 80004e4:	08000508 	.word	0x08000508
 80004e8:	08000508 	.word	0x08000508
 80004ec:	0800050c 	.word	0x0800050c

080004f0 <_init>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr

080004fc <_fini>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr
