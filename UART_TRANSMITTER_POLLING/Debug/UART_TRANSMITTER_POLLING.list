
UART_TRANSMITTER_POLLING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000584  08000584  00001584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000590  08000590  00001598  2**0
                  CONTENTS
  4 .ARM          00000000  08000590  08000590  00001598  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000590  08000598  00001598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000590  08000590  00001590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000594  08000594  00001594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000598  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000598  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000681  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a8  00000000  00000000  00001c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00001df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005e  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c4fd  00000000  00000000  00001ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000860  00000000  00000000  0000e3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00045263  00000000  00000000  0000ec3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00053e9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000017c  00000000  00000000  00053ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  00054060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800056c 	.word	0x0800056c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800056c 	.word	0x0800056c

08000204 <SysClockConfig>:
#endif



void SysClockConfig (void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	#define PLL_M 	4
	#define PLL_N 	180
	#define PLL_P 	0  // PLLP = 2

	// 1. ENABLE HSE and wait for the HSE to become Ready
	RCC->CR |= RCC_CR_HSEON;
 8000208:	4b27      	ldr	r3, [pc, #156]	@ (80002a8 <SysClockConfig+0xa4>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a26      	ldr	r2, [pc, #152]	@ (80002a8 <SysClockConfig+0xa4>)
 800020e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000212:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 8000214:	bf00      	nop
 8000216:	4b24      	ldr	r3, [pc, #144]	@ (80002a8 <SysClockConfig+0xa4>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800021e:	2b00      	cmp	r3, #0
 8000220:	d0f9      	beq.n	8000216 <SysClockConfig+0x12>

	// 2. Set the POWER ENABLE CLOCK and VOLTAGE REGULATOR
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000222:	4b21      	ldr	r3, [pc, #132]	@ (80002a8 <SysClockConfig+0xa4>)
 8000224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000226:	4a20      	ldr	r2, [pc, #128]	@ (80002a8 <SysClockConfig+0xa4>)
 8000228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800022c:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_VOS;
 800022e:	4b1f      	ldr	r3, [pc, #124]	@ (80002ac <SysClockConfig+0xa8>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a1e      	ldr	r2, [pc, #120]	@ (80002ac <SysClockConfig+0xa8>)
 8000234:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000238:	6013      	str	r3, [r2, #0]


	// 3. Configure the FLASH PREFETCH and the LATENCY Related Settings
	FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 800023a:	4b1d      	ldr	r3, [pc, #116]	@ (80002b0 <SysClockConfig+0xac>)
 800023c:	f240 7205 	movw	r2, #1797	@ 0x705
 8000240:	601a      	str	r2, [r3, #0]

	// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	// AHB PR
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000242:	4b19      	ldr	r3, [pc, #100]	@ (80002a8 <SysClockConfig+0xa4>)
 8000244:	4a18      	ldr	r2, [pc, #96]	@ (80002a8 <SysClockConfig+0xa4>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	6093      	str	r3, [r2, #8]

	// APB1 PR
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800024a:	4b17      	ldr	r3, [pc, #92]	@ (80002a8 <SysClockConfig+0xa4>)
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	4a16      	ldr	r2, [pc, #88]	@ (80002a8 <SysClockConfig+0xa4>)
 8000250:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000254:	6093      	str	r3, [r2, #8]

	// APB2 PR
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000256:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <SysClockConfig+0xa4>)
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	4a13      	ldr	r2, [pc, #76]	@ (80002a8 <SysClockConfig+0xa4>)
 800025c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000260:	6093      	str	r3, [r2, #8]


	// 5. Configure the MAIN PLL
	RCC->PLLCFGR = (PLL_M <<0) | (PLL_N << 6) | (PLL_P <<16) | (RCC_PLLCFGR_PLLSRC_HSE);
 8000262:	4b11      	ldr	r3, [pc, #68]	@ (80002a8 <SysClockConfig+0xa4>)
 8000264:	4a13      	ldr	r2, [pc, #76]	@ (80002b4 <SysClockConfig+0xb0>)
 8000266:	605a      	str	r2, [r3, #4]

	// 6. Enable the PLL and wait for it to become ready
	RCC->CR |= RCC_CR_PLLON;
 8000268:	4b0f      	ldr	r3, [pc, #60]	@ (80002a8 <SysClockConfig+0xa4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a0e      	ldr	r2, [pc, #56]	@ (80002a8 <SysClockConfig+0xa4>)
 800026e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000272:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 8000274:	bf00      	nop
 8000276:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <SysClockConfig+0xa4>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800027e:	2b00      	cmp	r3, #0
 8000280:	d0f9      	beq.n	8000276 <SysClockConfig+0x72>

	// 7. Select the Clock Source and wait for it to be set
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000282:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <SysClockConfig+0xa4>)
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	4a08      	ldr	r2, [pc, #32]	@ (80002a8 <SysClockConfig+0xa4>)
 8000288:	f043 0302 	orr.w	r3, r3, #2
 800028c:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800028e:	bf00      	nop
 8000290:	4b05      	ldr	r3, [pc, #20]	@ (80002a8 <SysClockConfig+0xa4>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	f003 030c 	and.w	r3, r3, #12
 8000298:	2b08      	cmp	r3, #8
 800029a:	d1f9      	bne.n	8000290 <SysClockConfig+0x8c>
}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40007000 	.word	0x40007000
 80002b0:	40023c00 	.word	0x40023c00
 80002b4:	00402d04 	.word	0x00402d04

080002b8 <Uart2Config>:



void Uart2Config (void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	6. Enable the Transmitter/Receiver by Setting the TE and RE bits in USART_CR1 Register

	********************************/

	// 1. Enable the UART CLOCK and GPIO CLOCK
	RCC->APB1ENR |= (1<<17);  // Enable UART2 CLOCK
 80002bc:	4b26      	ldr	r3, [pc, #152]	@ (8000358 <Uart2Config+0xa0>)
 80002be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c0:	4a25      	ldr	r2, [pc, #148]	@ (8000358 <Uart2Config+0xa0>)
 80002c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002c6:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= (1<<0); // Enable GPIOA CLOCK
 80002c8:	4b23      	ldr	r3, [pc, #140]	@ (8000358 <Uart2Config+0xa0>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002cc:	4a22      	ldr	r2, [pc, #136]	@ (8000358 <Uart2Config+0xa0>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	@ 0x30

	// 2. Configure the UART PINs for ALternate Functions
	GPIOA->MODER |= (2<<4);  // Bits (5:4)= 1:0 --> Alternate Function for Pin PA2
 80002d4:	4b21      	ldr	r3, [pc, #132]	@ (800035c <Uart2Config+0xa4>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a20      	ldr	r2, [pc, #128]	@ (800035c <Uart2Config+0xa4>)
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2<<6);  // Bits (7:6)= 1:0 --> Alternate Function for Pin PA3
 80002e0:	4b1e      	ldr	r3, [pc, #120]	@ (800035c <Uart2Config+0xa4>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a1d      	ldr	r2, [pc, #116]	@ (800035c <Uart2Config+0xa4>)
 80002e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002ea:	6013      	str	r3, [r2, #0]

	GPIOA->OSPEEDR |= (3<<4) | (3<<6);  // Bits (5:4)= 1:1 and Bits (7:6)= 1:1 --> High Speed for PIN PA2 and PA3
 80002ec:	4b1b      	ldr	r3, [pc, #108]	@ (800035c <Uart2Config+0xa4>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	4a1a      	ldr	r2, [pc, #104]	@ (800035c <Uart2Config+0xa4>)
 80002f2:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80002f6:	6093      	str	r3, [r2, #8]

	GPIOA->AFR[0] |= (7<<8);  // Bytes (11:10:9:8) = 0:1:1:1  --> AF7 Alternate function for USART2 at Pin PA2
 80002f8:	4b18      	ldr	r3, [pc, #96]	@ (800035c <Uart2Config+0xa4>)
 80002fa:	6a1b      	ldr	r3, [r3, #32]
 80002fc:	4a17      	ldr	r2, [pc, #92]	@ (800035c <Uart2Config+0xa4>)
 80002fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000302:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7<<12); // Bytes (15:14:13:12) = 0:1:1:1  --> AF7 Alternate function for USART2 at Pin PA3
 8000304:	4b15      	ldr	r3, [pc, #84]	@ (800035c <Uart2Config+0xa4>)
 8000306:	6a1b      	ldr	r3, [r3, #32]
 8000308:	4a14      	ldr	r2, [pc, #80]	@ (800035c <Uart2Config+0xa4>)
 800030a:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800030e:	6213      	str	r3, [r2, #32]

	// 3. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USART2->CR1 = 0x00;  // clear all
 8000310:	4b13      	ldr	r3, [pc, #76]	@ (8000360 <Uart2Config+0xa8>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= (1<<13);  // UE = 1... Enable USART
 8000316:	4b12      	ldr	r3, [pc, #72]	@ (8000360 <Uart2Config+0xa8>)
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	4a11      	ldr	r2, [pc, #68]	@ (8000360 <Uart2Config+0xa8>)
 800031c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000320:	60d3      	str	r3, [r2, #12]

	// 4. Program the M bit in USART_CR1 to define the word length.
	USART2->CR1 &= ~(1<<12);  // M =0; 8 bit word length
 8000322:	4b0f      	ldr	r3, [pc, #60]	@ (8000360 <Uart2Config+0xa8>)
 8000324:	68db      	ldr	r3, [r3, #12]
 8000326:	4a0e      	ldr	r2, [pc, #56]	@ (8000360 <Uart2Config+0xa8>)
 8000328:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800032c:	60d3      	str	r3, [r2, #12]

	// 5. Select the desired baud rate using the USART_BRR register.
	USART2->BRR = (7<<0) | (24<<4);   // Baud rate of 115200, PCLK1 at 45MHz
 800032e:	4b0c      	ldr	r3, [pc, #48]	@ (8000360 <Uart2Config+0xa8>)
 8000330:	f240 1287 	movw	r2, #391	@ 0x187
 8000334:	609a      	str	r2, [r3, #8]

	// 6. Enable the Transmitter/Receiver by Setting the TE and RE bits in USART_CR1 Register
	USART2->CR1 |= (1<<2); // RE=1.. Enable the Receiver
 8000336:	4b0a      	ldr	r3, [pc, #40]	@ (8000360 <Uart2Config+0xa8>)
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	4a09      	ldr	r2, [pc, #36]	@ (8000360 <Uart2Config+0xa8>)
 800033c:	f043 0304 	orr.w	r3, r3, #4
 8000340:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<3);  // TE=1.. Enable Transmitter
 8000342:	4b07      	ldr	r3, [pc, #28]	@ (8000360 <Uart2Config+0xa8>)
 8000344:	68db      	ldr	r3, [r3, #12]
 8000346:	4a06      	ldr	r2, [pc, #24]	@ (8000360 <Uart2Config+0xa8>)
 8000348:	f043 0308 	orr.w	r3, r3, #8
 800034c:	60d3      	str	r3, [r2, #12]
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40023800 	.word	0x40023800
 800035c:	40020000 	.word	0x40020000
 8000360:	40004400 	.word	0x40004400

08000364 <UART2_SendChar>:


void UART2_SendChar (uint8_t c)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
		 that the transmission of the last frame is complete. This is required for instance when
		 the USART is disabled or enters the Halt mode to avoid corrupting the last transmission.

	****************************************/

	USART2->DR = 0x01; // load the data into DR register
 800036e:	4b08      	ldr	r3, [pc, #32]	@ (8000390 <UART2_SendChar+0x2c>)
 8000370:	2201      	movs	r2, #1
 8000372:	605a      	str	r2, [r3, #4]
	while (!(USART2->SR & (1<<6)));  // Wait for TC to SET.. This indicates that the data has been transmitted
 8000374:	bf00      	nop
 8000376:	4b06      	ldr	r3, [pc, #24]	@ (8000390 <UART2_SendChar+0x2c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800037e:	2b00      	cmp	r3, #0
 8000380:	d0f9      	beq.n	8000376 <UART2_SendChar+0x12>
}
 8000382:	bf00      	nop
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40004400 	.word	0x40004400

08000394 <UART2_SendString>:

void UART2_SendString (char *string)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	while (*string) UART2_SendChar (*string++);
 800039c:	e006      	b.n	80003ac <UART2_SendString+0x18>
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	1c5a      	adds	r2, r3, #1
 80003a2:	607a      	str	r2, [r7, #4]
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ffdc 	bl	8000364 <UART2_SendChar>
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d1f4      	bne.n	800039e <UART2_SendString+0xa>
}
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <UART2_GetChar>:

uint8_t UART2_GetChar (void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0

	****************************************/

	uint8_t temp;

	while (!(USART2->SR & (1<<5)));  // wait for RXNE bit to set
 80003c6:	bf00      	nop
 80003c8:	4b07      	ldr	r3, [pc, #28]	@ (80003e8 <UART2_GetChar+0x28>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f003 0320 	and.w	r3, r3, #32
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0f9      	beq.n	80003c8 <UART2_GetChar+0x8>
	temp = USART2->DR;  // Read the data. This clears the RXNE also
 80003d4:	4b04      	ldr	r3, [pc, #16]	@ (80003e8 <UART2_GetChar+0x28>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	71fb      	strb	r3, [r7, #7]
	return temp;
 80003da:	79fb      	ldrb	r3, [r7, #7]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	40004400 	.word	0x40004400

080003ec <TIM6Config>:

void TIM6Config (void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
	2. Set the prescalar and the ARR
	3. Enable the Timer, and wait for the update Flag to set
	************************************************/

// 1. Enable Timer clock
	RCC->APB1ENR |= (1<<4);  // Enable the timer6 clock
 80003f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <TIM6Config+0x44>)
 80003f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000430 <TIM6Config+0x44>)
 80003f6:	f043 0310 	orr.w	r3, r3, #16
 80003fa:	6413      	str	r3, [r2, #64]	@ 0x40

// 2. Set the prescalar and the ARR
	TIM6->PSC = 90-1;  // 90MHz/90 = 1 MHz ~~ 1 uS delay
 80003fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <TIM6Config+0x48>)
 80003fe:	2259      	movs	r2, #89	@ 0x59
 8000400:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 0xffff;  // MAX ARR value
 8000402:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <TIM6Config+0x48>)
 8000404:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000408:	62da      	str	r2, [r3, #44]	@ 0x2c

// 3. Enable the Timer, and wait for the update Flag to set
	TIM6->CR1 |= (1<<0); // Enable the Counter
 800040a:	4b0a      	ldr	r3, [pc, #40]	@ (8000434 <TIM6Config+0x48>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a09      	ldr	r2, [pc, #36]	@ (8000434 <TIM6Config+0x48>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6013      	str	r3, [r2, #0]
	while (!(TIM6->SR & (1<<0)));  // UIF: Update interrupt flag..  This bit is set by hardware when the registers are updated
 8000416:	bf00      	nop
 8000418:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <TIM6Config+0x48>)
 800041a:	691b      	ldr	r3, [r3, #16]
 800041c:	f003 0301 	and.w	r3, r3, #1
 8000420:	2b00      	cmp	r3, #0
 8000422:	d0f9      	beq.n	8000418 <TIM6Config+0x2c>
}
 8000424:	bf00      	nop
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40023800 	.word	0x40023800
 8000434:	40001000 	.word	0x40001000

08000438 <Delay_us>:

void Delay_us (uint16_t us)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	80fb      	strh	r3, [r7, #6]
	/************** STEPS TO FOLLOW *****************
	1. RESET the Counter
	2. Wait for the Counter to reach the entered value. As each count will take 1 us,
		 the total waiting time will be the required us delay
	************************************************/
	TIM6->CNT = 0;
 8000442:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <Delay_us+0x2c>)
 8000444:	2200      	movs	r2, #0
 8000446:	625a      	str	r2, [r3, #36]	@ 0x24
	while (TIM6->CNT < us);
 8000448:	bf00      	nop
 800044a:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <Delay_us+0x2c>)
 800044c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	429a      	cmp	r2, r3
 8000452:	d3fa      	bcc.n	800044a <Delay_us+0x12>
}
 8000454:	bf00      	nop
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40001000 	.word	0x40001000

08000468 <Delay_ms>:

void Delay_ms (uint16_t ms)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i=0; i<ms; i++)
 8000472:	2300      	movs	r3, #0
 8000474:	81fb      	strh	r3, [r7, #14]
 8000476:	e006      	b.n	8000486 <Delay_ms+0x1e>
	{
		Delay_us (1000); // delay of 1 ms
 8000478:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800047c:	f7ff ffdc 	bl	8000438 <Delay_us>
	for (uint16_t i=0; i<ms; i++)
 8000480:	89fb      	ldrh	r3, [r7, #14]
 8000482:	3301      	adds	r3, #1
 8000484:	81fb      	strh	r3, [r7, #14]
 8000486:	89fa      	ldrh	r2, [r7, #14]
 8000488:	88fb      	ldrh	r3, [r7, #6]
 800048a:	429a      	cmp	r2, r3
 800048c:	d3f4      	bcc.n	8000478 <Delay_ms+0x10>
	}
}
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <main>:


int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
	SysClockConfig();
 800049e:	f7ff feb1 	bl	8000204 <SysClockConfig>
	TIM6Config();
 80004a2:	f7ff ffa3 	bl	80003ec <TIM6Config>
	Uart2Config();
 80004a6:	f7ff ff07 	bl	80002b8 <Uart2Config>


		while (1)
		{
			UART2_SendString ("\n hello2\n");
 80004aa:	4808      	ldr	r0, [pc, #32]	@ (80004cc <main+0x34>)
 80004ac:	f7ff ff72 	bl	8000394 <UART2_SendString>
			Delay_ms (1000);
 80004b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004b4:	f7ff ffd8 	bl	8000468 <Delay_ms>

			uint8_t data = UART2_GetChar ();
 80004b8:	f7ff ff82 	bl	80003c0 <UART2_GetChar>
 80004bc:	4603      	mov	r3, r0
 80004be:	71fb      	strb	r3, [r7, #7]
			UART2_SendChar (data);
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff4e 	bl	8000364 <UART2_SendChar>
		{
 80004c8:	bf00      	nop
 80004ca:	e7ee      	b.n	80004aa <main+0x12>
 80004cc:	08000584 	.word	0x08000584

080004d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d0:	480d      	ldr	r0, [pc, #52]	@ (8000508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d8:	480c      	ldr	r0, [pc, #48]	@ (800050c <LoopForever+0x6>)
  ldr r1, =_edata
 80004da:	490d      	ldr	r1, [pc, #52]	@ (8000510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000514 <LoopForever+0xe>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e0:	e002      	b.n	80004e8 <LoopCopyDataInit>

080004e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e6:	3304      	adds	r3, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ec:	d3f9      	bcc.n	80004e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f0:	4c0a      	ldr	r4, [pc, #40]	@ (800051c <LoopForever+0x16>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f4:	e001      	b.n	80004fa <LoopFillZerobss>

080004f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f8:	3204      	adds	r2, #4

080004fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004fc:	d3fb      	bcc.n	80004f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004fe:	f000 f811 	bl	8000524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000502:	f7ff ffc9 	bl	8000498 <main>

08000506 <LoopForever>:

LoopForever:
  b LoopForever
 8000506:	e7fe      	b.n	8000506 <LoopForever>
  ldr   r0, =_estack
 8000508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000510:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000514:	08000598 	.word	0x08000598
  ldr r2, =_sbss
 8000518:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800051c:	2000001c 	.word	0x2000001c

08000520 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000520:	e7fe      	b.n	8000520 <ADC_IRQHandler>
	...

08000524 <__libc_init_array>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	4d0d      	ldr	r5, [pc, #52]	@ (800055c <__libc_init_array+0x38>)
 8000528:	4c0d      	ldr	r4, [pc, #52]	@ (8000560 <__libc_init_array+0x3c>)
 800052a:	1b64      	subs	r4, r4, r5
 800052c:	10a4      	asrs	r4, r4, #2
 800052e:	2600      	movs	r6, #0
 8000530:	42a6      	cmp	r6, r4
 8000532:	d109      	bne.n	8000548 <__libc_init_array+0x24>
 8000534:	4d0b      	ldr	r5, [pc, #44]	@ (8000564 <__libc_init_array+0x40>)
 8000536:	4c0c      	ldr	r4, [pc, #48]	@ (8000568 <__libc_init_array+0x44>)
 8000538:	f000 f818 	bl	800056c <_init>
 800053c:	1b64      	subs	r4, r4, r5
 800053e:	10a4      	asrs	r4, r4, #2
 8000540:	2600      	movs	r6, #0
 8000542:	42a6      	cmp	r6, r4
 8000544:	d105      	bne.n	8000552 <__libc_init_array+0x2e>
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	f855 3b04 	ldr.w	r3, [r5], #4
 800054c:	4798      	blx	r3
 800054e:	3601      	adds	r6, #1
 8000550:	e7ee      	b.n	8000530 <__libc_init_array+0xc>
 8000552:	f855 3b04 	ldr.w	r3, [r5], #4
 8000556:	4798      	blx	r3
 8000558:	3601      	adds	r6, #1
 800055a:	e7f2      	b.n	8000542 <__libc_init_array+0x1e>
 800055c:	08000590 	.word	0x08000590
 8000560:	08000590 	.word	0x08000590
 8000564:	08000590 	.word	0x08000590
 8000568:	08000594 	.word	0x08000594

0800056c <_init>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	bf00      	nop
 8000570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000572:	bc08      	pop	{r3}
 8000574:	469e      	mov	lr, r3
 8000576:	4770      	bx	lr

08000578 <_fini>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	bf00      	nop
 800057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057e:	bc08      	pop	{r3}
 8000580:	469e      	mov	lr, r3
 8000582:	4770      	bx	lr
