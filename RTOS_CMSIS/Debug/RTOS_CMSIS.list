
RTOS_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003864  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003a34  08003a34  00004a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a5c  08003a5c  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003a5c  08003a5c  00004a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a64  08003a64  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a64  08003a64  00004a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a68  08003a68  00004a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003a6c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000405c  20000010  08003a7c  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000406c  08003a7c  0000506c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104f8  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285f  00000000  00000000  00015538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00017d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf3  00000000  00000000  00018cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227d5  00000000  00000000  000198e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001266f  00000000  00000000  0003c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6a20  00000000  00000000  0004e727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125147  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f40  00000000  00000000  0012518c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  001290cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003a1c 	.word	0x08003a1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08003a1c 	.word	0x08003a1c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	@ (800052c <vApplicationGetIdleTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	@ (8000530 <vApplicationGetIdleTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	2000002c 	.word	0x2000002c
 8000530:	20000080 	.word	0x20000080

08000534 <Task1>:
static void MX_USART2_UART_Init(void);



void Task1(void* p)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	while(1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <Task1+0x8>

08000540 <main>:
	}
}


int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af02      	add	r7, sp, #8


  HAL_Init();
 8000546:	f000 fa8f 	bl	8000a68 <HAL_Init>

  SystemClock_Config();
 800054a:	f000 f819 	bl	8000580 <SystemClock_Config>

  MX_GPIO_Init();
 800054e:	f000 f8b3 	bl	80006b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f887 	bl	8000664 <MX_USART2_UART_Init>

 xTaskCreate(Task1,"Task1",100,(void*)0,tskIDLE_PRIORITY,&task1_handler);
 8000556:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <main+0x34>)
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2300      	movs	r3, #0
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	2264      	movs	r2, #100	@ 0x64
 8000562:	4905      	ldr	r1, [pc, #20]	@ (8000578 <main+0x38>)
 8000564:	4805      	ldr	r0, [pc, #20]	@ (800057c <main+0x3c>)
 8000566:	f002 f9fc 	bl	8002962 <xTaskCreate>
 vTaskStartScheduler();
 800056a:	f002 fb31 	bl	8002bd0 <vTaskStartScheduler>

  while (1)
 800056e:	bf00      	nop
 8000570:	e7fd      	b.n	800056e <main+0x2e>
 8000572:	bf00      	nop
 8000574:	20000280 	.word	0x20000280
 8000578:	08003a34 	.word	0x08003a34
 800057c:	08000535 	.word	0x08000535

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	@ 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2234      	movs	r2, #52	@ 0x34
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fa18 	bl	80039c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b2c      	ldr	r3, [pc, #176]	@ (800065c <SystemClock_Config+0xdc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	4a2b      	ldr	r2, [pc, #172]	@ (800065c <SystemClock_Config+0xdc>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b4:	4b29      	ldr	r3, [pc, #164]	@ (800065c <SystemClock_Config+0xdc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	4b26      	ldr	r3, [pc, #152]	@ (8000660 <SystemClock_Config+0xe0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a25      	ldr	r2, [pc, #148]	@ (8000660 <SystemClock_Config+0xe0>)
 80005ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b23      	ldr	r3, [pc, #140]	@ (8000660 <SystemClock_Config+0xe0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005f4:	23b4      	movs	r3, #180	@ 0xb4
 80005f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000600:	2302      	movs	r3, #2
 8000602:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f8cb 	bl	80017a4 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000614:	f000 f8d0 	bl	80007b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000618:	f000 fcf8 	bl	800100c <HAL_PWREx_EnableOverDrive>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000622:	f000 f8c9 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000632:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	2105      	movs	r1, #5
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fd31 	bl	80010ac <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000650:	f000 f8b2 	bl	80007b8 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	@ 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000668:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	@ (80006b4 <MX_USART2_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_USART2_UART_Init+0x4c>)
 800069c:	f001 fdc2 	bl	8002224 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f000 f887 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000284 	.word	0x20000284
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	@ 0x28
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000788 <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000788 <MX_GPIO_Init+0xd0>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b26      	ldr	r3, [pc, #152]	@ (8000788 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a25      	ldr	r2, [pc, #148]	@ (8000788 <MX_GPIO_Init+0xd0>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b23      	ldr	r3, [pc, #140]	@ (8000788 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a1e      	ldr	r2, [pc, #120]	@ (8000788 <MX_GPIO_Init+0xd0>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a17      	ldr	r2, [pc, #92]	@ (8000788 <MX_GPIO_Init+0xd0>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	4812      	ldr	r0, [pc, #72]	@ (800078c <MX_GPIO_Init+0xd4>)
 8000744:	f000 fc48 	bl	8000fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000748:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	480c      	ldr	r0, [pc, #48]	@ (8000790 <MX_GPIO_Init+0xd8>)
 8000760:	f000 faa6 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000764:	2320      	movs	r3, #32
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_GPIO_Init+0xd4>)
 800077c:	f000 fa98 	bl	8000cb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	@ 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000
 8000790:	40020800 	.word	0x40020800

08000794 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a04      	ldr	r2, [pc, #16]	@ (80007b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d101      	bne.n	80007aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007a6:	f000 f981 	bl	8000aac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40001000 	.word	0x40001000

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <Error_Handler+0x8>

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <HAL_MspInit+0x54>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d2:	4a11      	ldr	r2, [pc, #68]	@ (8000818 <HAL_MspInit+0x54>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007da:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <HAL_MspInit+0x54>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <HAL_MspInit+0x54>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000818 <HAL_MspInit+0x54>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <HAL_MspInit+0x54>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	210f      	movs	r1, #15
 8000806:	f06f 0001 	mvn.w	r0, #1
 800080a:	f000 fa27 	bl	8000c5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	@ 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a19      	ldr	r2, [pc, #100]	@ (80008a0 <HAL_UART_MspInit+0x84>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d12b      	bne.n	8000896 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b18      	ldr	r3, [pc, #96]	@ (80008a4 <HAL_UART_MspInit+0x88>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	4a17      	ldr	r2, [pc, #92]	@ (80008a4 <HAL_UART_MspInit+0x88>)
 8000848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800084c:	6413      	str	r3, [r2, #64]	@ 0x40
 800084e:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <HAL_UART_MspInit+0x88>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <HAL_UART_MspInit+0x88>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a10      	ldr	r2, [pc, #64]	@ (80008a4 <HAL_UART_MspInit+0x88>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <HAL_UART_MspInit+0x88>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000876:	230c      	movs	r3, #12
 8000878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000886:	2307      	movs	r3, #7
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <HAL_UART_MspInit+0x8c>)
 8000892:	f000 fa0d 	bl	8000cb0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40004400 	.word	0x40004400
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000

080008ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08e      	sub	sp, #56	@ 0x38
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4b33      	ldr	r3, [pc, #204]	@ (8000990 <HAL_InitTick+0xe4>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c4:	4a32      	ldr	r2, [pc, #200]	@ (8000990 <HAL_InitTick+0xe4>)
 80008c6:	f043 0310 	orr.w	r3, r3, #16
 80008ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80008cc:	4b30      	ldr	r3, [pc, #192]	@ (8000990 <HAL_InitTick+0xe4>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d8:	f107 0210 	add.w	r2, r7, #16
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fcfc 	bl	80012e0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008e8:	6a3b      	ldr	r3, [r7, #32]
 80008ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d103      	bne.n	80008fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008f2:	f000 fccd 	bl	8001290 <HAL_RCC_GetPCLK1Freq>
 80008f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80008f8:	e004      	b.n	8000904 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008fa:	f000 fcc9 	bl	8001290 <HAL_RCC_GetPCLK1Freq>
 80008fe:	4603      	mov	r3, r0
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000906:	4a23      	ldr	r2, [pc, #140]	@ (8000994 <HAL_InitTick+0xe8>)
 8000908:	fba2 2303 	umull	r2, r3, r2, r3
 800090c:	0c9b      	lsrs	r3, r3, #18
 800090e:	3b01      	subs	r3, #1
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000912:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <HAL_InitTick+0xec>)
 8000914:	4a21      	ldr	r2, [pc, #132]	@ (800099c <HAL_InitTick+0xf0>)
 8000916:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000918:	4b1f      	ldr	r3, [pc, #124]	@ (8000998 <HAL_InitTick+0xec>)
 800091a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800091e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000920:	4a1d      	ldr	r2, [pc, #116]	@ (8000998 <HAL_InitTick+0xec>)
 8000922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000924:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <HAL_InitTick+0xec>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <HAL_InitTick+0xec>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <HAL_InitTick+0xec>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000938:	4817      	ldr	r0, [pc, #92]	@ (8000998 <HAL_InitTick+0xec>)
 800093a:	f001 f9d1 	bl	8001ce0 <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000944:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000948:	2b00      	cmp	r3, #0
 800094a:	d11b      	bne.n	8000984 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800094c:	4812      	ldr	r0, [pc, #72]	@ (8000998 <HAL_InitTick+0xec>)
 800094e:	f001 fa21 	bl	8001d94 <HAL_TIM_Base_Start_IT>
 8000952:	4603      	mov	r3, r0
 8000954:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000958:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800095c:	2b00      	cmp	r3, #0
 800095e:	d111      	bne.n	8000984 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000960:	2036      	movs	r0, #54	@ 0x36
 8000962:	f000 f997 	bl	8000c94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b0f      	cmp	r3, #15
 800096a:	d808      	bhi.n	800097e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800096c:	2200      	movs	r2, #0
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	2036      	movs	r0, #54	@ 0x36
 8000972:	f000 f973 	bl	8000c5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <HAL_InitTick+0xf4>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	e002      	b.n	8000984 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000984:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000988:	4618      	mov	r0, r3
 800098a:	3738      	adds	r7, #56	@ 0x38
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	431bde83 	.word	0x431bde83
 8000998:	200002cc 	.word	0x200002cc
 800099c:	40001000 	.word	0x40001000
 80009a0:	20000004 	.word	0x20000004

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <NMI_Handler+0x4>

080009ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <MemManage_Handler+0x4>

080009bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <UsageFault_Handler+0x4>

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009e0:	4802      	ldr	r0, [pc, #8]	@ (80009ec <TIM6_DAC_IRQHandler+0x10>)
 80009e2:	f001 fa47 	bl	8001e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200002cc 	.word	0x200002cc

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	@ (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a18:	f7ff ffea 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a1c:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a1e:	490d      	ldr	r1, [pc, #52]	@ (8000a54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a34:	4c0a      	ldr	r4, [pc, #40]	@ (8000a60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a42:	f002 ffc7 	bl	80039d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a46:	f7ff fd7b 	bl	8000540 <main>
  bx  lr    
 8000a4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a58:	08003a6c 	.word	0x08003a6c
  ldr r2, =_sbss
 8000a5c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a60:	2000406c 	.word	0x2000406c

08000a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa8 <HAL_Init+0x40>)
 8000a72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a78:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <HAL_Init+0x40>)
 8000a7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	@ (8000aa8 <HAL_Init+0x40>)
 8000a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f8d8 	bl	8000c46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	200f      	movs	r0, #15
 8000a98:	f7ff ff08 	bl	80008ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff fe92 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023c00 	.word	0x40023c00

08000aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_IncTick+0x20>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_IncTick+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <HAL_IncTick+0x24>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000314 	.word	0x20000314

08000ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <HAL_GetTick+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000314 	.word	0x20000314

08000aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <__NVIC_SetPriorityGrouping+0x44>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	60d3      	str	r3, [r2, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <__NVIC_GetPriorityGrouping+0x18>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	f003 0307 	and.w	r3, r3, #7
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	db0b      	blt.n	8000b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	f003 021f 	and.w	r2, r3, #31
 8000b68:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <__NVIC_EnableIRQ+0x38>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	095b      	lsrs	r3, r3, #5
 8000b70:	2001      	movs	r0, #1
 8000b72:	fa00 f202 	lsl.w	r2, r0, r2
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	@ (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	@ (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	@ 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	@ 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff ff4c 	bl	8000aec <__NVIC_SetPriorityGrouping>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
 8000c68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6e:	f7ff ff61 	bl	8000b34 <__NVIC_GetPriorityGrouping>
 8000c72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	6978      	ldr	r0, [r7, #20]
 8000c7a:	f7ff ffb1 	bl	8000be0 <NVIC_EncodePriority>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff80 	bl	8000b8c <__NVIC_SetPriority>
}
 8000c8c:	bf00      	nop
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff54 	bl	8000b50 <__NVIC_EnableIRQ>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	@ 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	e165      	b.n	8000f98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ccc:	2201      	movs	r2, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f040 8154 	bne.w	8000f92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d005      	beq.n	8000d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d130      	bne.n	8000d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	091b      	lsrs	r3, r3, #4
 8000d4e:	f003 0201 	and.w	r2, r3, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d017      	beq.n	8000da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d123      	bne.n	8000df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	08da      	lsrs	r2, r3, #3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3208      	adds	r2, #8
 8000dee:	69b9      	ldr	r1, [r7, #24]
 8000df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0203 	and.w	r2, r3, #3
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 80ae 	beq.w	8000f92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8000fb0 <HAL_GPIO_Init+0x300>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3e:	4a5c      	ldr	r2, [pc, #368]	@ (8000fb0 <HAL_GPIO_Init+0x300>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e46:	4b5a      	ldr	r3, [pc, #360]	@ (8000fb0 <HAL_GPIO_Init+0x300>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e52:	4a58      	ldr	r2, [pc, #352]	@ (8000fb4 <HAL_GPIO_Init+0x304>)
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4f      	ldr	r2, [pc, #316]	@ (8000fb8 <HAL_GPIO_Init+0x308>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d025      	beq.n	8000eca <HAL_GPIO_Init+0x21a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4e      	ldr	r2, [pc, #312]	@ (8000fbc <HAL_GPIO_Init+0x30c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d01f      	beq.n	8000ec6 <HAL_GPIO_Init+0x216>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4d      	ldr	r2, [pc, #308]	@ (8000fc0 <HAL_GPIO_Init+0x310>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d019      	beq.n	8000ec2 <HAL_GPIO_Init+0x212>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc4 <HAL_GPIO_Init+0x314>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0x20e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4b      	ldr	r2, [pc, #300]	@ (8000fc8 <HAL_GPIO_Init+0x318>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d00d      	beq.n	8000eba <HAL_GPIO_Init+0x20a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8000fcc <HAL_GPIO_Init+0x31c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d007      	beq.n	8000eb6 <HAL_GPIO_Init+0x206>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a49      	ldr	r2, [pc, #292]	@ (8000fd0 <HAL_GPIO_Init+0x320>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_GPIO_Init+0x202>
 8000eae:	2306      	movs	r3, #6
 8000eb0:	e00c      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e00a      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	e008      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000eba:	2304      	movs	r3, #4
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e004      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e002      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <HAL_GPIO_Init+0x21c>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	69fa      	ldr	r2, [r7, #28]
 8000ece:	f002 0203 	and.w	r2, r2, #3
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	4093      	lsls	r3, r2
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000edc:	4935      	ldr	r1, [pc, #212]	@ (8000fb4 <HAL_GPIO_Init+0x304>)
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eea:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd4 <HAL_GPIO_Init+0x324>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f0e:	4a31      	ldr	r2, [pc, #196]	@ (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f14:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f38:	4a26      	ldr	r2, [pc, #152]	@ (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f3e:	4b25      	ldr	r3, [pc, #148]	@ (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f62:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f8c:	4a11      	ldr	r2, [pc, #68]	@ (8000fd4 <HAL_GPIO_Init+0x324>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3301      	adds	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	2b0f      	cmp	r3, #15
 8000f9c:	f67f ae96 	bls.w	8000ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3724      	adds	r7, #36	@ 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	40020800 	.word	0x40020800
 8000fc4:	40020c00 	.word	0x40020c00
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40021400 	.word	0x40021400
 8000fd0:	40021800 	.word	0x40021800
 8000fd4:	40013c00 	.word	0x40013c00

08000fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe8:	787b      	ldrb	r3, [r7, #1]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ff4:	e003      	b.n	8000ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	041a      	lsls	r2, r3, #16
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b20      	ldr	r3, [pc, #128]	@ (800109c <HAL_PWREx_EnableOverDrive+0x90>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	4a1f      	ldr	r2, [pc, #124]	@ (800109c <HAL_PWREx_EnableOverDrive+0x90>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001024:	6413      	str	r3, [r2, #64]	@ 0x40
 8001026:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <HAL_PWREx_EnableOverDrive+0x90>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001032:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001038:	f7ff fd4c 	bl	8000ad4 <HAL_GetTick>
 800103c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800103e:	e009      	b.n	8001054 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001040:	f7ff fd48 	bl	8000ad4 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800104e:	d901      	bls.n	8001054 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e01f      	b.n	8001094 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001054:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800105c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001060:	d1ee      	bne.n	8001040 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001068:	f7ff fd34 	bl	8000ad4 <HAL_GetTick>
 800106c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800106e:	e009      	b.n	8001084 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001070:	f7ff fd30 	bl	8000ad4 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800107e:	d901      	bls.n	8001084 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e007      	b.n	8001094 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001084:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001090:	d1ee      	bne.n	8001070 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40023800 	.word	0x40023800
 80010a0:	420e0040 	.word	0x420e0040
 80010a4:	40007000 	.word	0x40007000
 80010a8:	420e0044 	.word	0x420e0044

080010ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0cc      	b.n	800125a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010c0:	4b68      	ldr	r3, [pc, #416]	@ (8001264 <HAL_RCC_ClockConfig+0x1b8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 030f 	and.w	r3, r3, #15
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d90c      	bls.n	80010e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ce:	4b65      	ldr	r3, [pc, #404]	@ (8001264 <HAL_RCC_ClockConfig+0x1b8>)
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d6:	4b63      	ldr	r3, [pc, #396]	@ (8001264 <HAL_RCC_ClockConfig+0x1b8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d001      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e0b8      	b.n	800125a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d020      	beq.n	8001136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001100:	4b59      	ldr	r3, [pc, #356]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	4a58      	ldr	r2, [pc, #352]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800110a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001118:	4b53      	ldr	r3, [pc, #332]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	4a52      	ldr	r2, [pc, #328]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800111e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001124:	4b50      	ldr	r3, [pc, #320]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	494d      	ldr	r1, [pc, #308]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	4313      	orrs	r3, r2
 8001134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d044      	beq.n	80011cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d107      	bne.n	800115a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114a:	4b47      	ldr	r3, [pc, #284]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d119      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e07f      	b.n	800125a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d003      	beq.n	800116a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001166:	2b03      	cmp	r3, #3
 8001168:	d107      	bne.n	800117a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800116a:	4b3f      	ldr	r3, [pc, #252]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d109      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e06f      	b.n	800125a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117a:	4b3b      	ldr	r3, [pc, #236]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e067      	b.n	800125a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800118a:	4b37      	ldr	r3, [pc, #220]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f023 0203 	bic.w	r2, r3, #3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4934      	ldr	r1, [pc, #208]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	4313      	orrs	r3, r2
 800119a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800119c:	f7ff fc9a 	bl	8000ad4 <HAL_GetTick>
 80011a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a2:	e00a      	b.n	80011ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a4:	f7ff fc96 	bl	8000ad4 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e04f      	b.n	800125a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 020c 	and.w	r2, r3, #12
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d1eb      	bne.n	80011a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011cc:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <HAL_RCC_ClockConfig+0x1b8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d20c      	bcs.n	80011f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011da:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <HAL_RCC_ClockConfig+0x1b8>)
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e2:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <HAL_RCC_ClockConfig+0x1b8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d001      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e032      	b.n	800125a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d008      	beq.n	8001212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001200:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	4916      	ldr	r1, [pc, #88]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800120e:	4313      	orrs	r3, r2
 8001210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b00      	cmp	r3, #0
 800121c:	d009      	beq.n	8001232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800121e:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	490e      	ldr	r1, [pc, #56]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	4313      	orrs	r3, r2
 8001230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001232:	f000 f887 	bl	8001344 <HAL_RCC_GetSysClockFreq>
 8001236:	4602      	mov	r2, r0
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	490a      	ldr	r1, [pc, #40]	@ (800126c <HAL_RCC_ClockConfig+0x1c0>)
 8001244:	5ccb      	ldrb	r3, [r1, r3]
 8001246:	fa22 f303 	lsr.w	r3, r2, r3
 800124a:	4a09      	ldr	r2, [pc, #36]	@ (8001270 <HAL_RCC_ClockConfig+0x1c4>)
 800124c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800124e:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <HAL_RCC_ClockConfig+0x1c8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fb2a 	bl	80008ac <HAL_InitTick>

  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023c00 	.word	0x40023c00
 8001268:	40023800 	.word	0x40023800
 800126c:	08003a44 	.word	0x08003a44
 8001270:	20000000 	.word	0x20000000
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <HAL_RCC_GetHCLKFreq+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000000 	.word	0x20000000

08001290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001294:	f7ff fff0 	bl	8001278 <HAL_RCC_GetHCLKFreq>
 8001298:	4602      	mov	r2, r0
 800129a:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	0a9b      	lsrs	r3, r3, #10
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	4903      	ldr	r1, [pc, #12]	@ (80012b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012a6:	5ccb      	ldrb	r3, [r1, r3]
 80012a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	08003a54 	.word	0x08003a54

080012b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012bc:	f7ff ffdc 	bl	8001278 <HAL_RCC_GetHCLKFreq>
 80012c0:	4602      	mov	r2, r0
 80012c2:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	0b5b      	lsrs	r3, r3, #13
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	4903      	ldr	r1, [pc, #12]	@ (80012dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80012ce:	5ccb      	ldrb	r3, [r1, r3]
 80012d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	08003a54 	.word	0x08003a54

080012e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	220f      	movs	r2, #15
 80012ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_RCC_GetClockConfig+0x5c>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 0203 	and.w	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_RCC_GetClockConfig+0x5c>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <HAL_RCC_GetClockConfig+0x5c>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001314:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_RCC_GetClockConfig+0x5c>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	08db      	lsrs	r3, r3, #3
 800131a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <HAL_RCC_GetClockConfig+0x60>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 020f 	and.w	r2, r3, #15
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	601a      	str	r2, [r3, #0]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40023c00 	.word	0x40023c00

08001344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001348:	b0ae      	sub	sp, #184	@ 0xb8
 800134a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800136a:	4bcb      	ldr	r3, [pc, #812]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x354>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b0c      	cmp	r3, #12
 8001374:	f200 8206 	bhi.w	8001784 <HAL_RCC_GetSysClockFreq+0x440>
 8001378:	a201      	add	r2, pc, #4	@ (adr r2, 8001380 <HAL_RCC_GetSysClockFreq+0x3c>)
 800137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137e:	bf00      	nop
 8001380:	080013b5 	.word	0x080013b5
 8001384:	08001785 	.word	0x08001785
 8001388:	08001785 	.word	0x08001785
 800138c:	08001785 	.word	0x08001785
 8001390:	080013bd 	.word	0x080013bd
 8001394:	08001785 	.word	0x08001785
 8001398:	08001785 	.word	0x08001785
 800139c:	08001785 	.word	0x08001785
 80013a0:	080013c5 	.word	0x080013c5
 80013a4:	08001785 	.word	0x08001785
 80013a8:	08001785 	.word	0x08001785
 80013ac:	08001785 	.word	0x08001785
 80013b0:	080015b5 	.word	0x080015b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013b4:	4bb9      	ldr	r3, [pc, #740]	@ (800169c <HAL_RCC_GetSysClockFreq+0x358>)
 80013b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013ba:	e1e7      	b.n	800178c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013bc:	4bb8      	ldr	r3, [pc, #736]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013c2:	e1e3      	b.n	800178c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013c4:	4bb4      	ldr	r3, [pc, #720]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x354>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013d0:	4bb1      	ldr	r3, [pc, #708]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x354>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d071      	beq.n	80014c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013dc:	4bae      	ldr	r3, [pc, #696]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x354>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	099b      	lsrs	r3, r3, #6
 80013e2:	2200      	movs	r2, #0
 80013e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013e8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80013ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001402:	4622      	mov	r2, r4
 8001404:	462b      	mov	r3, r5
 8001406:	f04f 0000 	mov.w	r0, #0
 800140a:	f04f 0100 	mov.w	r1, #0
 800140e:	0159      	lsls	r1, r3, #5
 8001410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001414:	0150      	lsls	r0, r2, #5
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4621      	mov	r1, r4
 800141c:	1a51      	subs	r1, r2, r1
 800141e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001420:	4629      	mov	r1, r5
 8001422:	eb63 0301 	sbc.w	r3, r3, r1
 8001426:	647b      	str	r3, [r7, #68]	@ 0x44
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001434:	4649      	mov	r1, r9
 8001436:	018b      	lsls	r3, r1, #6
 8001438:	4641      	mov	r1, r8
 800143a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800143e:	4641      	mov	r1, r8
 8001440:	018a      	lsls	r2, r1, #6
 8001442:	4641      	mov	r1, r8
 8001444:	1a51      	subs	r1, r2, r1
 8001446:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001448:	4649      	mov	r1, r9
 800144a:	eb63 0301 	sbc.w	r3, r3, r1
 800144e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800145c:	4649      	mov	r1, r9
 800145e:	00cb      	lsls	r3, r1, #3
 8001460:	4641      	mov	r1, r8
 8001462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001466:	4641      	mov	r1, r8
 8001468:	00ca      	lsls	r2, r1, #3
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	4603      	mov	r3, r0
 8001470:	4622      	mov	r2, r4
 8001472:	189b      	adds	r3, r3, r2
 8001474:	633b      	str	r3, [r7, #48]	@ 0x30
 8001476:	462b      	mov	r3, r5
 8001478:	460a      	mov	r2, r1
 800147a:	eb42 0303 	adc.w	r3, r2, r3
 800147e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800148c:	4629      	mov	r1, r5
 800148e:	024b      	lsls	r3, r1, #9
 8001490:	4621      	mov	r1, r4
 8001492:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001496:	4621      	mov	r1, r4
 8001498:	024a      	lsls	r2, r1, #9
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014a2:	2200      	movs	r2, #0
 80014a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80014b0:	f7fe feae 	bl	8000210 <__aeabi_uldivmod>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4613      	mov	r3, r2
 80014ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014be:	e067      	b.n	8001590 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c0:	4b75      	ldr	r3, [pc, #468]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x354>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	099b      	lsrs	r3, r3, #6
 80014c6:	2200      	movs	r2, #0
 80014c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014cc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80014d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014da:	2300      	movs	r3, #0
 80014dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80014e2:	4622      	mov	r2, r4
 80014e4:	462b      	mov	r3, r5
 80014e6:	f04f 0000 	mov.w	r0, #0
 80014ea:	f04f 0100 	mov.w	r1, #0
 80014ee:	0159      	lsls	r1, r3, #5
 80014f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014f4:	0150      	lsls	r0, r2, #5
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4621      	mov	r1, r4
 80014fc:	1a51      	subs	r1, r2, r1
 80014fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001500:	4629      	mov	r1, r5
 8001502:	eb63 0301 	sbc.w	r3, r3, r1
 8001506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001514:	4649      	mov	r1, r9
 8001516:	018b      	lsls	r3, r1, #6
 8001518:	4641      	mov	r1, r8
 800151a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800151e:	4641      	mov	r1, r8
 8001520:	018a      	lsls	r2, r1, #6
 8001522:	4641      	mov	r1, r8
 8001524:	ebb2 0a01 	subs.w	sl, r2, r1
 8001528:	4649      	mov	r1, r9
 800152a:	eb63 0b01 	sbc.w	fp, r3, r1
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800153a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800153e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001542:	4692      	mov	sl, r2
 8001544:	469b      	mov	fp, r3
 8001546:	4623      	mov	r3, r4
 8001548:	eb1a 0303 	adds.w	r3, sl, r3
 800154c:	623b      	str	r3, [r7, #32]
 800154e:	462b      	mov	r3, r5
 8001550:	eb4b 0303 	adc.w	r3, fp, r3
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001562:	4629      	mov	r1, r5
 8001564:	028b      	lsls	r3, r1, #10
 8001566:	4621      	mov	r1, r4
 8001568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800156c:	4621      	mov	r1, r4
 800156e:	028a      	lsls	r2, r1, #10
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001578:	2200      	movs	r2, #0
 800157a:	673b      	str	r3, [r7, #112]	@ 0x70
 800157c:	677a      	str	r2, [r7, #116]	@ 0x74
 800157e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001582:	f7fe fe45 	bl	8000210 <__aeabi_uldivmod>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4613      	mov	r3, r2
 800158c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001590:	4b41      	ldr	r3, [pc, #260]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x354>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	0c1b      	lsrs	r3, r3, #16
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	3301      	adds	r3, #1
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80015a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015b2:	e0eb      	b.n	800178c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b4:	4b38      	ldr	r3, [pc, #224]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x354>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c0:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x354>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d06b      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015cc:	4b32      	ldr	r3, [pc, #200]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	099b      	lsrs	r3, r3, #6
 80015d2:	2200      	movs	r2, #0
 80015d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015de:	663b      	str	r3, [r7, #96]	@ 0x60
 80015e0:	2300      	movs	r3, #0
 80015e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80015e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015e8:	4622      	mov	r2, r4
 80015ea:	462b      	mov	r3, r5
 80015ec:	f04f 0000 	mov.w	r0, #0
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	0159      	lsls	r1, r3, #5
 80015f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015fa:	0150      	lsls	r0, r2, #5
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4621      	mov	r1, r4
 8001602:	1a51      	subs	r1, r2, r1
 8001604:	61b9      	str	r1, [r7, #24]
 8001606:	4629      	mov	r1, r5
 8001608:	eb63 0301 	sbc.w	r3, r3, r1
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800161a:	4659      	mov	r1, fp
 800161c:	018b      	lsls	r3, r1, #6
 800161e:	4651      	mov	r1, sl
 8001620:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001624:	4651      	mov	r1, sl
 8001626:	018a      	lsls	r2, r1, #6
 8001628:	4651      	mov	r1, sl
 800162a:	ebb2 0801 	subs.w	r8, r2, r1
 800162e:	4659      	mov	r1, fp
 8001630:	eb63 0901 	sbc.w	r9, r3, r1
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001640:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001644:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001648:	4690      	mov	r8, r2
 800164a:	4699      	mov	r9, r3
 800164c:	4623      	mov	r3, r4
 800164e:	eb18 0303 	adds.w	r3, r8, r3
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	462b      	mov	r3, r5
 8001656:	eb49 0303 	adc.w	r3, r9, r3
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001668:	4629      	mov	r1, r5
 800166a:	024b      	lsls	r3, r1, #9
 800166c:	4621      	mov	r1, r4
 800166e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001672:	4621      	mov	r1, r4
 8001674:	024a      	lsls	r2, r1, #9
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800167e:	2200      	movs	r2, #0
 8001680:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001682:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001684:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001688:	f7fe fdc2 	bl	8000210 <__aeabi_uldivmod>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4613      	mov	r3, r2
 8001692:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001696:	e065      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x420>
 8001698:	40023800 	.word	0x40023800
 800169c:	00f42400 	.word	0x00f42400
 80016a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a4:	4b3d      	ldr	r3, [pc, #244]	@ (800179c <HAL_RCC_GetSysClockFreq+0x458>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	099b      	lsrs	r3, r3, #6
 80016aa:	2200      	movs	r2, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	4611      	mov	r1, r2
 80016b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80016b6:	2300      	movs	r3, #0
 80016b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80016ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80016be:	4642      	mov	r2, r8
 80016c0:	464b      	mov	r3, r9
 80016c2:	f04f 0000 	mov.w	r0, #0
 80016c6:	f04f 0100 	mov.w	r1, #0
 80016ca:	0159      	lsls	r1, r3, #5
 80016cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d0:	0150      	lsls	r0, r2, #5
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4641      	mov	r1, r8
 80016d8:	1a51      	subs	r1, r2, r1
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	4649      	mov	r1, r9
 80016de:	eb63 0301 	sbc.w	r3, r3, r1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016f0:	4659      	mov	r1, fp
 80016f2:	018b      	lsls	r3, r1, #6
 80016f4:	4651      	mov	r1, sl
 80016f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016fa:	4651      	mov	r1, sl
 80016fc:	018a      	lsls	r2, r1, #6
 80016fe:	4651      	mov	r1, sl
 8001700:	1a54      	subs	r4, r2, r1
 8001702:	4659      	mov	r1, fp
 8001704:	eb63 0501 	sbc.w	r5, r3, r1
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	00eb      	lsls	r3, r5, #3
 8001712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001716:	00e2      	lsls	r2, r4, #3
 8001718:	4614      	mov	r4, r2
 800171a:	461d      	mov	r5, r3
 800171c:	4643      	mov	r3, r8
 800171e:	18e3      	adds	r3, r4, r3
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	464b      	mov	r3, r9
 8001724:	eb45 0303 	adc.w	r3, r5, r3
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001736:	4629      	mov	r1, r5
 8001738:	028b      	lsls	r3, r1, #10
 800173a:	4621      	mov	r1, r4
 800173c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001740:	4621      	mov	r1, r4
 8001742:	028a      	lsls	r2, r1, #10
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800174c:	2200      	movs	r2, #0
 800174e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001750:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001752:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001756:	f7fe fd5b 	bl	8000210 <__aeabi_uldivmod>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4613      	mov	r3, r2
 8001760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001764:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <HAL_RCC_GetSysClockFreq+0x458>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	0f1b      	lsrs	r3, r3, #28
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001776:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001782:	e003      	b.n	800178c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800178a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800178c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001790:	4618      	mov	r0, r3
 8001792:	37b8      	adds	r7, #184	@ 0xb8
 8001794:	46bd      	mov	sp, r7
 8001796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	00f42400 	.word	0x00f42400

080017a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e28d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8083 	beq.w	80018ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017c4:	4b94      	ldr	r3, [pc, #592]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d019      	beq.n	8001804 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017d0:	4b91      	ldr	r3, [pc, #580]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
        || \
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017dc:	4b8e      	ldr	r3, [pc, #568]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017e8:	d00c      	beq.n	8001804 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017f2:	2b0c      	cmp	r3, #12
 80017f4:	d112      	bne.n	800181c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f6:	4b88      	ldr	r3, [pc, #544]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001802:	d10b      	bne.n	800181c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	4b84      	ldr	r3, [pc, #528]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d05b      	beq.n	80018c8 <HAL_RCC_OscConfig+0x124>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d157      	bne.n	80018c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e25a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001824:	d106      	bne.n	8001834 <HAL_RCC_OscConfig+0x90>
 8001826:	4b7c      	ldr	r3, [pc, #496]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a7b      	ldr	r2, [pc, #492]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e01d      	b.n	8001870 <HAL_RCC_OscConfig+0xcc>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0xb4>
 800183e:	4b76      	ldr	r3, [pc, #472]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a75      	ldr	r2, [pc, #468]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001844:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b73      	ldr	r3, [pc, #460]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a72      	ldr	r2, [pc, #456]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0xcc>
 8001858:	4b6f      	ldr	r3, [pc, #444]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a6e      	ldr	r2, [pc, #440]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 800185e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b6c      	ldr	r3, [pc, #432]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6b      	ldr	r2, [pc, #428]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 800186a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800186e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff f92c 	bl	8000ad4 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff f928 	bl	8000ad4 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	@ 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e21f      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b61      	ldr	r3, [pc, #388]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0xdc>
 800189e:	e014      	b.n	80018ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff f918 	bl	8000ad4 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff f914 	bl	8000ad4 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	@ 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e20b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	4b57      	ldr	r3, [pc, #348]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x104>
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d06f      	beq.n	80019b6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018d6:	4b50      	ldr	r3, [pc, #320]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d017      	beq.n	8001912 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
        || \
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d105      	bne.n	80018fa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00b      	beq.n	8001912 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fa:	4b47      	ldr	r3, [pc, #284]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d11c      	bne.n	8001940 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001906:	4b44      	ldr	r3, [pc, #272]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d116      	bne.n	8001940 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	4b41      	ldr	r3, [pc, #260]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_RCC_OscConfig+0x186>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d001      	beq.n	800192a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e1d3      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4937      	ldr	r1, [pc, #220]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193e:	e03a      	b.n	80019b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d020      	beq.n	800198a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001948:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <HAL_RCC_OscConfig+0x278>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff f8c1 	bl	8000ad4 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001956:	f7ff f8bd 	bl	8000ad4 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1b4      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001968:	4b2b      	ldr	r3, [pc, #172]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001974:	4b28      	ldr	r3, [pc, #160]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4925      	ldr	r1, [pc, #148]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
 8001988:	e015      	b.n	80019b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198a:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <HAL_RCC_OscConfig+0x278>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff f8a0 	bl	8000ad4 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff f89c 	bl	8000ad4 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e193      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d036      	beq.n	8001a30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d016      	beq.n	80019f8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff f880 	bl	8000ad4 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff f87c 	bl	8000ad4 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e173      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <HAL_RCC_OscConfig+0x274>)
 80019ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x234>
 80019f6:	e01b      	b.n	8001a30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <HAL_RCC_OscConfig+0x27c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7ff f869 	bl	8000ad4 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a04:	e00e      	b.n	8001a24 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a06:	f7ff f865 	bl	8000ad4 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d907      	bls.n	8001a24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e15c      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	42470000 	.word	0x42470000
 8001a20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a24:	4b8a      	ldr	r3, [pc, #552]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ea      	bne.n	8001a06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 8097 	beq.w	8001b6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a42:	4b83      	ldr	r3, [pc, #524]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10f      	bne.n	8001a6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b7f      	ldr	r3, [pc, #508]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	4a7e      	ldr	r2, [pc, #504]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	4b79      	ldr	r3, [pc, #484]	@ (8001c54 <HAL_RCC_OscConfig+0x4b0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d118      	bne.n	8001aac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7a:	4b76      	ldr	r3, [pc, #472]	@ (8001c54 <HAL_RCC_OscConfig+0x4b0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a75      	ldr	r2, [pc, #468]	@ (8001c54 <HAL_RCC_OscConfig+0x4b0>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a86:	f7ff f825 	bl	8000ad4 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8e:	f7ff f821 	bl	8000ad4 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e118      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	4b6c      	ldr	r3, [pc, #432]	@ (8001c54 <HAL_RCC_OscConfig+0x4b0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x31e>
 8001ab4:	4b66      	ldr	r3, [pc, #408]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab8:	4a65      	ldr	r2, [pc, #404]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac0:	e01c      	b.n	8001afc <HAL_RCC_OscConfig+0x358>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x340>
 8001aca:	4b61      	ldr	r3, [pc, #388]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ace:	4a60      	ldr	r2, [pc, #384]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ad6:	4b5e      	ldr	r3, [pc, #376]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ada:	4a5d      	ldr	r2, [pc, #372]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ae2:	e00b      	b.n	8001afc <HAL_RCC_OscConfig+0x358>
 8001ae4:	4b5a      	ldr	r3, [pc, #360]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae8:	4a59      	ldr	r2, [pc, #356]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af0:	4b57      	ldr	r3, [pc, #348]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af4:	4a56      	ldr	r2, [pc, #344]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001af6:	f023 0304 	bic.w	r3, r3, #4
 8001afa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d015      	beq.n	8001b30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7fe ffe6 	bl	8000ad4 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0c:	f7fe ffe2 	bl	8000ad4 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0d7      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b22:	4b4b      	ldr	r3, [pc, #300]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0ee      	beq.n	8001b0c <HAL_RCC_OscConfig+0x368>
 8001b2e:	e014      	b.n	8001b5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7fe ffd0 	bl	8000ad4 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7fe ffcc 	bl	8000ad4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e0c1      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4e:	4b40      	ldr	r3, [pc, #256]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1ee      	bne.n	8001b38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b60:	4b3b      	ldr	r3, [pc, #236]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	4a3a      	ldr	r2, [pc, #232]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80ad 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b76:	4b36      	ldr	r3, [pc, #216]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d060      	beq.n	8001c44 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d145      	bne.n	8001c16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b33      	ldr	r3, [pc, #204]	@ (8001c58 <HAL_RCC_OscConfig+0x4b4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7fe ffa0 	bl	8000ad4 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7fe ff9c 	bl	8000ad4 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e093      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	4b29      	ldr	r3, [pc, #164]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69da      	ldr	r2, [r3, #28]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc4:	019b      	lsls	r3, r3, #6
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bcc:	085b      	lsrs	r3, r3, #1
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd8:	061b      	lsls	r3, r3, #24
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be0:	071b      	lsls	r3, r3, #28
 8001be2:	491b      	ldr	r1, [pc, #108]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <HAL_RCC_OscConfig+0x4b4>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bee:	f7fe ff71 	bl	8000ad4 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7fe ff6d 	bl	8000ad4 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e064      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x452>
 8001c14:	e05c      	b.n	8001cd0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <HAL_RCC_OscConfig+0x4b4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7fe ff5a 	bl	8000ad4 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7fe ff56 	bl	8000ad4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e04d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c36:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x480>
 8001c42:	e045      	b.n	8001cd0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e040      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000
 8001c58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cdc <HAL_RCC_OscConfig+0x538>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d030      	beq.n	8001ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d129      	bne.n	8001ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d122      	bne.n	8001ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d119      	bne.n	8001ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca2:	085b      	lsrs	r3, r3, #1
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d10f      	bne.n	8001ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800

08001ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e041      	b.n	8001d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f839 	bl	8001d7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f000 f9c0 	bl	80020a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d001      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e04e      	b.n	8001e4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a23      	ldr	r2, [pc, #140]	@ (8001e58 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d022      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd6:	d01d      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8001e5c <HAL_TIM_Base_Start_IT+0xc8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d018      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e60 <HAL_TIM_Base_Start_IT+0xcc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d013      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e64 <HAL_TIM_Base_Start_IT+0xd0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00e      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8001e68 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d009      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a19      	ldr	r2, [pc, #100]	@ (8001e6c <HAL_TIM_Base_Start_IT+0xd8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d004      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a18      	ldr	r2, [pc, #96]	@ (8001e70 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d111      	bne.n	8001e38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d010      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0201 	orr.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e36:	e007      	b.n	8001e48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	40000800 	.word	0x40000800
 8001e64:	40000c00 	.word	0x40000c00
 8001e68:	40010400 	.word	0x40010400
 8001e6c:	40014000 	.word	0x40014000
 8001e70:	40001800 	.word	0x40001800

08001e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d020      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01b      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0202 	mvn.w	r2, #2
 8001ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f8d2 	bl	8002068 <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8c4 	bl	8002054 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f8d5 	bl	800207c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d020      	beq.n	8001f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01b      	beq.n	8001f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0204 	mvn.w	r2, #4
 8001ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f8ac 	bl	8002068 <HAL_TIM_IC_CaptureCallback>
 8001f10:	e005      	b.n	8001f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f89e 	bl	8002054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f8af 	bl	800207c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d020      	beq.n	8001f70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01b      	beq.n	8001f70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0208 	mvn.w	r2, #8
 8001f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2204      	movs	r2, #4
 8001f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f886 	bl	8002068 <HAL_TIM_IC_CaptureCallback>
 8001f5c:	e005      	b.n	8001f6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f878 	bl	8002054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f889 	bl	800207c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d020      	beq.n	8001fbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01b      	beq.n	8001fbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0210 	mvn.w	r2, #16
 8001f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2208      	movs	r2, #8
 8001f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f860 	bl	8002068 <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f852 	bl	8002054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f863 	bl	800207c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00c      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0201 	mvn.w	r2, #1
 8001fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fbda 	bl	8000794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00c      	beq.n	8002004 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f906 	bl	8002210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00c      	beq.n	8002028 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002014:	2b00      	cmp	r3, #0
 8002016:	d007      	beq.n	8002028 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f834 	bl	8002090 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00c      	beq.n	800204c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f003 0320 	and.w	r3, r3, #32
 8002038:	2b00      	cmp	r3, #0
 800203a:	d007      	beq.n	800204c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0220 	mvn.w	r2, #32
 8002044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f8d8 	bl	80021fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a46      	ldr	r2, [pc, #280]	@ (80021d0 <TIM_Base_SetConfig+0x12c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d013      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020c2:	d00f      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a43      	ldr	r2, [pc, #268]	@ (80021d4 <TIM_Base_SetConfig+0x130>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00b      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a42      	ldr	r2, [pc, #264]	@ (80021d8 <TIM_Base_SetConfig+0x134>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d007      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a41      	ldr	r2, [pc, #260]	@ (80021dc <TIM_Base_SetConfig+0x138>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d003      	beq.n	80020e4 <TIM_Base_SetConfig+0x40>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a40      	ldr	r2, [pc, #256]	@ (80021e0 <TIM_Base_SetConfig+0x13c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d108      	bne.n	80020f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a35      	ldr	r2, [pc, #212]	@ (80021d0 <TIM_Base_SetConfig+0x12c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d02b      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002104:	d027      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a32      	ldr	r2, [pc, #200]	@ (80021d4 <TIM_Base_SetConfig+0x130>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d023      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a31      	ldr	r2, [pc, #196]	@ (80021d8 <TIM_Base_SetConfig+0x134>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01f      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a30      	ldr	r2, [pc, #192]	@ (80021dc <TIM_Base_SetConfig+0x138>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d01b      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a2f      	ldr	r2, [pc, #188]	@ (80021e0 <TIM_Base_SetConfig+0x13c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d017      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2e      	ldr	r2, [pc, #184]	@ (80021e4 <TIM_Base_SetConfig+0x140>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a2d      	ldr	r2, [pc, #180]	@ (80021e8 <TIM_Base_SetConfig+0x144>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00f      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a2c      	ldr	r2, [pc, #176]	@ (80021ec <TIM_Base_SetConfig+0x148>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00b      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a2b      	ldr	r2, [pc, #172]	@ (80021f0 <TIM_Base_SetConfig+0x14c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a2a      	ldr	r2, [pc, #168]	@ (80021f4 <TIM_Base_SetConfig+0x150>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d003      	beq.n	8002156 <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a29      	ldr	r2, [pc, #164]	@ (80021f8 <TIM_Base_SetConfig+0x154>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d108      	bne.n	8002168 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800215c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a10      	ldr	r2, [pc, #64]	@ (80021d0 <TIM_Base_SetConfig+0x12c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d003      	beq.n	800219c <TIM_Base_SetConfig+0xf8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a12      	ldr	r2, [pc, #72]	@ (80021e0 <TIM_Base_SetConfig+0x13c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d103      	bne.n	80021a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d105      	bne.n	80021c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f023 0201 	bic.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	611a      	str	r2, [r3, #16]
  }
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40010000 	.word	0x40010000
 80021d4:	40000400 	.word	0x40000400
 80021d8:	40000800 	.word	0x40000800
 80021dc:	40000c00 	.word	0x40000c00
 80021e0:	40010400 	.word	0x40010400
 80021e4:	40014000 	.word	0x40014000
 80021e8:	40014400 	.word	0x40014400
 80021ec:	40014800 	.word	0x40014800
 80021f0:	40001800 	.word	0x40001800
 80021f4:	40001c00 	.word	0x40001c00
 80021f8:	40002000 	.word	0x40002000

080021fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e042      	b.n	80022bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d106      	bne.n	8002250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7fe fae6 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2224      	movs	r2, #36	@ 0x24
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f82b 	bl	80022c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800227c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695a      	ldr	r2, [r3, #20]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800228c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800229c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c8:	b0c0      	sub	sp, #256	@ 0x100
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e0:	68d9      	ldr	r1, [r3, #12]
 80022e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	ea40 0301 	orr.w	r3, r0, r1
 80022ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	431a      	orrs	r2, r3
 8002304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800231c:	f021 010c 	bic.w	r1, r1, #12
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800232a:	430b      	orrs	r3, r1
 800232c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800232e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800233a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800233e:	6999      	ldr	r1, [r3, #24]
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	ea40 0301 	orr.w	r3, r0, r1
 800234a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b8f      	ldr	r3, [pc, #572]	@ (8002590 <UART_SetConfig+0x2cc>)
 8002354:	429a      	cmp	r2, r3
 8002356:	d005      	beq.n	8002364 <UART_SetConfig+0xa0>
 8002358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4b8d      	ldr	r3, [pc, #564]	@ (8002594 <UART_SetConfig+0x2d0>)
 8002360:	429a      	cmp	r2, r3
 8002362:	d104      	bne.n	800236e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002364:	f7fe ffa8 	bl	80012b8 <HAL_RCC_GetPCLK2Freq>
 8002368:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800236c:	e003      	b.n	8002376 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800236e:	f7fe ff8f 	bl	8001290 <HAL_RCC_GetPCLK1Freq>
 8002372:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002380:	f040 810c 	bne.w	800259c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002388:	2200      	movs	r2, #0
 800238a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800238e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002392:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002396:	4622      	mov	r2, r4
 8002398:	462b      	mov	r3, r5
 800239a:	1891      	adds	r1, r2, r2
 800239c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800239e:	415b      	adcs	r3, r3
 80023a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023a6:	4621      	mov	r1, r4
 80023a8:	eb12 0801 	adds.w	r8, r2, r1
 80023ac:	4629      	mov	r1, r5
 80023ae:	eb43 0901 	adc.w	r9, r3, r1
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023c6:	4690      	mov	r8, r2
 80023c8:	4699      	mov	r9, r3
 80023ca:	4623      	mov	r3, r4
 80023cc:	eb18 0303 	adds.w	r3, r8, r3
 80023d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80023d4:	462b      	mov	r3, r5
 80023d6:	eb49 0303 	adc.w	r3, r9, r3
 80023da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80023de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80023ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80023ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80023f2:	460b      	mov	r3, r1
 80023f4:	18db      	adds	r3, r3, r3
 80023f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80023f8:	4613      	mov	r3, r2
 80023fa:	eb42 0303 	adc.w	r3, r2, r3
 80023fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002400:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002404:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002408:	f7fd ff02 	bl	8000210 <__aeabi_uldivmod>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4b61      	ldr	r3, [pc, #388]	@ (8002598 <UART_SetConfig+0x2d4>)
 8002412:	fba3 2302 	umull	r2, r3, r3, r2
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	011c      	lsls	r4, r3, #4
 800241a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800241e:	2200      	movs	r2, #0
 8002420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002424:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002428:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800242c:	4642      	mov	r2, r8
 800242e:	464b      	mov	r3, r9
 8002430:	1891      	adds	r1, r2, r2
 8002432:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002434:	415b      	adcs	r3, r3
 8002436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002438:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800243c:	4641      	mov	r1, r8
 800243e:	eb12 0a01 	adds.w	sl, r2, r1
 8002442:	4649      	mov	r1, r9
 8002444:	eb43 0b01 	adc.w	fp, r3, r1
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002454:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800245c:	4692      	mov	sl, r2
 800245e:	469b      	mov	fp, r3
 8002460:	4643      	mov	r3, r8
 8002462:	eb1a 0303 	adds.w	r3, sl, r3
 8002466:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800246a:	464b      	mov	r3, r9
 800246c:	eb4b 0303 	adc.w	r3, fp, r3
 8002470:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002480:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002484:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002488:	460b      	mov	r3, r1
 800248a:	18db      	adds	r3, r3, r3
 800248c:	643b      	str	r3, [r7, #64]	@ 0x40
 800248e:	4613      	mov	r3, r2
 8002490:	eb42 0303 	adc.w	r3, r2, r3
 8002494:	647b      	str	r3, [r7, #68]	@ 0x44
 8002496:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800249a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800249e:	f7fd feb7 	bl	8000210 <__aeabi_uldivmod>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002598 <UART_SetConfig+0x2d4>)
 80024aa:	fba3 2301 	umull	r2, r3, r3, r1
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2264      	movs	r2, #100	@ 0x64
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	1acb      	subs	r3, r1, r3
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80024be:	4b36      	ldr	r3, [pc, #216]	@ (8002598 <UART_SetConfig+0x2d4>)
 80024c0:	fba3 2302 	umull	r2, r3, r3, r2
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80024cc:	441c      	add	r4, r3
 80024ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024d2:	2200      	movs	r2, #0
 80024d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80024dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80024e0:	4642      	mov	r2, r8
 80024e2:	464b      	mov	r3, r9
 80024e4:	1891      	adds	r1, r2, r2
 80024e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024e8:	415b      	adcs	r3, r3
 80024ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80024f0:	4641      	mov	r1, r8
 80024f2:	1851      	adds	r1, r2, r1
 80024f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80024f6:	4649      	mov	r1, r9
 80024f8:	414b      	adcs	r3, r1
 80024fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002508:	4659      	mov	r1, fp
 800250a:	00cb      	lsls	r3, r1, #3
 800250c:	4651      	mov	r1, sl
 800250e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002512:	4651      	mov	r1, sl
 8002514:	00ca      	lsls	r2, r1, #3
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	4603      	mov	r3, r0
 800251c:	4642      	mov	r2, r8
 800251e:	189b      	adds	r3, r3, r2
 8002520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002524:	464b      	mov	r3, r9
 8002526:	460a      	mov	r2, r1
 8002528:	eb42 0303 	adc.w	r3, r2, r3
 800252c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800253c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002544:	460b      	mov	r3, r1
 8002546:	18db      	adds	r3, r3, r3
 8002548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800254a:	4613      	mov	r3, r2
 800254c:	eb42 0303 	adc.w	r3, r2, r3
 8002550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002556:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800255a:	f7fd fe59 	bl	8000210 <__aeabi_uldivmod>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <UART_SetConfig+0x2d4>)
 8002564:	fba3 1302 	umull	r1, r3, r3, r2
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	2164      	movs	r1, #100	@ 0x64
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	3332      	adds	r3, #50	@ 0x32
 8002576:	4a08      	ldr	r2, [pc, #32]	@ (8002598 <UART_SetConfig+0x2d4>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	f003 0207 	and.w	r2, r3, #7
 8002582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4422      	add	r2, r4
 800258a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800258c:	e106      	b.n	800279c <UART_SetConfig+0x4d8>
 800258e:	bf00      	nop
 8002590:	40011000 	.word	0x40011000
 8002594:	40011400 	.word	0x40011400
 8002598:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800259c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025a0:	2200      	movs	r2, #0
 80025a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80025ae:	4642      	mov	r2, r8
 80025b0:	464b      	mov	r3, r9
 80025b2:	1891      	adds	r1, r2, r2
 80025b4:	6239      	str	r1, [r7, #32]
 80025b6:	415b      	adcs	r3, r3
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025be:	4641      	mov	r1, r8
 80025c0:	1854      	adds	r4, r2, r1
 80025c2:	4649      	mov	r1, r9
 80025c4:	eb43 0501 	adc.w	r5, r3, r1
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	00eb      	lsls	r3, r5, #3
 80025d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025d6:	00e2      	lsls	r2, r4, #3
 80025d8:	4614      	mov	r4, r2
 80025da:	461d      	mov	r5, r3
 80025dc:	4643      	mov	r3, r8
 80025de:	18e3      	adds	r3, r4, r3
 80025e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025e4:	464b      	mov	r3, r9
 80025e6:	eb45 0303 	adc.w	r3, r5, r3
 80025ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800260a:	4629      	mov	r1, r5
 800260c:	008b      	lsls	r3, r1, #2
 800260e:	4621      	mov	r1, r4
 8002610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002614:	4621      	mov	r1, r4
 8002616:	008a      	lsls	r2, r1, #2
 8002618:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800261c:	f7fd fdf8 	bl	8000210 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4b60      	ldr	r3, [pc, #384]	@ (80027a8 <UART_SetConfig+0x4e4>)
 8002626:	fba3 2302 	umull	r2, r3, r3, r2
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	011c      	lsls	r4, r3, #4
 800262e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002632:	2200      	movs	r2, #0
 8002634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002638:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800263c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002640:	4642      	mov	r2, r8
 8002642:	464b      	mov	r3, r9
 8002644:	1891      	adds	r1, r2, r2
 8002646:	61b9      	str	r1, [r7, #24]
 8002648:	415b      	adcs	r3, r3
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002650:	4641      	mov	r1, r8
 8002652:	1851      	adds	r1, r2, r1
 8002654:	6139      	str	r1, [r7, #16]
 8002656:	4649      	mov	r1, r9
 8002658:	414b      	adcs	r3, r1
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002668:	4659      	mov	r1, fp
 800266a:	00cb      	lsls	r3, r1, #3
 800266c:	4651      	mov	r1, sl
 800266e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002672:	4651      	mov	r1, sl
 8002674:	00ca      	lsls	r2, r1, #3
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	4603      	mov	r3, r0
 800267c:	4642      	mov	r2, r8
 800267e:	189b      	adds	r3, r3, r2
 8002680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002684:	464b      	mov	r3, r9
 8002686:	460a      	mov	r2, r1
 8002688:	eb42 0303 	adc.w	r3, r2, r3
 800268c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	67bb      	str	r3, [r7, #120]	@ 0x78
 800269a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80026a8:	4649      	mov	r1, r9
 80026aa:	008b      	lsls	r3, r1, #2
 80026ac:	4641      	mov	r1, r8
 80026ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026b2:	4641      	mov	r1, r8
 80026b4:	008a      	lsls	r2, r1, #2
 80026b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80026ba:	f7fd fda9 	bl	8000210 <__aeabi_uldivmod>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4611      	mov	r1, r2
 80026c4:	4b38      	ldr	r3, [pc, #224]	@ (80027a8 <UART_SetConfig+0x4e4>)
 80026c6:	fba3 2301 	umull	r2, r3, r3, r1
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2264      	movs	r2, #100	@ 0x64
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	1acb      	subs	r3, r1, r3
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	3332      	adds	r3, #50	@ 0x32
 80026d8:	4a33      	ldr	r2, [pc, #204]	@ (80027a8 <UART_SetConfig+0x4e4>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026e4:	441c      	add	r4, r3
 80026e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ea:	2200      	movs	r2, #0
 80026ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80026ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80026f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80026f4:	4642      	mov	r2, r8
 80026f6:	464b      	mov	r3, r9
 80026f8:	1891      	adds	r1, r2, r2
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	415b      	adcs	r3, r3
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002704:	4641      	mov	r1, r8
 8002706:	1851      	adds	r1, r2, r1
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	4649      	mov	r1, r9
 800270c:	414b      	adcs	r3, r1
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800271c:	4659      	mov	r1, fp
 800271e:	00cb      	lsls	r3, r1, #3
 8002720:	4651      	mov	r1, sl
 8002722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002726:	4651      	mov	r1, sl
 8002728:	00ca      	lsls	r2, r1, #3
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	4603      	mov	r3, r0
 8002730:	4642      	mov	r2, r8
 8002732:	189b      	adds	r3, r3, r2
 8002734:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002736:	464b      	mov	r3, r9
 8002738:	460a      	mov	r2, r1
 800273a:	eb42 0303 	adc.w	r3, r2, r3
 800273e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	663b      	str	r3, [r7, #96]	@ 0x60
 800274a:	667a      	str	r2, [r7, #100]	@ 0x64
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002758:	4649      	mov	r1, r9
 800275a:	008b      	lsls	r3, r1, #2
 800275c:	4641      	mov	r1, r8
 800275e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002762:	4641      	mov	r1, r8
 8002764:	008a      	lsls	r2, r1, #2
 8002766:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800276a:	f7fd fd51 	bl	8000210 <__aeabi_uldivmod>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4b0d      	ldr	r3, [pc, #52]	@ (80027a8 <UART_SetConfig+0x4e4>)
 8002774:	fba3 1302 	umull	r1, r3, r3, r2
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	2164      	movs	r1, #100	@ 0x64
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	3332      	adds	r3, #50	@ 0x32
 8002786:	4a08      	ldr	r2, [pc, #32]	@ (80027a8 <UART_SetConfig+0x4e4>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	095b      	lsrs	r3, r3, #5
 800278e:	f003 020f 	and.w	r2, r3, #15
 8002792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4422      	add	r2, r4
 800279a:	609a      	str	r2, [r3, #8]
}
 800279c:	bf00      	nop
 800279e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027a2:	46bd      	mov	sp, r7
 80027a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a8:	51eb851f 	.word	0x51eb851f

080027ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f103 0208 	add.w	r2, r3, #8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f103 0208 	add.w	r2, r3, #8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f103 0208 	add.w	r2, r3, #8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	601a      	str	r2, [r3, #0]
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6892      	ldr	r2, [r2, #8]
 8002864:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6852      	ldr	r2, [r2, #4]
 800286e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	d103      	bne.n	8002882 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	1e5a      	subs	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b08e      	sub	sp, #56	@ 0x38
 80028a6:	af04      	add	r7, sp, #16
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80028b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10b      	bne.n	80028ce <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	e7fd      	b.n	80028ca <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80028ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10b      	bne.n	80028ec <xTaskCreateStatic+0x4a>
	__asm volatile
 80028d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d8:	f383 8811 	msr	BASEPRI, r3
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	f3bf 8f4f 	dsb	sy
 80028e4:	61fb      	str	r3, [r7, #28]
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028ec:	2354      	movs	r3, #84	@ 0x54
 80028ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b54      	cmp	r3, #84	@ 0x54
 80028f4:	d00b      	beq.n	800290e <xTaskCreateStatic+0x6c>
	__asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	61bb      	str	r3, [r7, #24]
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	e7fd      	b.n	800290a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800290e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01e      	beq.n	8002954 <xTaskCreateStatic+0xb2>
 8002916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01b      	beq.n	8002954 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800291c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002924:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	2202      	movs	r2, #2
 800292a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800292e:	2300      	movs	r3, #0
 8002930:	9303      	str	r3, [sp, #12]
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	9302      	str	r3, [sp, #8]
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	9301      	str	r3, [sp, #4]
 800293c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68b9      	ldr	r1, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f850 	bl	80029ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800294c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800294e:	f000 f8d5 	bl	8002afc <prvAddNewTaskToReadyList>
 8002952:	e001      	b.n	8002958 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002958:	697b      	ldr	r3, [r7, #20]
	}
 800295a:	4618      	mov	r0, r3
 800295c:	3728      	adds	r7, #40	@ 0x28
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002962:	b580      	push	{r7, lr}
 8002964:	b08c      	sub	sp, #48	@ 0x30
 8002966:	af04      	add	r7, sp, #16
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	4613      	mov	r3, r2
 8002970:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fe36 	bl	80035e8 <pvPortMalloc>
 800297c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00e      	beq.n	80029a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002984:	2054      	movs	r0, #84	@ 0x54
 8002986:	f000 fe2f 	bl	80035e8 <pvPortMalloc>
 800298a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	631a      	str	r2, [r3, #48]	@ 0x30
 8002998:	e005      	b.n	80029a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f000 fef2 	bl	8003784 <vPortFree>
 80029a0:	e001      	b.n	80029a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d017      	beq.n	80029dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	2300      	movs	r3, #0
 80029b8:	9303      	str	r3, [sp, #12]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	9302      	str	r3, [sp, #8]
 80029be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f80e 	bl	80029ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029d0:	69f8      	ldr	r0, [r7, #28]
 80029d2:	f000 f893 	bl	8002afc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029d6:	2301      	movs	r3, #1
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	e002      	b.n	80029e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029e2:	69bb      	ldr	r3, [r7, #24]
	}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a04:	3b01      	subs	r3, #1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f023 0307 	bic.w	r3, r3, #7
 8002a12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a22:	f383 8811 	msr	BASEPRI, r3
 8002a26:	f3bf 8f6f 	isb	sy
 8002a2a:	f3bf 8f4f 	dsb	sy
 8002a2e:	617b      	str	r3, [r7, #20]
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	e7fd      	b.n	8002a32 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01f      	beq.n	8002a7c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	e012      	b.n	8002a68 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	7819      	ldrb	r1, [r3, #0]
 8002a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	4413      	add	r3, r2
 8002a50:	3334      	adds	r3, #52	@ 0x34
 8002a52:	460a      	mov	r2, r1
 8002a54:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d006      	beq.n	8002a70 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3301      	adds	r3, #1
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b0f      	cmp	r3, #15
 8002a6c:	d9e9      	bls.n	8002a42 <prvInitialiseNewTask+0x56>
 8002a6e:	e000      	b.n	8002a72 <prvInitialiseNewTask+0x86>
			{
				break;
 8002a70:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a7a:	e003      	b.n	8002a84 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d901      	bls.n	8002a8e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a8a:	2306      	movs	r3, #6
 8002a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a92:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fea1 	bl	80027ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aac:	3318      	adds	r3, #24
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fe9c 	bl	80027ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ab8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abc:	f1c3 0207 	rsb	r2, r3, #7
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ac8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002acc:	2200      	movs	r2, #0
 8002ace:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	68f9      	ldr	r1, [r7, #12]
 8002adc:	69b8      	ldr	r0, [r7, #24]
 8002ade:	f000 fb71 	bl	80031c4 <pxPortInitialiseStack>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002af2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002af4:	bf00      	nop
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b04:	f000 fc90 	bl	8003428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b08:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb4 <prvAddNewTaskToReadyList+0xb8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	4a29      	ldr	r2, [pc, #164]	@ (8002bb4 <prvAddNewTaskToReadyList+0xb8>)
 8002b10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b12:	4b29      	ldr	r3, [pc, #164]	@ (8002bb8 <prvAddNewTaskToReadyList+0xbc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b1a:	4a27      	ldr	r2, [pc, #156]	@ (8002bb8 <prvAddNewTaskToReadyList+0xbc>)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b20:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <prvAddNewTaskToReadyList+0xb8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d110      	bne.n	8002b4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b28:	f000 fa8e 	bl	8003048 <prvInitialiseTaskLists>
 8002b2c:	e00d      	b.n	8002b4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b2e:	4b23      	ldr	r3, [pc, #140]	@ (8002bbc <prvAddNewTaskToReadyList+0xc0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b36:	4b20      	ldr	r3, [pc, #128]	@ (8002bb8 <prvAddNewTaskToReadyList+0xbc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d802      	bhi.n	8002b4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b44:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb8 <prvAddNewTaskToReadyList+0xbc>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc0 <prvAddNewTaskToReadyList+0xc4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc0 <prvAddNewTaskToReadyList+0xc4>)
 8002b52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	2201      	movs	r2, #1
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	4b19      	ldr	r3, [pc, #100]	@ (8002bc4 <prvAddNewTaskToReadyList+0xc8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	4a18      	ldr	r2, [pc, #96]	@ (8002bc4 <prvAddNewTaskToReadyList+0xc8>)
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4a15      	ldr	r2, [pc, #84]	@ (8002bc8 <prvAddNewTaskToReadyList+0xcc>)
 8002b74:	441a      	add	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	f7ff fe42 	bl	8002806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b82:	f000 fc83 	bl	800348c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b86:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <prvAddNewTaskToReadyList+0xc0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00e      	beq.n	8002bac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb8 <prvAddNewTaskToReadyList+0xbc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d207      	bcs.n	8002bac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <prvAddNewTaskToReadyList+0xd0>)
 8002b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000418 	.word	0x20000418
 8002bb8:	20000318 	.word	0x20000318
 8002bbc:	20000424 	.word	0x20000424
 8002bc0:	20000434 	.word	0x20000434
 8002bc4:	20000420 	.word	0x20000420
 8002bc8:	2000031c 	.word	0x2000031c
 8002bcc:	e000ed04 	.word	0xe000ed04

08002bd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	@ 0x28
 8002bd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002bde:	463a      	mov	r2, r7
 8002be0:	1d39      	adds	r1, r7, #4
 8002be2:	f107 0308 	add.w	r3, r7, #8
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fc8a 	bl	8000500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002bec:	6839      	ldr	r1, [r7, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	9202      	str	r2, [sp, #8]
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	460a      	mov	r2, r1
 8002bfe:	491f      	ldr	r1, [pc, #124]	@ (8002c7c <vTaskStartScheduler+0xac>)
 8002c00:	481f      	ldr	r0, [pc, #124]	@ (8002c80 <vTaskStartScheduler+0xb0>)
 8002c02:	f7ff fe4e 	bl	80028a2 <xTaskCreateStatic>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4a1e      	ldr	r2, [pc, #120]	@ (8002c84 <vTaskStartScheduler+0xb4>)
 8002c0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c84 <vTaskStartScheduler+0xb4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c14:	2301      	movs	r3, #1
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	e001      	b.n	8002c1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d116      	bne.n	8002c52 <vTaskStartScheduler+0x82>
	__asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	613b      	str	r3, [r7, #16]
}
 8002c36:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c38:	4b13      	ldr	r3, [pc, #76]	@ (8002c88 <vTaskStartScheduler+0xb8>)
 8002c3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002c40:	4b12      	ldr	r3, [pc, #72]	@ (8002c8c <vTaskStartScheduler+0xbc>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c46:	4b12      	ldr	r3, [pc, #72]	@ (8002c90 <vTaskStartScheduler+0xc0>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002c4c:	f000 fb48 	bl	80032e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002c50:	e00f      	b.n	8002c72 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c58:	d10b      	bne.n	8002c72 <vTaskStartScheduler+0xa2>
	__asm volatile
 8002c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	60fb      	str	r3, [r7, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	e7fd      	b.n	8002c6e <vTaskStartScheduler+0x9e>
}
 8002c72:	bf00      	nop
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	08003a3c 	.word	0x08003a3c
 8002c80:	08003019 	.word	0x08003019
 8002c84:	2000043c 	.word	0x2000043c
 8002c88:	20000438 	.word	0x20000438
 8002c8c:	20000424 	.word	0x20000424
 8002c90:	2000041c 	.word	0x2000041c

08002c94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002c98:	4b04      	ldr	r3, [pc, #16]	@ (8002cac <vTaskSuspendAll+0x18>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	4a03      	ldr	r2, [pc, #12]	@ (8002cac <vTaskSuspendAll+0x18>)
 8002ca0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002ca2:	bf00      	nop
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	20000440 	.word	0x20000440

08002cb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002cbe:	4b42      	ldr	r3, [pc, #264]	@ (8002dc8 <xTaskResumeAll+0x118>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10b      	bne.n	8002cde <xTaskResumeAll+0x2e>
	__asm volatile
 8002cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cca:	f383 8811 	msr	BASEPRI, r3
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	603b      	str	r3, [r7, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	e7fd      	b.n	8002cda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002cde:	f000 fba3 	bl	8003428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ce2:	4b39      	ldr	r3, [pc, #228]	@ (8002dc8 <xTaskResumeAll+0x118>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	4a37      	ldr	r2, [pc, #220]	@ (8002dc8 <xTaskResumeAll+0x118>)
 8002cea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cec:	4b36      	ldr	r3, [pc, #216]	@ (8002dc8 <xTaskResumeAll+0x118>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d161      	bne.n	8002db8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002cf4:	4b35      	ldr	r3, [pc, #212]	@ (8002dcc <xTaskResumeAll+0x11c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d05d      	beq.n	8002db8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cfc:	e02e      	b.n	8002d5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cfe:	4b34      	ldr	r3, [pc, #208]	@ (8002dd0 <xTaskResumeAll+0x120>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3318      	adds	r3, #24
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fd9f 	bl	800284e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3304      	adds	r3, #4
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fd9a 	bl	800284e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	2201      	movs	r2, #1
 8002d20:	409a      	lsls	r2, r3
 8002d22:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd4 <xTaskResumeAll+0x124>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd4 <xTaskResumeAll+0x124>)
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4a27      	ldr	r2, [pc, #156]	@ (8002dd8 <xTaskResumeAll+0x128>)
 8002d3a:	441a      	add	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f7ff fd5f 	bl	8002806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d4c:	4b23      	ldr	r3, [pc, #140]	@ (8002ddc <xTaskResumeAll+0x12c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002d56:	4b22      	ldr	r3, [pc, #136]	@ (8002de0 <xTaskResumeAll+0x130>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd0 <xTaskResumeAll+0x120>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1cc      	bne.n	8002cfe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002d6a:	f000 fa0b 	bl	8003184 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002de4 <xTaskResumeAll+0x134>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d010      	beq.n	8002d9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002d7a:	f000 f837 	bl	8002dec <xTaskIncrementTick>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002d84:	4b16      	ldr	r3, [pc, #88]	@ (8002de0 <xTaskResumeAll+0x130>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f1      	bne.n	8002d7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002d96:	4b13      	ldr	r3, [pc, #76]	@ (8002de4 <xTaskResumeAll+0x134>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002d9c:	4b10      	ldr	r3, [pc, #64]	@ (8002de0 <xTaskResumeAll+0x130>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d009      	beq.n	8002db8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002da4:	2301      	movs	r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002da8:	4b0f      	ldr	r3, [pc, #60]	@ (8002de8 <xTaskResumeAll+0x138>)
 8002daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002db8:	f000 fb68 	bl	800348c <vPortExitCritical>

	return xAlreadyYielded;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000440 	.word	0x20000440
 8002dcc:	20000418 	.word	0x20000418
 8002dd0:	200003d8 	.word	0x200003d8
 8002dd4:	20000420 	.word	0x20000420
 8002dd8:	2000031c 	.word	0x2000031c
 8002ddc:	20000318 	.word	0x20000318
 8002de0:	2000042c 	.word	0x2000042c
 8002de4:	20000428 	.word	0x20000428
 8002de8:	e000ed04 	.word	0xe000ed04

08002dec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002df6:	4b4f      	ldr	r3, [pc, #316]	@ (8002f34 <xTaskIncrementTick+0x148>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f040 808f 	bne.w	8002f1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e00:	4b4d      	ldr	r3, [pc, #308]	@ (8002f38 <xTaskIncrementTick+0x14c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3301      	adds	r3, #1
 8002e06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e08:	4a4b      	ldr	r2, [pc, #300]	@ (8002f38 <xTaskIncrementTick+0x14c>)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d121      	bne.n	8002e58 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e14:	4b49      	ldr	r3, [pc, #292]	@ (8002f3c <xTaskIncrementTick+0x150>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	603b      	str	r3, [r7, #0]
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	e7fd      	b.n	8002e32 <xTaskIncrementTick+0x46>
 8002e36:	4b41      	ldr	r3, [pc, #260]	@ (8002f3c <xTaskIncrementTick+0x150>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	4b40      	ldr	r3, [pc, #256]	@ (8002f40 <xTaskIncrementTick+0x154>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a3e      	ldr	r2, [pc, #248]	@ (8002f3c <xTaskIncrementTick+0x150>)
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4a3e      	ldr	r2, [pc, #248]	@ (8002f40 <xTaskIncrementTick+0x154>)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f44 <xTaskIncrementTick+0x158>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	4a3c      	ldr	r2, [pc, #240]	@ (8002f44 <xTaskIncrementTick+0x158>)
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	f000 f996 	bl	8003184 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002e58:	4b3b      	ldr	r3, [pc, #236]	@ (8002f48 <xTaskIncrementTick+0x15c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d348      	bcc.n	8002ef4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e62:	4b36      	ldr	r3, [pc, #216]	@ (8002f3c <xTaskIncrementTick+0x150>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e6c:	4b36      	ldr	r3, [pc, #216]	@ (8002f48 <xTaskIncrementTick+0x15c>)
 8002e6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e72:	601a      	str	r2, [r3, #0]
					break;
 8002e74:	e03e      	b.n	8002ef4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e76:	4b31      	ldr	r3, [pc, #196]	@ (8002f3c <xTaskIncrementTick+0x150>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d203      	bcs.n	8002e96 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002e8e:	4a2e      	ldr	r2, [pc, #184]	@ (8002f48 <xTaskIncrementTick+0x15c>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e94:	e02e      	b.n	8002ef4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fcd7 	bl	800284e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d004      	beq.n	8002eb2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	3318      	adds	r3, #24
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fcce 	bl	800284e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	4b24      	ldr	r3, [pc, #144]	@ (8002f4c <xTaskIncrementTick+0x160>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	4a22      	ldr	r2, [pc, #136]	@ (8002f4c <xTaskIncrementTick+0x160>)
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8002f50 <xTaskIncrementTick+0x164>)
 8002ed2:	441a      	add	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f7ff fc93 	bl	8002806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f54 <xTaskIncrementTick+0x168>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d3b9      	bcc.n	8002e62 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ef2:	e7b6      	b.n	8002e62 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ef4:	4b17      	ldr	r3, [pc, #92]	@ (8002f54 <xTaskIncrementTick+0x168>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002efa:	4915      	ldr	r1, [pc, #84]	@ (8002f50 <xTaskIncrementTick+0x164>)
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d901      	bls.n	8002f10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002f10:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <xTaskIncrementTick+0x16c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	e004      	b.n	8002f28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f5c <xTaskIncrementTick+0x170>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	4a0d      	ldr	r2, [pc, #52]	@ (8002f5c <xTaskIncrementTick+0x170>)
 8002f26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002f28:	697b      	ldr	r3, [r7, #20]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000440 	.word	0x20000440
 8002f38:	2000041c 	.word	0x2000041c
 8002f3c:	200003d0 	.word	0x200003d0
 8002f40:	200003d4 	.word	0x200003d4
 8002f44:	20000430 	.word	0x20000430
 8002f48:	20000438 	.word	0x20000438
 8002f4c:	20000420 	.word	0x20000420
 8002f50:	2000031c 	.word	0x2000031c
 8002f54:	20000318 	.word	0x20000318
 8002f58:	2000042c 	.word	0x2000042c
 8002f5c:	20000428 	.word	0x20000428

08002f60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f66:	4b27      	ldr	r3, [pc, #156]	@ (8003004 <vTaskSwitchContext+0xa4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002f6e:	4b26      	ldr	r3, [pc, #152]	@ (8003008 <vTaskSwitchContext+0xa8>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002f74:	e040      	b.n	8002ff8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002f76:	4b24      	ldr	r3, [pc, #144]	@ (8003008 <vTaskSwitchContext+0xa8>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f7c:	4b23      	ldr	r3, [pc, #140]	@ (800300c <vTaskSwitchContext+0xac>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
 8002f8c:	f1c3 031f 	rsb	r3, r3, #31
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	491f      	ldr	r1, [pc, #124]	@ (8003010 <vTaskSwitchContext+0xb0>)
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <vTaskSwitchContext+0x5e>
	__asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	607b      	str	r3, [r7, #4]
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	e7fd      	b.n	8002fba <vTaskSwitchContext+0x5a>
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4a11      	ldr	r2, [pc, #68]	@ (8003010 <vTaskSwitchContext+0xb0>)
 8002fca:	4413      	add	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	3308      	adds	r3, #8
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d104      	bne.n	8002fee <vTaskSwitchContext+0x8e>
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a07      	ldr	r2, [pc, #28]	@ (8003014 <vTaskSwitchContext+0xb4>)
 8002ff6:	6013      	str	r3, [r2, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	20000440 	.word	0x20000440
 8003008:	2000042c 	.word	0x2000042c
 800300c:	20000420 	.word	0x20000420
 8003010:	2000031c 	.word	0x2000031c
 8003014:	20000318 	.word	0x20000318

08003018 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003020:	f000 f852 	bl	80030c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003024:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <prvIdleTask+0x28>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d9f9      	bls.n	8003020 <prvIdleTask+0x8>
			{
				taskYIELD();
 800302c:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <prvIdleTask+0x2c>)
 800302e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800303c:	e7f0      	b.n	8003020 <prvIdleTask+0x8>
 800303e:	bf00      	nop
 8003040:	2000031c 	.word	0x2000031c
 8003044:	e000ed04 	.word	0xe000ed04

08003048 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800304e:	2300      	movs	r3, #0
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	e00c      	b.n	800306e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4a12      	ldr	r2, [pc, #72]	@ (80030a8 <prvInitialiseTaskLists+0x60>)
 8003060:	4413      	add	r3, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff fba2 	bl	80027ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3301      	adds	r3, #1
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b06      	cmp	r3, #6
 8003072:	d9ef      	bls.n	8003054 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003074:	480d      	ldr	r0, [pc, #52]	@ (80030ac <prvInitialiseTaskLists+0x64>)
 8003076:	f7ff fb99 	bl	80027ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800307a:	480d      	ldr	r0, [pc, #52]	@ (80030b0 <prvInitialiseTaskLists+0x68>)
 800307c:	f7ff fb96 	bl	80027ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003080:	480c      	ldr	r0, [pc, #48]	@ (80030b4 <prvInitialiseTaskLists+0x6c>)
 8003082:	f7ff fb93 	bl	80027ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003086:	480c      	ldr	r0, [pc, #48]	@ (80030b8 <prvInitialiseTaskLists+0x70>)
 8003088:	f7ff fb90 	bl	80027ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800308c:	480b      	ldr	r0, [pc, #44]	@ (80030bc <prvInitialiseTaskLists+0x74>)
 800308e:	f7ff fb8d 	bl	80027ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003092:	4b0b      	ldr	r3, [pc, #44]	@ (80030c0 <prvInitialiseTaskLists+0x78>)
 8003094:	4a05      	ldr	r2, [pc, #20]	@ (80030ac <prvInitialiseTaskLists+0x64>)
 8003096:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003098:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <prvInitialiseTaskLists+0x7c>)
 800309a:	4a05      	ldr	r2, [pc, #20]	@ (80030b0 <prvInitialiseTaskLists+0x68>)
 800309c:	601a      	str	r2, [r3, #0]
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2000031c 	.word	0x2000031c
 80030ac:	200003a8 	.word	0x200003a8
 80030b0:	200003bc 	.word	0x200003bc
 80030b4:	200003d8 	.word	0x200003d8
 80030b8:	200003ec 	.word	0x200003ec
 80030bc:	20000404 	.word	0x20000404
 80030c0:	200003d0 	.word	0x200003d0
 80030c4:	200003d4 	.word	0x200003d4

080030c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030ce:	e019      	b.n	8003104 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80030d0:	f000 f9aa 	bl	8003428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030d4:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <prvCheckTasksWaitingTermination+0x50>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3304      	adds	r3, #4
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fbb4 	bl	800284e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80030e6:	4b0d      	ldr	r3, [pc, #52]	@ (800311c <prvCheckTasksWaitingTermination+0x54>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	4a0b      	ldr	r2, [pc, #44]	@ (800311c <prvCheckTasksWaitingTermination+0x54>)
 80030ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <prvCheckTasksWaitingTermination+0x58>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003120 <prvCheckTasksWaitingTermination+0x58>)
 80030f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80030fa:	f000 f9c7 	bl	800348c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f810 	bl	8003124 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003104:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <prvCheckTasksWaitingTermination+0x58>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e1      	bne.n	80030d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200003ec 	.word	0x200003ec
 800311c:	20000418 	.word	0x20000418
 8003120:	20000400 	.word	0x20000400

08003124 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003132:	2b00      	cmp	r3, #0
 8003134:	d108      	bne.n	8003148 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fb22 	bl	8003784 <vPortFree>
				vPortFree( pxTCB );
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fb1f 	bl	8003784 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003146:	e019      	b.n	800317c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800314e:	2b01      	cmp	r3, #1
 8003150:	d103      	bne.n	800315a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fb16 	bl	8003784 <vPortFree>
	}
 8003158:	e010      	b.n	800317c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003160:	2b02      	cmp	r3, #2
 8003162:	d00b      	beq.n	800317c <prvDeleteTCB+0x58>
	__asm volatile
 8003164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	60fb      	str	r3, [r7, #12]
}
 8003176:	bf00      	nop
 8003178:	bf00      	nop
 800317a:	e7fd      	b.n	8003178 <prvDeleteTCB+0x54>
	}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800318a:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <prvResetNextTaskUnblockTime+0x38>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003194:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <prvResetNextTaskUnblockTime+0x3c>)
 8003196:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800319a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800319c:	e008      	b.n	80031b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800319e:	4b07      	ldr	r3, [pc, #28]	@ (80031bc <prvResetNextTaskUnblockTime+0x38>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a04      	ldr	r2, [pc, #16]	@ (80031c0 <prvResetNextTaskUnblockTime+0x3c>)
 80031ae:	6013      	str	r3, [r2, #0]
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	200003d0 	.word	0x200003d0
 80031c0:	20000438 	.word	0x20000438

080031c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	3b04      	subs	r3, #4
 80031d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3b04      	subs	r3, #4
 80031e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f023 0201 	bic.w	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3b04      	subs	r3, #4
 80031f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80031f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003228 <pxPortInitialiseStack+0x64>)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3b14      	subs	r3, #20
 80031fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3b04      	subs	r3, #4
 800320a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f06f 0202 	mvn.w	r2, #2
 8003212:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3b20      	subs	r3, #32
 8003218:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800321a:	68fb      	ldr	r3, [r7, #12]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	0800322d 	.word	0x0800322d

0800322c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003236:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <prvTaskExitError+0x58>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800323e:	d00b      	beq.n	8003258 <prvTaskExitError+0x2c>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	60fb      	str	r3, [r7, #12]
}
 8003252:	bf00      	nop
 8003254:	bf00      	nop
 8003256:	e7fd      	b.n	8003254 <prvTaskExitError+0x28>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	60bb      	str	r3, [r7, #8]
}
 800326a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800326c:	bf00      	nop
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0fc      	beq.n	800326e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	2000000c 	.word	0x2000000c
	...

08003290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003290:	4b07      	ldr	r3, [pc, #28]	@ (80032b0 <pxCurrentTCBConst2>)
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	6808      	ldr	r0, [r1, #0]
 8003296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329a:	f380 8809 	msr	PSP, r0
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f04f 0000 	mov.w	r0, #0
 80032a6:	f380 8811 	msr	BASEPRI, r0
 80032aa:	4770      	bx	lr
 80032ac:	f3af 8000 	nop.w

080032b0 <pxCurrentTCBConst2>:
 80032b0:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop

080032b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80032b8:	4808      	ldr	r0, [pc, #32]	@ (80032dc <prvPortStartFirstTask+0x24>)
 80032ba:	6800      	ldr	r0, [r0, #0]
 80032bc:	6800      	ldr	r0, [r0, #0]
 80032be:	f380 8808 	msr	MSP, r0
 80032c2:	f04f 0000 	mov.w	r0, #0
 80032c6:	f380 8814 	msr	CONTROL, r0
 80032ca:	b662      	cpsie	i
 80032cc:	b661      	cpsie	f
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	df00      	svc	0
 80032d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80032da:	bf00      	nop
 80032dc:	e000ed08 	.word	0xe000ed08

080032e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80032e6:	4b47      	ldr	r3, [pc, #284]	@ (8003404 <xPortStartScheduler+0x124>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a47      	ldr	r2, [pc, #284]	@ (8003408 <xPortStartScheduler+0x128>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d10b      	bne.n	8003308 <xPortStartScheduler+0x28>
	__asm volatile
 80032f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	613b      	str	r3, [r7, #16]
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003308:	4b3e      	ldr	r3, [pc, #248]	@ (8003404 <xPortStartScheduler+0x124>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a3f      	ldr	r2, [pc, #252]	@ (800340c <xPortStartScheduler+0x12c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d10b      	bne.n	800332a <xPortStartScheduler+0x4a>
	__asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	60fb      	str	r3, [r7, #12]
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	e7fd      	b.n	8003326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800332a:	4b39      	ldr	r3, [pc, #228]	@ (8003410 <xPortStartScheduler+0x130>)
 800332c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	22ff      	movs	r2, #255	@ 0xff
 800333a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4b31      	ldr	r3, [pc, #196]	@ (8003414 <xPortStartScheduler+0x134>)
 8003350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003352:	4b31      	ldr	r3, [pc, #196]	@ (8003418 <xPortStartScheduler+0x138>)
 8003354:	2207      	movs	r2, #7
 8003356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003358:	e009      	b.n	800336e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800335a:	4b2f      	ldr	r3, [pc, #188]	@ (8003418 <xPortStartScheduler+0x138>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3b01      	subs	r3, #1
 8003360:	4a2d      	ldr	r2, [pc, #180]	@ (8003418 <xPortStartScheduler+0x138>)
 8003362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	b2db      	uxtb	r3, r3
 800336c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003376:	2b80      	cmp	r3, #128	@ 0x80
 8003378:	d0ef      	beq.n	800335a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800337a:	4b27      	ldr	r3, [pc, #156]	@ (8003418 <xPortStartScheduler+0x138>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f1c3 0307 	rsb	r3, r3, #7
 8003382:	2b04      	cmp	r3, #4
 8003384:	d00b      	beq.n	800339e <xPortStartScheduler+0xbe>
	__asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	60bb      	str	r3, [r7, #8]
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	e7fd      	b.n	800339a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800339e:	4b1e      	ldr	r3, [pc, #120]	@ (8003418 <xPortStartScheduler+0x138>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	021b      	lsls	r3, r3, #8
 80033a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003418 <xPortStartScheduler+0x138>)
 80033a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <xPortStartScheduler+0x138>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033b0:	4a19      	ldr	r2, [pc, #100]	@ (8003418 <xPortStartScheduler+0x138>)
 80033b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80033bc:	4b17      	ldr	r3, [pc, #92]	@ (800341c <xPortStartScheduler+0x13c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a16      	ldr	r2, [pc, #88]	@ (800341c <xPortStartScheduler+0x13c>)
 80033c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80033c8:	4b14      	ldr	r3, [pc, #80]	@ (800341c <xPortStartScheduler+0x13c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a13      	ldr	r2, [pc, #76]	@ (800341c <xPortStartScheduler+0x13c>)
 80033ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80033d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80033d4:	f000 f8da 	bl	800358c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80033d8:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <xPortStartScheduler+0x140>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80033de:	f000 f8f9 	bl	80035d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80033e2:	4b10      	ldr	r3, [pc, #64]	@ (8003424 <xPortStartScheduler+0x144>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003424 <xPortStartScheduler+0x144>)
 80033e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80033ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80033ee:	f7ff ff63 	bl	80032b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80033f2:	f7ff fdb5 	bl	8002f60 <vTaskSwitchContext>
	prvTaskExitError();
 80033f6:	f7ff ff19 	bl	800322c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	e000ed00 	.word	0xe000ed00
 8003408:	410fc271 	.word	0x410fc271
 800340c:	410fc270 	.word	0x410fc270
 8003410:	e000e400 	.word	0xe000e400
 8003414:	20000444 	.word	0x20000444
 8003418:	20000448 	.word	0x20000448
 800341c:	e000ed20 	.word	0xe000ed20
 8003420:	2000000c 	.word	0x2000000c
 8003424:	e000ef34 	.word	0xe000ef34

08003428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
	__asm volatile
 800342e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	607b      	str	r3, [r7, #4]
}
 8003440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003442:	4b10      	ldr	r3, [pc, #64]	@ (8003484 <vPortEnterCritical+0x5c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	4a0e      	ldr	r2, [pc, #56]	@ (8003484 <vPortEnterCritical+0x5c>)
 800344a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800344c:	4b0d      	ldr	r3, [pc, #52]	@ (8003484 <vPortEnterCritical+0x5c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d110      	bne.n	8003476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003454:	4b0c      	ldr	r3, [pc, #48]	@ (8003488 <vPortEnterCritical+0x60>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <vPortEnterCritical+0x4e>
	__asm volatile
 800345e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	603b      	str	r3, [r7, #0]
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	e7fd      	b.n	8003472 <vPortEnterCritical+0x4a>
	}
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	2000000c 	.word	0x2000000c
 8003488:	e000ed04 	.word	0xe000ed04

0800348c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003492:	4b12      	ldr	r3, [pc, #72]	@ (80034dc <vPortExitCritical+0x50>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10b      	bne.n	80034b2 <vPortExitCritical+0x26>
	__asm volatile
 800349a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	607b      	str	r3, [r7, #4]
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	e7fd      	b.n	80034ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80034b2:	4b0a      	ldr	r3, [pc, #40]	@ (80034dc <vPortExitCritical+0x50>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	4a08      	ldr	r2, [pc, #32]	@ (80034dc <vPortExitCritical+0x50>)
 80034ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80034bc:	4b07      	ldr	r3, [pc, #28]	@ (80034dc <vPortExitCritical+0x50>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <vPortExitCritical+0x44>
 80034c4:	2300      	movs	r3, #0
 80034c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	2000000c 	.word	0x2000000c

080034e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80034e0:	f3ef 8009 	mrs	r0, PSP
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <pxCurrentTCBConst>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	f01e 0f10 	tst.w	lr, #16
 80034f0:	bf08      	it	eq
 80034f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80034f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034fa:	6010      	str	r0, [r2, #0]
 80034fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003504:	f380 8811 	msr	BASEPRI, r0
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f7ff fd26 	bl	8002f60 <vTaskSwitchContext>
 8003514:	f04f 0000 	mov.w	r0, #0
 8003518:	f380 8811 	msr	BASEPRI, r0
 800351c:	bc09      	pop	{r0, r3}
 800351e:	6819      	ldr	r1, [r3, #0]
 8003520:	6808      	ldr	r0, [r1, #0]
 8003522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003526:	f01e 0f10 	tst.w	lr, #16
 800352a:	bf08      	it	eq
 800352c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003530:	f380 8809 	msr	PSP, r0
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	f3af 8000 	nop.w

08003540 <pxCurrentTCBConst>:
 8003540:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop

08003548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
	__asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	607b      	str	r3, [r7, #4]
}
 8003560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003562:	f7ff fc43 	bl	8002dec <xTaskIncrementTick>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800356c:	4b06      	ldr	r3, [pc, #24]	@ (8003588 <SysTick_Handler+0x40>)
 800356e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	2300      	movs	r3, #0
 8003576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f383 8811 	msr	BASEPRI, r3
}
 800357e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	e000ed04 	.word	0xe000ed04

0800358c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003590:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <vPortSetupTimerInterrupt+0x34>)
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003596:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <vPortSetupTimerInterrupt+0x38>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800359c:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <vPortSetupTimerInterrupt+0x3c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0a      	ldr	r2, [pc, #40]	@ (80035cc <vPortSetupTimerInterrupt+0x40>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	4a09      	ldr	r2, [pc, #36]	@ (80035d0 <vPortSetupTimerInterrupt+0x44>)
 80035aa:	3b01      	subs	r3, #1
 80035ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80035ae:	4b04      	ldr	r3, [pc, #16]	@ (80035c0 <vPortSetupTimerInterrupt+0x34>)
 80035b0:	2207      	movs	r2, #7
 80035b2:	601a      	str	r2, [r3, #0]
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000e010 	.word	0xe000e010
 80035c4:	e000e018 	.word	0xe000e018
 80035c8:	20000000 	.word	0x20000000
 80035cc:	10624dd3 	.word	0x10624dd3
 80035d0:	e000e014 	.word	0xe000e014

080035d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80035d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80035e4 <vPortEnableVFP+0x10>
 80035d8:	6801      	ldr	r1, [r0, #0]
 80035da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80035de:	6001      	str	r1, [r0, #0]
 80035e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80035e2:	bf00      	nop
 80035e4:	e000ed88 	.word	0xe000ed88

080035e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80035f4:	f7ff fb4e 	bl	8002c94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80035f8:	4b5c      	ldr	r3, [pc, #368]	@ (800376c <pvPortMalloc+0x184>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003600:	f000 f924 	bl	800384c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003604:	4b5a      	ldr	r3, [pc, #360]	@ (8003770 <pvPortMalloc+0x188>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	f040 8095 	bne.w	800373c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01e      	beq.n	8003656 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003618:	2208      	movs	r2, #8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	2b00      	cmp	r3, #0
 8003628:	d015      	beq.n	8003656 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f023 0307 	bic.w	r3, r3, #7
 8003630:	3308      	adds	r3, #8
 8003632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <pvPortMalloc+0x6e>
	__asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	617b      	str	r3, [r7, #20]
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	e7fd      	b.n	8003652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d06f      	beq.n	800373c <pvPortMalloc+0x154>
 800365c:	4b45      	ldr	r3, [pc, #276]	@ (8003774 <pvPortMalloc+0x18c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	d86a      	bhi.n	800373c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003666:	4b44      	ldr	r3, [pc, #272]	@ (8003778 <pvPortMalloc+0x190>)
 8003668:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800366a:	4b43      	ldr	r3, [pc, #268]	@ (8003778 <pvPortMalloc+0x190>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003670:	e004      	b.n	800367c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	429a      	cmp	r2, r3
 8003684:	d903      	bls.n	800368e <pvPortMalloc+0xa6>
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f1      	bne.n	8003672 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800368e:	4b37      	ldr	r3, [pc, #220]	@ (800376c <pvPortMalloc+0x184>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003694:	429a      	cmp	r2, r3
 8003696:	d051      	beq.n	800373c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2208      	movs	r2, #8
 800369e:	4413      	add	r3, r2
 80036a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	1ad2      	subs	r2, r2, r3
 80036b2:	2308      	movs	r3, #8
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d920      	bls.n	80036fc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80036ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4413      	add	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00b      	beq.n	80036e4 <pvPortMalloc+0xfc>
	__asm volatile
 80036cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	613b      	str	r3, [r7, #16]
}
 80036de:	bf00      	nop
 80036e0:	bf00      	nop
 80036e2:	e7fd      	b.n	80036e0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	1ad2      	subs	r2, r2, r3
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80036f6:	69b8      	ldr	r0, [r7, #24]
 80036f8:	f000 f90a 	bl	8003910 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003774 <pvPortMalloc+0x18c>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	4a1b      	ldr	r2, [pc, #108]	@ (8003774 <pvPortMalloc+0x18c>)
 8003708:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800370a:	4b1a      	ldr	r3, [pc, #104]	@ (8003774 <pvPortMalloc+0x18c>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4b1b      	ldr	r3, [pc, #108]	@ (800377c <pvPortMalloc+0x194>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d203      	bcs.n	800371e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003716:	4b17      	ldr	r3, [pc, #92]	@ (8003774 <pvPortMalloc+0x18c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a18      	ldr	r2, [pc, #96]	@ (800377c <pvPortMalloc+0x194>)
 800371c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <pvPortMalloc+0x188>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	431a      	orrs	r2, r3
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800372c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003732:	4b13      	ldr	r3, [pc, #76]	@ (8003780 <pvPortMalloc+0x198>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3301      	adds	r3, #1
 8003738:	4a11      	ldr	r2, [pc, #68]	@ (8003780 <pvPortMalloc+0x198>)
 800373a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800373c:	f7ff fab8 	bl	8002cb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00b      	beq.n	8003762 <pvPortMalloc+0x17a>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	60fb      	str	r3, [r7, #12]
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	e7fd      	b.n	800375e <pvPortMalloc+0x176>
	return pvReturn;
 8003762:	69fb      	ldr	r3, [r7, #28]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3728      	adds	r7, #40	@ 0x28
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20004054 	.word	0x20004054
 8003770:	20004068 	.word	0x20004068
 8003774:	20004058 	.word	0x20004058
 8003778:	2000404c 	.word	0x2000404c
 800377c:	2000405c 	.word	0x2000405c
 8003780:	20004060 	.word	0x20004060

08003784 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d04f      	beq.n	8003836 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003796:	2308      	movs	r3, #8
 8003798:	425b      	negs	r3, r3
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4413      	add	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	4b25      	ldr	r3, [pc, #148]	@ (8003840 <vPortFree+0xbc>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10b      	bne.n	80037ca <vPortFree+0x46>
	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	60fb      	str	r3, [r7, #12]
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	e7fd      	b.n	80037c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <vPortFree+0x66>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	60bb      	str	r3, [r7, #8]
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	e7fd      	b.n	80037e6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	4b14      	ldr	r3, [pc, #80]	@ (8003840 <vPortFree+0xbc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01e      	beq.n	8003836 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d11a      	bne.n	8003836 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	4b0e      	ldr	r3, [pc, #56]	@ (8003840 <vPortFree+0xbc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	43db      	mvns	r3, r3
 800380a:	401a      	ands	r2, r3
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003810:	f7ff fa40 	bl	8002c94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	4b0a      	ldr	r3, [pc, #40]	@ (8003844 <vPortFree+0xc0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4413      	add	r3, r2
 800381e:	4a09      	ldr	r2, [pc, #36]	@ (8003844 <vPortFree+0xc0>)
 8003820:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003822:	6938      	ldr	r0, [r7, #16]
 8003824:	f000 f874 	bl	8003910 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003828:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <vPortFree+0xc4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	4a06      	ldr	r2, [pc, #24]	@ (8003848 <vPortFree+0xc4>)
 8003830:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003832:	f7ff fa3d 	bl	8002cb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003836:	bf00      	nop
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20004068 	.word	0x20004068
 8003844:	20004058 	.word	0x20004058
 8003848:	20004064 	.word	0x20004064

0800384c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003852:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003856:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003858:	4b27      	ldr	r3, [pc, #156]	@ (80038f8 <prvHeapInit+0xac>)
 800385a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00c      	beq.n	8003880 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3307      	adds	r3, #7
 800386a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0307 	bic.w	r3, r3, #7
 8003872:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	4a1f      	ldr	r2, [pc, #124]	@ (80038f8 <prvHeapInit+0xac>)
 800387c:	4413      	add	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003884:	4a1d      	ldr	r2, [pc, #116]	@ (80038fc <prvHeapInit+0xb0>)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800388a:	4b1c      	ldr	r3, [pc, #112]	@ (80038fc <prvHeapInit+0xb0>)
 800388c:	2200      	movs	r2, #0
 800388e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	4413      	add	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003898:	2208      	movs	r2, #8
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0307 	bic.w	r3, r3, #7
 80038a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a15      	ldr	r2, [pc, #84]	@ (8003900 <prvHeapInit+0xb4>)
 80038ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80038ae:	4b14      	ldr	r3, [pc, #80]	@ (8003900 <prvHeapInit+0xb4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2200      	movs	r2, #0
 80038b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80038b6:	4b12      	ldr	r3, [pc, #72]	@ (8003900 <prvHeapInit+0xb4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	1ad2      	subs	r2, r2, r3
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80038cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003900 <prvHeapInit+0xb4>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003904 <prvHeapInit+0xb8>)
 80038da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a09      	ldr	r2, [pc, #36]	@ (8003908 <prvHeapInit+0xbc>)
 80038e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80038e4:	4b09      	ldr	r3, [pc, #36]	@ (800390c <prvHeapInit+0xc0>)
 80038e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80038ea:	601a      	str	r2, [r3, #0]
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	2000044c 	.word	0x2000044c
 80038fc:	2000404c 	.word	0x2000404c
 8003900:	20004054 	.word	0x20004054
 8003904:	2000405c 	.word	0x2000405c
 8003908:	20004058 	.word	0x20004058
 800390c:	20004068 	.word	0x20004068

08003910 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003918:	4b28      	ldr	r3, [pc, #160]	@ (80039bc <prvInsertBlockIntoFreeList+0xac>)
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	e002      	b.n	8003924 <prvInsertBlockIntoFreeList+0x14>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d8f7      	bhi.n	800391e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	4413      	add	r3, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	429a      	cmp	r2, r3
 800393e:	d108      	bne.n	8003952 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	441a      	add	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	441a      	add	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d118      	bne.n	8003998 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b15      	ldr	r3, [pc, #84]	@ (80039c0 <prvInsertBlockIntoFreeList+0xb0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d00d      	beq.n	800398e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	441a      	add	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	e008      	b.n	80039a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800398e:	4b0c      	ldr	r3, [pc, #48]	@ (80039c0 <prvInsertBlockIntoFreeList+0xb0>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	e003      	b.n	80039a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d002      	beq.n	80039ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	2000404c 	.word	0x2000404c
 80039c0:	20004054 	.word	0x20004054

080039c4 <memset>:
 80039c4:	4402      	add	r2, r0
 80039c6:	4603      	mov	r3, r0
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d100      	bne.n	80039ce <memset+0xa>
 80039cc:	4770      	bx	lr
 80039ce:	f803 1b01 	strb.w	r1, [r3], #1
 80039d2:	e7f9      	b.n	80039c8 <memset+0x4>

080039d4 <__libc_init_array>:
 80039d4:	b570      	push	{r4, r5, r6, lr}
 80039d6:	4d0d      	ldr	r5, [pc, #52]	@ (8003a0c <__libc_init_array+0x38>)
 80039d8:	4c0d      	ldr	r4, [pc, #52]	@ (8003a10 <__libc_init_array+0x3c>)
 80039da:	1b64      	subs	r4, r4, r5
 80039dc:	10a4      	asrs	r4, r4, #2
 80039de:	2600      	movs	r6, #0
 80039e0:	42a6      	cmp	r6, r4
 80039e2:	d109      	bne.n	80039f8 <__libc_init_array+0x24>
 80039e4:	4d0b      	ldr	r5, [pc, #44]	@ (8003a14 <__libc_init_array+0x40>)
 80039e6:	4c0c      	ldr	r4, [pc, #48]	@ (8003a18 <__libc_init_array+0x44>)
 80039e8:	f000 f818 	bl	8003a1c <_init>
 80039ec:	1b64      	subs	r4, r4, r5
 80039ee:	10a4      	asrs	r4, r4, #2
 80039f0:	2600      	movs	r6, #0
 80039f2:	42a6      	cmp	r6, r4
 80039f4:	d105      	bne.n	8003a02 <__libc_init_array+0x2e>
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
 80039f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fc:	4798      	blx	r3
 80039fe:	3601      	adds	r6, #1
 8003a00:	e7ee      	b.n	80039e0 <__libc_init_array+0xc>
 8003a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a06:	4798      	blx	r3
 8003a08:	3601      	adds	r6, #1
 8003a0a:	e7f2      	b.n	80039f2 <__libc_init_array+0x1e>
 8003a0c:	08003a64 	.word	0x08003a64
 8003a10:	08003a64 	.word	0x08003a64
 8003a14:	08003a64 	.word	0x08003a64
 8003a18:	08003a68 	.word	0x08003a68

08003a1c <_init>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr

08003a28 <_fini>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr
