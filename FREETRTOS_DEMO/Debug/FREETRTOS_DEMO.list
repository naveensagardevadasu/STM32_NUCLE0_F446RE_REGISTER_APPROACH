
FREETRTOS_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004e8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006b8  080006c0  000016c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006b8  080006b8  000016c0  2**0
                  CONTENTS
  4 .ARM          00000000  080006b8  080006b8  000016c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006b8  080006c0  000016c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006b8  080006b8  000016b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006bc  080006bc  000016bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000016c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000000  080006c0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080006c0  000020d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000024e2  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000070d  00000000  00000000  00003bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c0  00000000  00000000  000042e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000213  00000000  00000000  000045a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000021ea  00000000  00000000  000047b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000011fa  00000000  00000000  0000699d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00007b97  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000a50  00000000  00000000  00007bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000085  00000000  00000000  0000862c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000000 	.word	0x20000000
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080006a0 	.word	0x080006a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000004 	.word	0x20000004
 800020c:	080006a0 	.word	0x080006a0

08000210 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	685b      	ldr	r3, [r3, #4]
 800021e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	68fa      	ldr	r2, [r7, #12]
 8000224:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	689a      	ldr	r2, [r3, #8]
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	683a      	ldr	r2, [r7, #0]
 8000234:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	683a      	ldr	r2, [r7, #0]
 800023a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	1c5a      	adds	r2, r3, #1
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	601a      	str	r2, [r3, #0]
}
 800024c:	bf00      	nop
 800024e:	3714      	adds	r7, #20
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr

08000258 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	691b      	ldr	r3, [r3, #16]
 8000264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	6892      	ldr	r2, [r2, #8]
 800026e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	6852      	ldr	r2, [r2, #4]
 8000278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	687a      	ldr	r2, [r7, #4]
 8000280:	429a      	cmp	r2, r3
 8000282:	d103      	bne.n	800028c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	689a      	ldr	r2, [r3, #8]
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2200      	movs	r2, #0
 8000290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	1e5a      	subs	r2, r3, #1
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80002b6:	4b4f      	ldr	r3, [pc, #316]	@ (80003f4 <xTaskIncrementTick+0x148>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 808f 	bne.w	80003de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80002c0:	4b4d      	ldr	r3, [pc, #308]	@ (80003f8 <xTaskIncrementTick+0x14c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	3301      	adds	r3, #1
 80002c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80002c8:	4a4b      	ldr	r2, [pc, #300]	@ (80003f8 <xTaskIncrementTick+0x14c>)
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d121      	bne.n	8000318 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80002d4:	4b49      	ldr	r3, [pc, #292]	@ (80003fc <xTaskIncrementTick+0x150>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d00b      	beq.n	80002f6 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80002de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80002e2:	f383 8811 	msr	BASEPRI, r3
 80002e6:	f3bf 8f6f 	isb	sy
 80002ea:	f3bf 8f4f 	dsb	sy
 80002ee:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80002f0:	bf00      	nop
 80002f2:	bf00      	nop
 80002f4:	e7fd      	b.n	80002f2 <xTaskIncrementTick+0x46>
 80002f6:	4b41      	ldr	r3, [pc, #260]	@ (80003fc <xTaskIncrementTick+0x150>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	4b40      	ldr	r3, [pc, #256]	@ (8000400 <xTaskIncrementTick+0x154>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a3e      	ldr	r2, [pc, #248]	@ (80003fc <xTaskIncrementTick+0x150>)
 8000302:	6013      	str	r3, [r2, #0]
 8000304:	4a3e      	ldr	r2, [pc, #248]	@ (8000400 <xTaskIncrementTick+0x154>)
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	6013      	str	r3, [r2, #0]
 800030a:	4b3e      	ldr	r3, [pc, #248]	@ (8000404 <xTaskIncrementTick+0x158>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	3301      	adds	r3, #1
 8000310:	4a3c      	ldr	r2, [pc, #240]	@ (8000404 <xTaskIncrementTick+0x158>)
 8000312:	6013      	str	r3, [r2, #0]
 8000314:	f000 f8e0 	bl	80004d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000318:	4b3b      	ldr	r3, [pc, #236]	@ (8000408 <xTaskIncrementTick+0x15c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	693a      	ldr	r2, [r7, #16]
 800031e:	429a      	cmp	r2, r3
 8000320:	d348      	bcc.n	80003b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000322:	4b36      	ldr	r3, [pc, #216]	@ (80003fc <xTaskIncrementTick+0x150>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d104      	bne.n	8000336 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800032c:	4b36      	ldr	r3, [pc, #216]	@ (8000408 <xTaskIncrementTick+0x15c>)
 800032e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000332:	601a      	str	r2, [r3, #0]
					break;
 8000334:	e03e      	b.n	80003b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000336:	4b31      	ldr	r3, [pc, #196]	@ (80003fc <xTaskIncrementTick+0x150>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000346:	693a      	ldr	r2, [r7, #16]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	429a      	cmp	r2, r3
 800034c:	d203      	bcs.n	8000356 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800034e:	4a2e      	ldr	r2, [pc, #184]	@ (8000408 <xTaskIncrementTick+0x15c>)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000354:	e02e      	b.n	80003b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	3304      	adds	r3, #4
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff7c 	bl	8000258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000364:	2b00      	cmp	r3, #0
 8000366:	d004      	beq.n	8000372 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	3318      	adds	r3, #24
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ff73 	bl	8000258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000376:	2201      	movs	r2, #1
 8000378:	409a      	lsls	r2, r3
 800037a:	4b24      	ldr	r3, [pc, #144]	@ (800040c <xTaskIncrementTick+0x160>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4313      	orrs	r3, r2
 8000380:	4a22      	ldr	r2, [pc, #136]	@ (800040c <xTaskIncrementTick+0x160>)
 8000382:	6013      	str	r3, [r2, #0]
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000388:	4613      	mov	r3, r2
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	4413      	add	r3, r2
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4a1f      	ldr	r2, [pc, #124]	@ (8000410 <xTaskIncrementTick+0x164>)
 8000392:	441a      	add	r2, r3
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	3304      	adds	r3, #4
 8000398:	4619      	mov	r1, r3
 800039a:	4610      	mov	r0, r2
 800039c:	f7ff ff38 	bl	8000210 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80003a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000414 <xTaskIncrementTick+0x168>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d3b9      	bcc.n	8000322 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80003ae:	2301      	movs	r3, #1
 80003b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80003b2:	e7b6      	b.n	8000322 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80003b4:	4b17      	ldr	r3, [pc, #92]	@ (8000414 <xTaskIncrementTick+0x168>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80003ba:	4915      	ldr	r1, [pc, #84]	@ (8000410 <xTaskIncrementTick+0x164>)
 80003bc:	4613      	mov	r3, r2
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	4413      	add	r3, r2
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	440b      	add	r3, r1
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d901      	bls.n	80003d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80003cc:	2301      	movs	r3, #1
 80003ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80003d0:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <xTaskIncrementTick+0x16c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d007      	beq.n	80003e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80003d8:	2301      	movs	r3, #1
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	e004      	b.n	80003e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80003de:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <xTaskIncrementTick+0x170>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	3301      	adds	r3, #1
 80003e4:	4a0d      	ldr	r2, [pc, #52]	@ (800041c <xTaskIncrementTick+0x170>)
 80003e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80003e8:	697b      	ldr	r3, [r7, #20]
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3718      	adds	r7, #24
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	200000cc 	.word	0x200000cc
 80003f8:	200000b4 	.word	0x200000b4
 80003fc:	200000ac 	.word	0x200000ac
 8000400:	200000b0 	.word	0x200000b0
 8000404:	200000c4 	.word	0x200000c4
 8000408:	200000c8 	.word	0x200000c8
 800040c:	200000b8 	.word	0x200000b8
 8000410:	20000020 	.word	0x20000020
 8000414:	2000001c 	.word	0x2000001c
 8000418:	200000c0 	.word	0x200000c0
 800041c:	200000bc 	.word	0x200000bc

08000420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000420:	b480      	push	{r7}
 8000422:	b087      	sub	sp, #28
 8000424:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000426:	4b27      	ldr	r3, [pc, #156]	@ (80004c4 <vTaskSwitchContext+0xa4>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d003      	beq.n	8000436 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800042e:	4b26      	ldr	r3, [pc, #152]	@ (80004c8 <vTaskSwitchContext+0xa8>)
 8000430:	2201      	movs	r2, #1
 8000432:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000434:	e040      	b.n	80004b8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8000436:	4b24      	ldr	r3, [pc, #144]	@ (80004c8 <vTaskSwitchContext+0xa8>)
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800043c:	4b23      	ldr	r3, [pc, #140]	@ (80004cc <vTaskSwitchContext+0xac>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	fab3 f383 	clz	r3, r3
 8000448:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800044a:	7afb      	ldrb	r3, [r7, #11]
 800044c:	f1c3 031f 	rsb	r3, r3, #31
 8000450:	617b      	str	r3, [r7, #20]
 8000452:	491f      	ldr	r1, [pc, #124]	@ (80004d0 <vTaskSwitchContext+0xb0>)
 8000454:	697a      	ldr	r2, [r7, #20]
 8000456:	4613      	mov	r3, r2
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	4413      	add	r3, r2
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	440b      	add	r3, r1
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d10b      	bne.n	800047e <vTaskSwitchContext+0x5e>
	__asm volatile
 8000466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800046a:	f383 8811 	msr	BASEPRI, r3
 800046e:	f3bf 8f6f 	isb	sy
 8000472:	f3bf 8f4f 	dsb	sy
 8000476:	607b      	str	r3, [r7, #4]
}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	e7fd      	b.n	800047a <vTaskSwitchContext+0x5a>
 800047e:	697a      	ldr	r2, [r7, #20]
 8000480:	4613      	mov	r3, r2
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	4413      	add	r3, r2
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	4a11      	ldr	r2, [pc, #68]	@ (80004d0 <vTaskSwitchContext+0xb0>)
 800048a:	4413      	add	r3, r2
 800048c:	613b      	str	r3, [r7, #16]
 800048e:	693b      	ldr	r3, [r7, #16]
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	693b      	ldr	r3, [r7, #16]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	693b      	ldr	r3, [r7, #16]
 800049a:	685a      	ldr	r2, [r3, #4]
 800049c:	693b      	ldr	r3, [r7, #16]
 800049e:	3308      	adds	r3, #8
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d104      	bne.n	80004ae <vTaskSwitchContext+0x8e>
 80004a4:	693b      	ldr	r3, [r7, #16]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	685a      	ldr	r2, [r3, #4]
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a07      	ldr	r2, [pc, #28]	@ (80004d4 <vTaskSwitchContext+0xb4>)
 80004b6:	6013      	str	r3, [r2, #0]
}
 80004b8:	bf00      	nop
 80004ba:	371c      	adds	r7, #28
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	200000cc 	.word	0x200000cc
 80004c8:	200000c0 	.word	0x200000c0
 80004cc:	200000b8 	.word	0x200000b8
 80004d0:	20000020 	.word	0x20000020
 80004d4:	2000001c 	.word	0x2000001c

080004d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <prvResetNextTaskUnblockTime+0x38>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d104      	bne.n	80004f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80004e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000514 <prvResetNextTaskUnblockTime+0x3c>)
 80004ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80004ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80004f0:	e008      	b.n	8000504 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80004f2:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <prvResetNextTaskUnblockTime+0x38>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	4a04      	ldr	r2, [pc, #16]	@ (8000514 <prvResetNextTaskUnblockTime+0x3c>)
 8000502:	6013      	str	r3, [r2, #0]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	200000ac 	.word	0x200000ac
 8000514:	200000c8 	.word	0x200000c8
	...

08000520 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000520:	4b07      	ldr	r3, [pc, #28]	@ (8000540 <pxCurrentTCBConst2>)
 8000522:	6819      	ldr	r1, [r3, #0]
 8000524:	6808      	ldr	r0, [r1, #0]
 8000526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800052a:	f380 8809 	msr	PSP, r0
 800052e:	f3bf 8f6f 	isb	sy
 8000532:	f04f 0000 	mov.w	r0, #0
 8000536:	f380 8811 	msr	BASEPRI, r0
 800053a:	4770      	bx	lr
 800053c:	f3af 8000 	nop.w

08000540 <pxCurrentTCBConst2>:
 8000540:	2000001c 	.word	0x2000001c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000544:	bf00      	nop
 8000546:	bf00      	nop
	...

08000550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000550:	f3ef 8009 	mrs	r0, PSP
 8000554:	f3bf 8f6f 	isb	sy
 8000558:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <pxCurrentTCBConst>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	f01e 0f10 	tst.w	lr, #16
 8000560:	bf08      	it	eq
 8000562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800056a:	6010      	str	r0, [r2, #0]
 800056c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000570:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8000574:	f380 8811 	msr	BASEPRI, r0
 8000578:	f3bf 8f4f 	dsb	sy
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f7ff ff4e 	bl	8000420 <vTaskSwitchContext>
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	f380 8811 	msr	BASEPRI, r0
 800058c:	bc09      	pop	{r0, r3}
 800058e:	6819      	ldr	r1, [r3, #0]
 8000590:	6808      	ldr	r0, [r1, #0]
 8000592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000596:	f01e 0f10 	tst.w	lr, #16
 800059a:	bf08      	it	eq
 800059c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80005a0:	f380 8809 	msr	PSP, r0
 80005a4:	f3bf 8f6f 	isb	sy
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	f3af 8000 	nop.w

080005b0 <pxCurrentTCBConst>:
 80005b0:	2000001c 	.word	0x2000001c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop

080005b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
	__asm volatile
 80005be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005c2:	f383 8811 	msr	BASEPRI, r3
 80005c6:	f3bf 8f6f 	isb	sy
 80005ca:	f3bf 8f4f 	dsb	sy
 80005ce:	607b      	str	r3, [r7, #4]
}
 80005d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80005d2:	f7ff fe6b 	bl	80002ac <xTaskIncrementTick>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d003      	beq.n	80005e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80005dc:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <SysTick_Handler+0x40>)
 80005de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80005ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	e000ed04 	.word	0xe000ed04

080005fc <main>:
#include <stdint.h>
#include "FreeRTOS.h"


int main(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
    /* Loop forever */
	for(;;);
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <main+0x4>

08000604 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000604:	480d      	ldr	r0, [pc, #52]	@ (800063c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000606:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000608:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800060c:	480c      	ldr	r0, [pc, #48]	@ (8000640 <LoopForever+0x6>)
  ldr r1, =_edata
 800060e:	490d      	ldr	r1, [pc, #52]	@ (8000644 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000610:	4a0d      	ldr	r2, [pc, #52]	@ (8000648 <LoopForever+0xe>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000614:	e002      	b.n	800061c <LoopCopyDataInit>

08000616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061a:	3304      	adds	r3, #4

0800061c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800061c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000620:	d3f9      	bcc.n	8000616 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000622:	4a0a      	ldr	r2, [pc, #40]	@ (800064c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000624:	4c0a      	ldr	r4, [pc, #40]	@ (8000650 <LoopForever+0x16>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000628:	e001      	b.n	800062e <LoopFillZerobss>

0800062a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800062c:	3204      	adds	r2, #4

0800062e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000630:	d3fb      	bcc.n	800062a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000632:	f000 f811 	bl	8000658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000636:	f7ff ffe1 	bl	80005fc <main>

0800063a <LoopForever>:

LoopForever:
  b LoopForever
 800063a:	e7fe      	b.n	800063a <LoopForever>
  ldr   r0, =_estack
 800063c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000648:	080006c0 	.word	0x080006c0
  ldr r2, =_sbss
 800064c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000650:	200000d0 	.word	0x200000d0

08000654 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC_IRQHandler>
	...

08000658 <__libc_init_array>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	4d0d      	ldr	r5, [pc, #52]	@ (8000690 <__libc_init_array+0x38>)
 800065c:	4c0d      	ldr	r4, [pc, #52]	@ (8000694 <__libc_init_array+0x3c>)
 800065e:	1b64      	subs	r4, r4, r5
 8000660:	10a4      	asrs	r4, r4, #2
 8000662:	2600      	movs	r6, #0
 8000664:	42a6      	cmp	r6, r4
 8000666:	d109      	bne.n	800067c <__libc_init_array+0x24>
 8000668:	4d0b      	ldr	r5, [pc, #44]	@ (8000698 <__libc_init_array+0x40>)
 800066a:	4c0c      	ldr	r4, [pc, #48]	@ (800069c <__libc_init_array+0x44>)
 800066c:	f000 f818 	bl	80006a0 <_init>
 8000670:	1b64      	subs	r4, r4, r5
 8000672:	10a4      	asrs	r4, r4, #2
 8000674:	2600      	movs	r6, #0
 8000676:	42a6      	cmp	r6, r4
 8000678:	d105      	bne.n	8000686 <__libc_init_array+0x2e>
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000680:	4798      	blx	r3
 8000682:	3601      	adds	r6, #1
 8000684:	e7ee      	b.n	8000664 <__libc_init_array+0xc>
 8000686:	f855 3b04 	ldr.w	r3, [r5], #4
 800068a:	4798      	blx	r3
 800068c:	3601      	adds	r6, #1
 800068e:	e7f2      	b.n	8000676 <__libc_init_array+0x1e>
 8000690:	080006b8 	.word	0x080006b8
 8000694:	080006b8 	.word	0x080006b8
 8000698:	080006b8 	.word	0x080006b8
 800069c:	080006bc 	.word	0x080006bc

080006a0 <_init>:
 80006a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a2:	bf00      	nop
 80006a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a6:	bc08      	pop	{r3}
 80006a8:	469e      	mov	lr, r3
 80006aa:	4770      	bx	lr

080006ac <_fini>:
 80006ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ae:	bf00      	nop
 80006b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006b2:	bc08      	pop	{r3}
 80006b4:	469e      	mov	lr, r3
 80006b6:	4770      	bx	lr
