/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include "stm32f446xx.h"
#include <stddef.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void Timer2_init(void)
{
		/*Enable clock access to tim2*/
		RCC->APB1ENR |=(1U<<0);

		/*Set prescaler value*/
		TIM2->PSC =  16000 - 1 ;  //  16 000 000 / 1 600 = 10 000
		/*Set auto-reload value*/
		TIM2->ARR =  2000 - 1;  // 10 000 / 10 000 = 1
		/*Clear counter*/
		TIM2->CNT = 0;

		/*Enable TIM2 interrupt*/
		TIM2->DIER |=(1U<<0);

		/*Enable TIM2 interrupt in NVIC*/
		//*NVIC_ISER0 |=(1<<28);
		NVIC_EnableIRQ(TIM2_IRQn);

		/*Enable timer*/
		TIM2->CR1 = (1U<<0);

}

void TIM2_IRQHandler(void) {

/*Clear update interrupt flag*/
	TIM2->SR &=~(1U<<0);
	printf("im in TIM2_ISR\n");
	GPIOA->ODR ^=(1U<<5);
	for(uint32_t i=0;i<20000;i++);
}

void Timer2_delay(uint32_t delay)
{
     // TIM2 Register values
    //Configuring TIMER2 Registers to produce  delay of passed value
    // system clock is 16 MHZ

    TIM2->PSC = (1600-1); // 16 000 000/1600= 10 000
    TIM2->ARR = (500-1)*delay; //10 000/10 000= 1 HZ
    TIM2->CNT = 0; //Clearing the CNT register
    TIM2->CR1|= (1<<0);// set bit 0 to enable Timer/Counter
    while(!(TIM2->SR&0x01));
    TIM2->SR &=~(0x01);


}

void GPIO_Init(void)
{
		RCC->AHB1ENR |=(1<<0); // enable clock for PA5
		GPIOA->MODER |= (1<<10);
		GPIOA->OTYPER &=~(1<<5);
		GPIOA->OSPEEDR |=(1<<10);
		GPIOA->PUPDR &=~(3<<10);

}

int main(void)
{

	 	 GPIO_Init();
	 	 Timer2_init();
	 	 printf("im in main\n");

	 	while(1)
		{
			printf("im in while\n");
			for(uint32_t i=0;i<200000;i++);
		}



}
