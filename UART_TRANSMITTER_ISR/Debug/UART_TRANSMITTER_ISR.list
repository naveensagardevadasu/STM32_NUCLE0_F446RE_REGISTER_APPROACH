
UART_TRANSMITTER_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003a8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800056c  08000574  00001574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800056c  0800056c  00001574  2**0
                  CONTENTS
  4 .ARM          00000000  0800056c  0800056c  00001574  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800056c  08000574  00001574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800056c  0800056c  0000156c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000570  08000570  00001570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000574  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000574  00002024  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b66  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001f0  00000000  00000000  00002104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  000022f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000057  00000000  00000000  00002378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bad5  00000000  00000000  000023cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000677  00000000  00000000  0000dea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00042084  00000000  00000000  0000e51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005059f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000014c  00000000  00000000  000505e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00050730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000554 	.word	0x08000554

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000554 	.word	0x08000554

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4906      	ldr	r1, [pc, #24]	@ (8000238 <__NVIC_EnableIRQ+0x34>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	e000e100 	.word	0xe000e100

0800023c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	6039      	str	r1, [r7, #0]
 8000246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024c:	2b00      	cmp	r3, #0
 800024e:	db0a      	blt.n	8000266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	b2da      	uxtb	r2, r3
 8000254:	490c      	ldr	r1, [pc, #48]	@ (8000288 <__NVIC_SetPriority+0x4c>)
 8000256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025a:	0112      	lsls	r2, r2, #4
 800025c:	b2d2      	uxtb	r2, r2
 800025e:	440b      	add	r3, r1
 8000260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000264:	e00a      	b.n	800027c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	b2da      	uxtb	r2, r3
 800026a:	4908      	ldr	r1, [pc, #32]	@ (800028c <__NVIC_SetPriority+0x50>)
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	f003 030f 	and.w	r3, r3, #15
 8000272:	3b04      	subs	r3, #4
 8000274:	0112      	lsls	r2, r2, #4
 8000276:	b2d2      	uxtb	r2, r2
 8000278:	440b      	add	r3, r1
 800027a:	761a      	strb	r2, [r3, #24]
}
 800027c:	bf00      	nop
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	e000e100 	.word	0xe000e100
 800028c:	e000ed00 	.word	0xe000ed00

08000290 <SysClockConfig>:
#endif



void SysClockConfig (void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	#define PLL_M 	4
	#define PLL_N 	180
	#define PLL_P 	0  // PLLP = 2

	// 1. ENABLE HSE and wait for the HSE to become Ready
	RCC->CR |= (1<<16);
 8000294:	4b28      	ldr	r3, [pc, #160]	@ (8000338 <SysClockConfig+0xa8>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a27      	ldr	r2, [pc, #156]	@ (8000338 <SysClockConfig+0xa8>)
 800029a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800029e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1<<17)));
 80002a0:	bf00      	nop
 80002a2:	4b25      	ldr	r3, [pc, #148]	@ (8000338 <SysClockConfig+0xa8>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f9      	beq.n	80002a2 <SysClockConfig+0x12>

	// 2. Set the POWER ENABLE CLOCK and VOLTAGE REGULATOR
	RCC->APB1ENR |= (1<<28);
 80002ae:	4b22      	ldr	r3, [pc, #136]	@ (8000338 <SysClockConfig+0xa8>)
 80002b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002b2:	4a21      	ldr	r2, [pc, #132]	@ (8000338 <SysClockConfig+0xa8>)
 80002b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002b8:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= (1<<15);
 80002ba:	4b20      	ldr	r3, [pc, #128]	@ (800033c <SysClockConfig+0xac>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a1f      	ldr	r2, [pc, #124]	@ (800033c <SysClockConfig+0xac>)
 80002c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002c4:	6013      	str	r3, [r2, #0]


	// 3. Configure the FLASH PREFETCH and the LATENCY Related Settings
	FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 80002c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000340 <SysClockConfig+0xb0>)
 80002c8:	f240 7205 	movw	r2, #1797	@ 0x705
 80002cc:	601a      	str	r2, [r3, #0]

	// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	// AHB PR
	RCC->CFGR &= ~(1<<7);  //RCC->CFGR_HPRE_DIV1;
 80002ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000338 <SysClockConfig+0xa8>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	4a19      	ldr	r2, [pc, #100]	@ (8000338 <SysClockConfig+0xa8>)
 80002d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002d8:	6093      	str	r3, [r2, #8]

	// APB1 PR
	RCC->CFGR |= (5<<10);
 80002da:	4b17      	ldr	r3, [pc, #92]	@ (8000338 <SysClockConfig+0xa8>)
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	4a16      	ldr	r2, [pc, #88]	@ (8000338 <SysClockConfig+0xa8>)
 80002e0:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80002e4:	6093      	str	r3, [r2, #8]

	// APB2 PR
	RCC->CFGR |= (4<<13); // RCC->CFGR_PPRE2_DIV2;
 80002e6:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <SysClockConfig+0xa8>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	4a13      	ldr	r2, [pc, #76]	@ (8000338 <SysClockConfig+0xa8>)
 80002ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002f0:	6093      	str	r3, [r2, #8]


	// 5. Configure the MAIN PLL
	RCC->PLLCFGR = (PLL_M <<0) | (PLL_N << 6) | (PLL_P <<16) | (RCC_PLLCFGR_PLLSRC_HSE);
 80002f2:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <SysClockConfig+0xa8>)
 80002f4:	4a13      	ldr	r2, [pc, #76]	@ (8000344 <SysClockConfig+0xb4>)
 80002f6:	605a      	str	r2, [r3, #4]

	// 6. Enable the PLL and wait for it to become ready
	RCC->CR |= (1<<24); //RCC->CR_PLLON;
 80002f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000338 <SysClockConfig+0xa8>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000338 <SysClockConfig+0xa8>)
 80002fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000302:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR &(1<<25))); // poll on RCC->CR_PLLRDY
 8000304:	bf00      	nop
 8000306:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <SysClockConfig+0xa8>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f9      	beq.n	8000306 <SysClockConfig+0x76>

	// 7. Select the Clock Source and wait for it to be set
	RCC->CFGR |=(2<<2);                    //RCC->CFGR_SW_PLL;
 8000312:	4b09      	ldr	r3, [pc, #36]	@ (8000338 <SysClockConfig+0xa8>)
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	4a08      	ldr	r2, [pc, #32]	@ (8000338 <SysClockConfig+0xa8>)
 8000318:	f043 0308 	orr.w	r3, r3, #8
 800031c:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & (3U<<2) ) !=(2<<2)  );   //RCC->CFGR_SWS_PLL);
 800031e:	bf00      	nop
 8000320:	4b05      	ldr	r3, [pc, #20]	@ (8000338 <SysClockConfig+0xa8>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	f003 030c 	and.w	r3, r3, #12
 8000328:	2b08      	cmp	r3, #8
 800032a:	d1f9      	bne.n	8000320 <SysClockConfig+0x90>
}
 800032c:	bf00      	nop
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40023800 	.word	0x40023800
 800033c:	40007000 	.word	0x40007000
 8000340:	40023c00 	.word	0x40023c00
 8000344:	00402d04 	.word	0x00402d04

08000348 <GPIO_Config>:




void GPIO_Config (void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	2. Set the required Pin in the INPUT Mode
	3. Configure the PULL UP/ PULL DOWN According to your requirement

	********************************************************/

	RCC->AHB1ENR |=  (1<<2)|(1<<0);  // Enable clocks for GPIOC and GPIOA
 800034c:	4b16      	ldr	r3, [pc, #88]	@ (80003a8 <GPIO_Config+0x60>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000350:	4a15      	ldr	r2, [pc, #84]	@ (80003a8 <GPIO_Config+0x60>)
 8000352:	f043 0305 	orr.w	r3, r3, #5
 8000356:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOC->MODER &= ~(3<<26);  // Bits (26:25) = 0:0  --> PC13 in Input Mode
 8000358:	4b14      	ldr	r3, [pc, #80]	@ (80003ac <GPIO_Config+0x64>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a13      	ldr	r2, [pc, #76]	@ (80003ac <GPIO_Config+0x64>)
 800035e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000362:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(1<<25);  // Bits (26:25) = 1:0  --> PC13 is in Pull Down mode
 8000364:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <GPIO_Config+0x64>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4a10      	ldr	r2, [pc, #64]	@ (80003ac <GPIO_Config+0x64>)
 800036a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800036e:	60d3      	str	r3, [r2, #12]
	GPIOA->MODER |= (1<<10);
 8000370:	4b0f      	ldr	r3, [pc, #60]	@ (80003b0 <GPIO_Config+0x68>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a0e      	ldr	r2, [pc, #56]	@ (80003b0 <GPIO_Config+0x68>)
 8000376:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800037a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &=~(1<<5);
 800037c:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <GPIO_Config+0x68>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4a0b      	ldr	r2, [pc, #44]	@ (80003b0 <GPIO_Config+0x68>)
 8000382:	f023 0320 	bic.w	r3, r3, #32
 8000386:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |=(1<<10);
 8000388:	4b09      	ldr	r3, [pc, #36]	@ (80003b0 <GPIO_Config+0x68>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	4a08      	ldr	r2, [pc, #32]	@ (80003b0 <GPIO_Config+0x68>)
 800038e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000392:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &=~(3<<10);
 8000394:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <GPIO_Config+0x68>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a05      	ldr	r2, [pc, #20]	@ (80003b0 <GPIO_Config+0x68>)
 800039a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800039e:	60d3      	str	r3, [r2, #12]

}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	40023800 	.word	0x40023800
 80003ac:	40020800 	.word	0x40020800
 80003b0:	40020000 	.word	0x40020000

080003b4 <Interrupt_Config>:

void Interrupt_Config (void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	5. Set the Interrupt Priority
	6. Enable the interrupt

	********************************************************/

	RCC->APB2ENR |= (1<<14);  // Enable SYSCNFG
 80003b8:	4b13      	ldr	r3, [pc, #76]	@ (8000408 <Interrupt_Config+0x54>)
 80003ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003bc:	4a12      	ldr	r2, [pc, #72]	@ (8000408 <Interrupt_Config+0x54>)
 80003be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003c2:	6453      	str	r3, [r2, #68]	@ 0x44

	SYSCFG->EXTICR[3] |= (0x2<<4);  // Bits[7:6:5:4] = (0:0:1:0)  -> configure EXTI13 line for PC 13
 80003c4:	4b11      	ldr	r3, [pc, #68]	@ (800040c <Interrupt_Config+0x58>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a10      	ldr	r2, [pc, #64]	@ (800040c <Interrupt_Config+0x58>)
 80003ca:	f043 0320 	orr.w	r3, r3, #32
 80003ce:	6153      	str	r3, [r2, #20]

	EXTI->IMR |= (1<<13);  // Bit[13] = 1  --> Disable the Mask on EXTI 13
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <Interrupt_Config+0x5c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000410 <Interrupt_Config+0x5c>)
 80003d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003da:	6013      	str	r3, [r2, #0]

	EXTI->RTSR &= ~(1<<13);  // Disable Rising Edge Trigger for PC13
 80003dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <Interrupt_Config+0x5c>)
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000410 <Interrupt_Config+0x5c>)
 80003e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80003e6:	6093      	str	r3, [r2, #8]

	EXTI->FTSR |= (1<<13);  // Enable Falling Edge Trigger for PC13
 80003e8:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <Interrupt_Config+0x5c>)
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	4a08      	ldr	r2, [pc, #32]	@ (8000410 <Interrupt_Config+0x5c>)
 80003ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003f2:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority (EXTI15_10_IRQn, 40);  // Set Priority
 80003f4:	2128      	movs	r1, #40	@ 0x28
 80003f6:	2028      	movs	r0, #40	@ 0x28
 80003f8:	f7ff ff20 	bl	800023c <__NVIC_SetPriority>

	NVIC_EnableIRQ (EXTI15_10_IRQn);  // Enable Interrupt
 80003fc:	2028      	movs	r0, #40	@ 0x28
 80003fe:	f7ff ff01 	bl	8000204 <__NVIC_EnableIRQ>

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40023800 	.word	0x40023800
 800040c:	40013800 	.word	0x40013800
 8000410:	40013c00 	.word	0x40013c00

08000414 <EXTI15_10_IRQHandler>:

uint8_t count = 0;
int flag = 0;

void EXTI15_10_IRQHandler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
	1. Check the Pin, which trgerred the Interrupt
	2. Clear the Interrupt Pending Bit

	********************************************************/

	if (EXTI->PR & (1<<13))    // If the PC13 triggered the interrupt
 8000418:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <EXTI15_10_IRQHandler+0x38>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000420:	2b00      	cmp	r3, #0
 8000422:	d00e      	beq.n	8000442 <EXTI15_10_IRQHandler+0x2e>
	{
		flag = 1;
 8000424:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <EXTI15_10_IRQHandler+0x3c>)
 8000426:	2201      	movs	r2, #1
 8000428:	601a      	str	r2, [r3, #0]
		GPIOA->ODR ^=(1<<5);
 800042a:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <EXTI15_10_IRQHandler+0x40>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a09      	ldr	r2, [pc, #36]	@ (8000454 <EXTI15_10_IRQHandler+0x40>)
 8000430:	f083 0320 	eor.w	r3, r3, #32
 8000434:	6153      	str	r3, [r2, #20]
		EXTI->PR |= (1<<13);  // Clear the interrupt flag by writing a 1
 8000436:	4b05      	ldr	r3, [pc, #20]	@ (800044c <EXTI15_10_IRQHandler+0x38>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a04      	ldr	r2, [pc, #16]	@ (800044c <EXTI15_10_IRQHandler+0x38>)
 800043c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000440:	6153      	str	r3, [r2, #20]
	}
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40013c00 	.word	0x40013c00
 8000450:	20000020 	.word	0x20000020
 8000454:	40020000 	.word	0x40020000

08000458 <delay>:

void delay (uint32_t delay)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	while (delay--);
 8000460:	bf00      	nop
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	1e5a      	subs	r2, r3, #1
 8000466:	607a      	str	r2, [r7, #4]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d1fa      	bne.n	8000462 <delay+0xa>
}
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <main>:

int main ()
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	SysClockConfig();
 800047c:	f7ff ff08 	bl	8000290 <SysClockConfig>
	GPIO_Config();
 8000480:	f7ff ff62 	bl	8000348 <GPIO_Config>
	Interrupt_Config();
 8000484:	f7ff ff96 	bl	80003b4 <Interrupt_Config>

	while (1)
	{
		if (flag)
 8000488:	4b08      	ldr	r3, [pc, #32]	@ (80004ac <main+0x34>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d0fb      	beq.n	8000488 <main+0x10>
		{
			delay (3000000);
 8000490:	4807      	ldr	r0, [pc, #28]	@ (80004b0 <main+0x38>)
 8000492:	f7ff ffe1 	bl	8000458 <delay>
			count++;
 8000496:	4b07      	ldr	r3, [pc, #28]	@ (80004b4 <main+0x3c>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	3301      	adds	r3, #1
 800049c:	b2da      	uxtb	r2, r3
 800049e:	4b05      	ldr	r3, [pc, #20]	@ (80004b4 <main+0x3c>)
 80004a0:	701a      	strb	r2, [r3, #0]
			flag = 0;
 80004a2:	4b02      	ldr	r3, [pc, #8]	@ (80004ac <main+0x34>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
		if (flag)
 80004a8:	e7ee      	b.n	8000488 <main+0x10>
 80004aa:	bf00      	nop
 80004ac:	20000020 	.word	0x20000020
 80004b0:	002dc6c0 	.word	0x002dc6c0
 80004b4:	2000001c 	.word	0x2000001c

080004b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b8:	480d      	ldr	r0, [pc, #52]	@ (80004f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c0:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c2:	490d      	ldr	r1, [pc, #52]	@ (80004f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c4:	4a0d      	ldr	r2, [pc, #52]	@ (80004fc <LoopForever+0xe>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c8:	e002      	b.n	80004d0 <LoopCopyDataInit>

080004ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ce:	3304      	adds	r3, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d4:	d3f9      	bcc.n	80004ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000504 <LoopForever+0x16>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004dc:	e001      	b.n	80004e2 <LoopFillZerobss>

080004de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e0:	3204      	adds	r2, #4

080004e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e4:	d3fb      	bcc.n	80004de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004e6:	f000 f811 	bl	800050c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ea:	f7ff ffc5 	bl	8000478 <main>

080004ee <LoopForever>:

LoopForever:
  b LoopForever
 80004ee:	e7fe      	b.n	80004ee <LoopForever>
  ldr   r0, =_estack
 80004f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004fc:	08000574 	.word	0x08000574
  ldr r2, =_sbss
 8000500:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000504:	20000024 	.word	0x20000024

08000508 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000508:	e7fe      	b.n	8000508 <ADC_IRQHandler>
	...

0800050c <__libc_init_array>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	4d0d      	ldr	r5, [pc, #52]	@ (8000544 <__libc_init_array+0x38>)
 8000510:	4c0d      	ldr	r4, [pc, #52]	@ (8000548 <__libc_init_array+0x3c>)
 8000512:	1b64      	subs	r4, r4, r5
 8000514:	10a4      	asrs	r4, r4, #2
 8000516:	2600      	movs	r6, #0
 8000518:	42a6      	cmp	r6, r4
 800051a:	d109      	bne.n	8000530 <__libc_init_array+0x24>
 800051c:	4d0b      	ldr	r5, [pc, #44]	@ (800054c <__libc_init_array+0x40>)
 800051e:	4c0c      	ldr	r4, [pc, #48]	@ (8000550 <__libc_init_array+0x44>)
 8000520:	f000 f818 	bl	8000554 <_init>
 8000524:	1b64      	subs	r4, r4, r5
 8000526:	10a4      	asrs	r4, r4, #2
 8000528:	2600      	movs	r6, #0
 800052a:	42a6      	cmp	r6, r4
 800052c:	d105      	bne.n	800053a <__libc_init_array+0x2e>
 800052e:	bd70      	pop	{r4, r5, r6, pc}
 8000530:	f855 3b04 	ldr.w	r3, [r5], #4
 8000534:	4798      	blx	r3
 8000536:	3601      	adds	r6, #1
 8000538:	e7ee      	b.n	8000518 <__libc_init_array+0xc>
 800053a:	f855 3b04 	ldr.w	r3, [r5], #4
 800053e:	4798      	blx	r3
 8000540:	3601      	adds	r6, #1
 8000542:	e7f2      	b.n	800052a <__libc_init_array+0x1e>
 8000544:	0800056c 	.word	0x0800056c
 8000548:	0800056c 	.word	0x0800056c
 800054c:	0800056c 	.word	0x0800056c
 8000550:	08000570 	.word	0x08000570

08000554 <_init>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	bf00      	nop
 8000558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055a:	bc08      	pop	{r3}
 800055c:	469e      	mov	lr, r3
 800055e:	4770      	bx	lr

08000560 <_fini>:
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000562:	bf00      	nop
 8000564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000566:	bc08      	pop	{r3}
 8000568:	469e      	mov	lr, r3
 800056a:	4770      	bx	lr
