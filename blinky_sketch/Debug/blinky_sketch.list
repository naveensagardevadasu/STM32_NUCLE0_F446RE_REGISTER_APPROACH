
blinky_sketch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a4  080003a4  0000201c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a4  080003a4  0000201c  2**0
                  CONTENTS
  4 .ARM          00000000  080003a4  080003a4  0000201c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a4  080003a4  0000201c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a4  080003a4  000013a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003a8  080003a8  000013a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080003ac  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000001c  080003c8  0000201c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  080003c8  00002040  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001a4  00000000  00000000  00002046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000c2  00000000  00000000  000021ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  000022b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000039  00000000  00000000  00002308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f64  00000000  00000000  00002341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000506  00000000  00000000  000032a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003c75  00000000  00000000  000037ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00007420  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000098  00000000  00000000  00007464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a5  00000000  00000000  000074fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800038c 	.word	0x0800038c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	0800038c 	.word	0x0800038c

08000204 <main>:
char source[8]="HELOYES";
char dest[8];
char dest1[4];

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    DMA2_init();
 8000208:	f000 f804 	bl	8000214 <DMA2_init>
    DMA2_Start();
 800020c:	f000 f84a 	bl	80002a4 <DMA2_Start>
    while(1)
 8000210:	bf00      	nop
 8000212:	e7fd      	b.n	8000210 <main+0xc>

08000214 <DMA2_init>:
    {
    }
}

void DMA2_init()
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	*AHB1ENR |= (1<<22); 		//Enable DMA2 RCC
 8000218:	4b20      	ldr	r3, [pc, #128]	@ (800029c <DMA2_init+0x88>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b1f      	ldr	r3, [pc, #124]	@ (800029c <DMA2_init+0x88>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000226:	601a      	str	r2, [r3, #0]
	*DMA2_S0CR |= (2<<6);		//Data transfer direction M2M
 8000228:	4b1d      	ldr	r3, [pc, #116]	@ (80002a0 <DMA2_init+0x8c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	4b1c      	ldr	r3, [pc, #112]	@ (80002a0 <DMA2_init+0x8c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000236:	601a      	str	r2, [r3, #0]
	*DMA2_S0CR &= ~(1<<25);		//Channel selection - channel number 0
 8000238:	4b19      	ldr	r3, [pc, #100]	@ (80002a0 <DMA2_init+0x8c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4b18      	ldr	r3, [pc, #96]	@ (80002a0 <DMA2_init+0x8c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8000246:	601a      	str	r2, [r3, #0]
	*DMA2_S0CR |= (0<<16);		//Priority level L/M/H
 8000248:	4b15      	ldr	r3, [pc, #84]	@ (80002a0 <DMA2_init+0x8c>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	4b14      	ldr	r3, [pc, #80]	@ (80002a0 <DMA2_init+0x8c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	6812      	ldr	r2, [r2, #0]
 8000252:	601a      	str	r2, [r3, #0]
	*DMA2_S0CR |= (1<<10);		//Memory increment mode
 8000254:	4b12      	ldr	r3, [pc, #72]	@ (80002a0 <DMA2_init+0x8c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b11      	ldr	r3, [pc, #68]	@ (80002a0 <DMA2_init+0x8c>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000262:	601a      	str	r2, [r3, #0]
	*DMA2_S0CR &= ~(1<<13);		//Memory data size - 8 bit
 8000264:	4b0e      	ldr	r3, [pc, #56]	@ (80002a0 <DMA2_init+0x8c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	4b0d      	ldr	r3, [pc, #52]	@ (80002a0 <DMA2_init+0x8c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000272:	601a      	str	r2, [r3, #0]
	*DMA2_S0CR |= (1<<9);		//Peripheral increment mode
 8000274:	4b0a      	ldr	r3, [pc, #40]	@ (80002a0 <DMA2_init+0x8c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <DMA2_init+0x8c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000282:	601a      	str	r2, [r3, #0]
	*DMA2_S0CR &= ~(1<<11);		//Peripheral data size - 8 bit
 8000284:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <DMA2_init+0x8c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b05      	ldr	r3, [pc, #20]	@ (80002a0 <DMA2_init+0x8c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000292:	601a      	str	r2, [r3, #0]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000004 	.word	0x20000004

080002a4 <DMA2_Start>:

void DMA2_Start()
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
	*DMA2_S0NDTR = 8;			//No of data bytes
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <DMA2_Start+0x34>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2208      	movs	r2, #8
 80002ae:	601a      	str	r2, [r3, #0]
	*DMA2_S0M0AR = (uint32_t) &dest;	//Destination address
 80002b0:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <DMA2_Start+0x38>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a0a      	ldr	r2, [pc, #40]	@ (80002e0 <DMA2_Start+0x3c>)
 80002b6:	601a      	str	r2, [r3, #0]
	*DMA2_S0PAR = (uint32_t) &source;	//Source address
 80002b8:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <DMA2_Start+0x40>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a0a      	ldr	r2, [pc, #40]	@ (80002e8 <DMA2_Start+0x44>)
 80002be:	601a      	str	r2, [r3, #0]
	*DMA2_S0CR |= (1<<0);		//Start transfer
 80002c0:	4b0a      	ldr	r3, [pc, #40]	@ (80002ec <DMA2_Start+0x48>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <DMA2_Start+0x48>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f042 0201 	orr.w	r2, r2, #1
 80002ce:	601a      	str	r2, [r3, #0]
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	20000008 	.word	0x20000008
 80002dc:	20000010 	.word	0x20000010
 80002e0:	20000038 	.word	0x20000038
 80002e4:	2000000c 	.word	0x2000000c
 80002e8:	20000014 	.word	0x20000014
 80002ec:	20000004 	.word	0x20000004

080002f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f0:	480d      	ldr	r0, [pc, #52]	@ (8000328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f8:	480c      	ldr	r0, [pc, #48]	@ (800032c <LoopForever+0x6>)
  ldr r1, =_edata
 80002fa:	490d      	ldr	r1, [pc, #52]	@ (8000330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000334 <LoopForever+0xe>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a0a      	ldr	r2, [pc, #40]	@ (8000338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000310:	4c0a      	ldr	r4, [pc, #40]	@ (800033c <LoopForever+0x16>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031e:	f000 f811 	bl	8000344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000322:	f7ff ff6f 	bl	8000204 <main>

08000326 <LoopForever>:

LoopForever:
  b LoopForever
 8000326:	e7fe      	b.n	8000326 <LoopForever>
  ldr   r0, =_estack
 8000328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000334:	080003ac 	.word	0x080003ac
  ldr r2, =_sbss
 8000338:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800033c:	20000040 	.word	0x20000040

08000340 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC_IRQHandler>
	...

08000344 <__libc_init_array>:
 8000344:	b570      	push	{r4, r5, r6, lr}
 8000346:	4d0d      	ldr	r5, [pc, #52]	@ (800037c <__libc_init_array+0x38>)
 8000348:	4c0d      	ldr	r4, [pc, #52]	@ (8000380 <__libc_init_array+0x3c>)
 800034a:	1b64      	subs	r4, r4, r5
 800034c:	10a4      	asrs	r4, r4, #2
 800034e:	2600      	movs	r6, #0
 8000350:	42a6      	cmp	r6, r4
 8000352:	d109      	bne.n	8000368 <__libc_init_array+0x24>
 8000354:	4d0b      	ldr	r5, [pc, #44]	@ (8000384 <__libc_init_array+0x40>)
 8000356:	4c0c      	ldr	r4, [pc, #48]	@ (8000388 <__libc_init_array+0x44>)
 8000358:	f000 f818 	bl	800038c <_init>
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	10a4      	asrs	r4, r4, #2
 8000360:	2600      	movs	r6, #0
 8000362:	42a6      	cmp	r6, r4
 8000364:	d105      	bne.n	8000372 <__libc_init_array+0x2e>
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f855 3b04 	ldr.w	r3, [r5], #4
 800036c:	4798      	blx	r3
 800036e:	3601      	adds	r6, #1
 8000370:	e7ee      	b.n	8000350 <__libc_init_array+0xc>
 8000372:	f855 3b04 	ldr.w	r3, [r5], #4
 8000376:	4798      	blx	r3
 8000378:	3601      	adds	r6, #1
 800037a:	e7f2      	b.n	8000362 <__libc_init_array+0x1e>
 800037c:	080003a4 	.word	0x080003a4
 8000380:	080003a4 	.word	0x080003a4
 8000384:	080003a4 	.word	0x080003a4
 8000388:	080003a8 	.word	0x080003a8

0800038c <_init>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr

08000398 <_fini>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr
