
PWM_OUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000308  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004cc  080004d4  000014d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004cc  080004cc  000014d4  2**0
                  CONTENTS
  4 .ARM          00000000  080004cc  080004cc  000014d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004cc  080004d4  000014d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004cc  080004cc  000014cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004d0  080004d0  000014d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  080004d4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004d4  00002024  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000668  00000000  00000000  000014fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000163  00000000  00000000  00001b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00001cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004c  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c53c  00000000  00000000  00001d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000007ac  00000000  00000000  0000e2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000452a5  00000000  00000000  0000ea74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00053d19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000104  00000000  00000000  00053d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00053e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004b4 	.word	0x080004b4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080004b4 	.word	0x080004b4

08000204 <SysTick_Init>:


volatile uint32_t ms_counter = 0;
volatile uint32_t millis = 0;

void SysTick_Init(){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
    SysTick->VAL = 0;
 8000208:	4b06      	ldr	r3, [pc, #24]	@ (8000224 <SysTick_Init+0x20>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]
    SysTick->LOAD = (HCLK_FREQ / 1000)- 1;
 800020e:	4b05      	ldr	r3, [pc, #20]	@ (8000224 <SysTick_Init+0x20>)
 8000210:	4a05      	ldr	r2, [pc, #20]	@ (8000228 <SysTick_Init+0x24>)
 8000212:	605a      	str	r2, [r3, #4]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000214:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <SysTick_Init+0x20>)
 8000216:	2207      	movs	r2, #7
 8000218:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_TICKINT_Msk |
                    SysTick_CTRL_ENABLE_Msk;
}
 800021a:	bf00      	nop
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000e010 	.word	0xe000e010
 8000228:	0002bf1f 	.word	0x0002bf1f

0800022c <SysTick_Handler>:

void SysTick_Handler(){
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
    if (ms_counter) ms_counter--;
 8000230:	4b08      	ldr	r3, [pc, #32]	@ (8000254 <SysTick_Handler+0x28>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d004      	beq.n	8000242 <SysTick_Handler+0x16>
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <SysTick_Handler+0x28>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	3b01      	subs	r3, #1
 800023e:	4a05      	ldr	r2, [pc, #20]	@ (8000254 <SysTick_Handler+0x28>)
 8000240:	6013      	str	r3, [r2, #0]
    millis++;
 8000242:	4b05      	ldr	r3, [pc, #20]	@ (8000258 <SysTick_Handler+0x2c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	3301      	adds	r3, #1
 8000248:	4a03      	ldr	r2, [pc, #12]	@ (8000258 <SysTick_Handler+0x2c>)
 800024a:	6013      	str	r3, [r2, #0]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	2000001c 	.word	0x2000001c
 8000258:	20000020 	.word	0x20000020

0800025c <delay_ms>:

void delay_ms(uint32_t ms){
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    ms_counter = ms;
 8000264:	4a06      	ldr	r2, [pc, #24]	@ (8000280 <delay_ms+0x24>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	6013      	str	r3, [r2, #0]
    while (ms_counter);
 800026a:	bf00      	nop
 800026c:	4b04      	ldr	r3, [pc, #16]	@ (8000280 <delay_ms+0x24>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d1fb      	bne.n	800026c <delay_ms+0x10>
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	2000001c 	.word	0x2000001c

08000284 <clockSpeed_PLL>:
    return millis;
}



void clockSpeed_PLL(){
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0

    RCC->CR |= RCC_CR_HSION;
 8000288:	4b32      	ldr	r3, [pc, #200]	@ (8000354 <clockSpeed_PLL+0xd0>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a31      	ldr	r2, [pc, #196]	@ (8000354 <clockSpeed_PLL+0xd0>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));
 8000294:	bf00      	nop
 8000296:	4b2f      	ldr	r3, [pc, #188]	@ (8000354 <clockSpeed_PLL+0xd0>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f003 0302 	and.w	r3, r3, #2
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d0f9      	beq.n	8000296 <clockSpeed_PLL+0x12>

    RCC->PLLCFGR = (PLL_M) | (PLL_N << 6) | (PLL_P << 16) | (PLL_Q << 24);
 80002a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000354 <clockSpeed_PLL+0xd0>)
 80002a4:	4a2c      	ldr	r2, [pc, #176]	@ (8000358 <clockSpeed_PLL+0xd4>)
 80002a6:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR &=~ RCC_PLLCFGR_PLLSRC;
 80002a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000354 <clockSpeed_PLL+0xd0>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4a29      	ldr	r2, [pc, #164]	@ (8000354 <clockSpeed_PLL+0xd0>)
 80002ae:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80002b2:	6053      	str	r3, [r2, #4]

    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE2_DIV2 | RCC_CFGR_PPRE1_DIV4;
 80002b4:	4b27      	ldr	r3, [pc, #156]	@ (8000354 <clockSpeed_PLL+0xd0>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	4a26      	ldr	r2, [pc, #152]	@ (8000354 <clockSpeed_PLL+0xd0>)
 80002ba:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 80002be:	6093      	str	r3, [r2, #8]

    RCC->CR |= RCC_CR_PLLON;
 80002c0:	4b24      	ldr	r3, [pc, #144]	@ (8000354 <clockSpeed_PLL+0xd0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a23      	ldr	r2, [pc, #140]	@ (8000354 <clockSpeed_PLL+0xd0>)
 80002c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002ca:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 80002cc:	bf00      	nop
 80002ce:	4b21      	ldr	r3, [pc, #132]	@ (8000354 <clockSpeed_PLL+0xd0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f9      	beq.n	80002ce <clockSpeed_PLL+0x4a>

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002da:	4b1e      	ldr	r3, [pc, #120]	@ (8000354 <clockSpeed_PLL+0xd0>)
 80002dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002de:	4a1d      	ldr	r2, [pc, #116]	@ (8000354 <clockSpeed_PLL+0xd0>)
 80002e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002e4:	6413      	str	r3, [r2, #64]	@ 0x40

    PWR->CR |= PWR_CR_ODEN;
 80002e6:	4b1d      	ldr	r3, [pc, #116]	@ (800035c <clockSpeed_PLL+0xd8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a1c      	ldr	r2, [pc, #112]	@ (800035c <clockSpeed_PLL+0xd8>)
 80002ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002f0:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR & PWR_CSR_ODRDY)) ;
 80002f2:	bf00      	nop
 80002f4:	4b19      	ldr	r3, [pc, #100]	@ (800035c <clockSpeed_PLL+0xd8>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d0f9      	beq.n	80002f4 <clockSpeed_PLL+0x70>

    PWR->CR |= PWR_CR_ODSWEN;
 8000300:	4b16      	ldr	r3, [pc, #88]	@ (800035c <clockSpeed_PLL+0xd8>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a15      	ldr	r2, [pc, #84]	@ (800035c <clockSpeed_PLL+0xd8>)
 8000306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800030a:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR & PWR_CSR_ODSWRDY)) ;
 800030c:	bf00      	nop
 800030e:	4b13      	ldr	r3, [pc, #76]	@ (800035c <clockSpeed_PLL+0xd8>)
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0f9      	beq.n	800030e <clockSpeed_PLL+0x8a>

    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 800031a:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <clockSpeed_PLL+0xdc>)
 800031c:	f240 7205 	movw	r2, #1797	@ 0x705
 8000320:	601a      	str	r2, [r3, #0]

    RCC->CFGR &=~ RCC_CFGR_SW;
 8000322:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <clockSpeed_PLL+0xd0>)
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	4a0b      	ldr	r2, [pc, #44]	@ (8000354 <clockSpeed_PLL+0xd0>)
 8000328:	f023 0303 	bic.w	r3, r3, #3
 800032c:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800032e:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <clockSpeed_PLL+0xd0>)
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	4a08      	ldr	r2, [pc, #32]	@ (8000354 <clockSpeed_PLL+0xd0>)
 8000334:	f043 0302 	orr.w	r3, r3, #2
 8000338:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800033a:	bf00      	nop
 800033c:	4b05      	ldr	r3, [pc, #20]	@ (8000354 <clockSpeed_PLL+0xd0>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	f003 030c 	and.w	r3, r3, #12
 8000344:	2b08      	cmp	r3, #8
 8000346:	d1f9      	bne.n	800033c <clockSpeed_PLL+0xb8>

}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800
 8000358:	02002d08 	.word	0x02002d08
 800035c:	40007000 	.word	0x40007000
 8000360:	40023c00 	.word	0x40023c00

08000364 <main>:


int main(){
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0

    clockSpeed_PLL();
 800036a:	f7ff ff8b 	bl	8000284 <clockSpeed_PLL>
    SysTick_Init();
 800036e:	f7ff ff49 	bl	8000204 <SysTick_Init>

    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000372:	4b27      	ldr	r3, [pc, #156]	@ (8000410 <main+0xac>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000376:	4a26      	ldr	r2, [pc, #152]	@ (8000410 <main+0xac>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800037e:	4b24      	ldr	r3, [pc, #144]	@ (8000410 <main+0xac>)
 8000380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000382:	4a23      	ldr	r2, [pc, #140]	@ (8000410 <main+0xac>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6413      	str	r3, [r2, #64]	@ 0x40

    GPIOA->AFR[0] |= PA5_AF1;
 800038a:	4b22      	ldr	r3, [pc, #136]	@ (8000414 <main+0xb0>)
 800038c:	6a1b      	ldr	r3, [r3, #32]
 800038e:	4a21      	ldr	r2, [pc, #132]	@ (8000414 <main+0xb0>)
 8000390:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000394:	6213      	str	r3, [r2, #32]
    GPIOA->MODER |= PA5_AF_MODE;
 8000396:	4b1f      	ldr	r3, [pc, #124]	@ (8000414 <main+0xb0>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a1e      	ldr	r2, [pc, #120]	@ (8000414 <main+0xb0>)
 800039c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003a0:	6013      	str	r3, [r2, #0]

    TIM2->ARR = 255;
 80003a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a6:	22ff      	movs	r2, #255	@ 0xff
 80003a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->CCMR1 = TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80003aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ae:	2260      	movs	r2, #96	@ 0x60
 80003b0:	619a      	str	r2, [r3, #24]
    TIM2->CCER |= TIM_CCER_CC1E;
 80003b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b6:	6a1b      	ldr	r3, [r3, #32]
 80003b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6213      	str	r3, [r2, #32]
    TIM2->CR1 |= TIM_CR1_CEN;
 80003c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6013      	str	r3, [r2, #0]

    short brightness = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	80fb      	strh	r3, [r7, #6]
    short fadeAmount = 2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	80bb      	strh	r3, [r7, #4]

    while(1){
        TIM2->CCR1 = brightness;
 80003da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003e2:	6353      	str	r3, [r2, #52]	@ 0x34

        brightness += fadeAmount;
 80003e4:	88fa      	ldrh	r2, [r7, #6]
 80003e6:	88bb      	ldrh	r3, [r7, #4]
 80003e8:	4413      	add	r3, r2
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	80fb      	strh	r3, [r7, #6]

        if (brightness <= 0 || brightness >= 255) {
 80003ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	dd03      	ble.n	80003fe <main+0x9a>
 80003f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80003fa:	2bfe      	cmp	r3, #254	@ 0xfe
 80003fc:	dd03      	ble.n	8000406 <main+0xa2>
            fadeAmount = -fadeAmount;
 80003fe:	88bb      	ldrh	r3, [r7, #4]
 8000400:	425b      	negs	r3, r3
 8000402:	b29b      	uxth	r3, r3
 8000404:	80bb      	strh	r3, [r7, #4]
        }

        delay_ms(10);
 8000406:	200a      	movs	r0, #10
 8000408:	f7ff ff28 	bl	800025c <delay_ms>
        TIM2->CCR1 = brightness;
 800040c:	e7e5      	b.n	80003da <main+0x76>
 800040e:	bf00      	nop
 8000410:	40023800 	.word	0x40023800
 8000414:	40020000 	.word	0x40020000

08000418 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000418:	480d      	ldr	r0, [pc, #52]	@ (8000450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800041a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800041c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000420:	480c      	ldr	r0, [pc, #48]	@ (8000454 <LoopForever+0x6>)
  ldr r1, =_edata
 8000422:	490d      	ldr	r1, [pc, #52]	@ (8000458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000424:	4a0d      	ldr	r2, [pc, #52]	@ (800045c <LoopForever+0xe>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000428:	e002      	b.n	8000430 <LoopCopyDataInit>

0800042a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800042c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042e:	3304      	adds	r3, #4

08000430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000434:	d3f9      	bcc.n	800042a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000436:	4a0a      	ldr	r2, [pc, #40]	@ (8000460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000438:	4c0a      	ldr	r4, [pc, #40]	@ (8000464 <LoopForever+0x16>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800043c:	e001      	b.n	8000442 <LoopFillZerobss>

0800043e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000440:	3204      	adds	r2, #4

08000442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000444:	d3fb      	bcc.n	800043e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000446:	f000 f811 	bl	800046c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044a:	f7ff ff8b 	bl	8000364 <main>

0800044e <LoopForever>:

LoopForever:
  b LoopForever
 800044e:	e7fe      	b.n	800044e <LoopForever>
  ldr   r0, =_estack
 8000450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000458:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800045c:	080004d4 	.word	0x080004d4
  ldr r2, =_sbss
 8000460:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000464:	20000024 	.word	0x20000024

08000468 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000468:	e7fe      	b.n	8000468 <ADC_IRQHandler>
	...

0800046c <__libc_init_array>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	4d0d      	ldr	r5, [pc, #52]	@ (80004a4 <__libc_init_array+0x38>)
 8000470:	4c0d      	ldr	r4, [pc, #52]	@ (80004a8 <__libc_init_array+0x3c>)
 8000472:	1b64      	subs	r4, r4, r5
 8000474:	10a4      	asrs	r4, r4, #2
 8000476:	2600      	movs	r6, #0
 8000478:	42a6      	cmp	r6, r4
 800047a:	d109      	bne.n	8000490 <__libc_init_array+0x24>
 800047c:	4d0b      	ldr	r5, [pc, #44]	@ (80004ac <__libc_init_array+0x40>)
 800047e:	4c0c      	ldr	r4, [pc, #48]	@ (80004b0 <__libc_init_array+0x44>)
 8000480:	f000 f818 	bl	80004b4 <_init>
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	10a4      	asrs	r4, r4, #2
 8000488:	2600      	movs	r6, #0
 800048a:	42a6      	cmp	r6, r4
 800048c:	d105      	bne.n	800049a <__libc_init_array+0x2e>
 800048e:	bd70      	pop	{r4, r5, r6, pc}
 8000490:	f855 3b04 	ldr.w	r3, [r5], #4
 8000494:	4798      	blx	r3
 8000496:	3601      	adds	r6, #1
 8000498:	e7ee      	b.n	8000478 <__libc_init_array+0xc>
 800049a:	f855 3b04 	ldr.w	r3, [r5], #4
 800049e:	4798      	blx	r3
 80004a0:	3601      	adds	r6, #1
 80004a2:	e7f2      	b.n	800048a <__libc_init_array+0x1e>
 80004a4:	080004cc 	.word	0x080004cc
 80004a8:	080004cc 	.word	0x080004cc
 80004ac:	080004cc 	.word	0x080004cc
 80004b0:	080004d0 	.word	0x080004d0

080004b4 <_init>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr

080004c0 <_fini>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	bf00      	nop
 80004c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c6:	bc08      	pop	{r3}
 80004c8:	469e      	mov	lr, r3
 80004ca:	4770      	bx	lr
